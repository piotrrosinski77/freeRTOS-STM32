
proj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006954  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006af4  08006af4  00007af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c10  08006c10  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c10  08006c10  00007c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c18  08006c18  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c18  08006c18  00007c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c1c  08006c1c  00007c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006c20  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c04  2000006c  08006c8c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c70  08006c8c  00008c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f6e  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384a  00000000  00000000  0002100a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00024858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001070  00000000  00000000  00025d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000460e  00000000  00000000  00026e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c7f  00000000  00000000  0002b40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac49  00000000  00000000  0004208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dccd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  000dcd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000e2dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006adc 	.word	0x08006adc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006adc 	.word	0x08006adc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
	ITM_SendChar(chr);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffd1 	bl	80005ac <ITM_SendChar>
	return 1;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fc08 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f83c 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f8c2 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000624:	f000 f896 	bl	8000754 <MX_USART2_UART_Init>
  //printf("osKernelInitialize()\n");

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000628:	f002 f92a 	bl	8002880 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MyTask01 */
  MyTask01Handle = osThreadNew(StartTask01, NULL, &MyTask01_attributes);
 800062c:	4a10      	ldr	r2, [pc, #64]	@ (8000670 <main+0x5c>)
 800062e:	2100      	movs	r1, #0
 8000630:	4810      	ldr	r0, [pc, #64]	@ (8000674 <main+0x60>)
 8000632:	f002 f96f 	bl	8002914 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <main+0x64>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800063c:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <main+0x68>)
 800063e:	2100      	movs	r1, #0
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <main+0x6c>)
 8000642:	f002 f967 	bl	8002914 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <main+0x70>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800064c:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <main+0x74>)
 800064e:	2100      	movs	r1, #0
 8000650:	480e      	ldr	r0, [pc, #56]	@ (800068c <main+0x78>)
 8000652:	f002 f95f 	bl	8002914 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <main+0x7c>)
 800065a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  myEventFlags = osEventFlagsNew(NULL);
 800065c:	2000      	movs	r0, #0
 800065e:	f002 fa42 	bl	8002ae6 <osEventFlagsNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0b      	ldr	r2, [pc, #44]	@ (8000694 <main+0x80>)
 8000666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f002 f92e 	bl	80028c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0x58>
 8000670:	08006b58 	.word	0x08006b58
 8000674:	08000911 	.word	0x08000911
 8000678:	200000dc 	.word	0x200000dc
 800067c:	08006b7c 	.word	0x08006b7c
 8000680:	08000961 	.word	0x08000961
 8000684:	200000e0 	.word	0x200000e0
 8000688:	08006ba0 	.word	0x08006ba0
 800068c:	080009a1 	.word	0x080009a1
 8000690:	200000e4 	.word	0x200000e4
 8000694:	200000e8 	.word	0x200000e8

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fb95 	bl	8005dd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <SystemClock_Config+0xb4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <SystemClock_Config+0xb4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemClock_Config+0xb4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <SystemClock_Config+0xb8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <SystemClock_Config+0xb8>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <SystemClock_Config+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 feb3 	bl	8001474 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000714:	f000 f976 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f916 	bl	8001964 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073e:	f000 f961 	bl	8000a04 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fd70 	bl	8002270 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f935 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000094 	.word	0x20000094
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b36      	ldr	r3, [pc, #216]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a35      	ldr	r2, [pc, #212]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b33      	ldr	r3, [pc, #204]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b2f      	ldr	r3, [pc, #188]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a2e      	ldr	r2, [pc, #184]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a27      	ldr	r2, [pc, #156]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_OLD_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000818:	4821      	ldr	r0, [pc, #132]	@ (80008a0 <MX_GPIO_Init+0xf8>)
 800081a:	f000 fdd3 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_OLD_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_OLD_Pin;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000824:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_OLD_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	481b      	ldr	r0, [pc, #108]	@ (80008a4 <MX_GPIO_Init+0xfc>)
 8000836:	f000 fc41 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <MX_GPIO_Init+0xf8>)
 8000850:	f000 fc34 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_OLD_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_OLD_Pin|LED_GREEN_Pin;
 8000854:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <MX_GPIO_Init+0xf8>)
 800086e:	f000 fc25 	bl	80010bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2105      	movs	r1, #5
 8000876:	2006      	movs	r0, #6
 8000878:	f000 fbf6 	bl	8001068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800087c:	2006      	movs	r0, #6
 800087e:	f000 fc0f 	bl	80010a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2105      	movs	r1, #5
 8000886:	2028      	movs	r0, #40	@ 0x28
 8000888:	f000 fbee 	bl	8001068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088c:	2028      	movs	r0, #40	@ 0x28
 800088e:	f000 fc07 	bl	80010a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020800 	.word	0x40020800

080008a8 <reportStatus>:

/* USER CODE BEGIN 4 */
	void reportStatus()
	{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
		task01State = osThreadGetState(MyTask01Handle);
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <reportStatus+0x4c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f8c1 	bl	8002a38 <osThreadGetState>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <reportStatus+0x50>)
 80008ba:	6013      	str	r3, [r2, #0]
		task02State = osThreadGetState(myTask02Handle);
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <reportStatus+0x54>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 f8b9 	bl	8002a38 <osThreadGetState>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <reportStatus+0x58>)
 80008ca:	6013      	str	r3, [r2, #0]
		task03State = osThreadGetState(myTask03Handle);
 80008cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <reportStatus+0x5c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 f8b1 	bl	8002a38 <osThreadGetState>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000908 <reportStatus+0x60>)
 80008da:	6013      	str	r3, [r2, #0]
		printf("Tasks states: 01->%d, 02->%d, 03->%d\n", task01State, task02State, task03State);
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <reportStatus+0x50>)
 80008de:	6819      	ldr	r1, [r3, #0]
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <reportStatus+0x58>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <reportStatus+0x60>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <reportStatus+0x64>)
 80008ea:	f005 fa1f 	bl	8005d2c <iprintf>
	}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000dc 	.word	0x200000dc
 80008f8:	20000088 	.word	0x20000088
 80008fc:	200000e0 	.word	0x200000e0
 8000900:	2000008c 	.word	0x2000008c
 8000904:	200000e4 	.word	0x200000e4
 8000908:	20000090 	.word	0x20000090
 800090c:	08006b18 	.word	0x08006b18

08000910 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //printf("Start job task01\n");
	  reportStatus();
 8000918:	f7ff ffc6 	bl	80008a8 <reportStatus>
	  osEventFlagsWait(myEventFlags, 0x1, osFlagsWaitAll, osWaitForever);
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <StartTask01+0x48>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	2201      	movs	r2, #1
 8000926:	2101      	movs	r1, #1
 8000928:	f002 f95e 	bl	8002be8 <osEventFlagsWait>
	  for(int i = 0; i<10; i++)
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e00a      	b.n	8000948 <StartTask01+0x38>
	  {
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000932:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000936:	4809      	ldr	r0, [pc, #36]	@ (800095c <StartTask01+0x4c>)
 8000938:	f000 fd5d 	bl	80013f6 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 800093c:	2032      	movs	r0, #50	@ 0x32
 800093e:	f000 fab7 	bl	8000eb0 <HAL_Delay>
	  for(int i = 0; i<10; i++)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b09      	cmp	r3, #9
 800094c:	ddf1      	ble.n	8000932 <StartTask01+0x22>
	  }
	//printf("release resources task01\n");
    osDelay(300);
 800094e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000952:	f002 f8ad 	bl	8002ab0 <osDelay>
	  reportStatus();
 8000956:	e7df      	b.n	8000918 <StartTask01+0x8>
 8000958:	200000e8 	.word	0x200000e8
 800095c:	40020000 	.word	0x40020000

08000960 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //printf("Start job task02\n");
	  reportStatus();
 8000968:	f7ff ff9e 	bl	80008a8 <reportStatus>
	  for(int i = 0; i<5; i++)
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e00b      	b.n	800098a <StartTask02+0x2a>
	  {
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000972:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000976:	4809      	ldr	r0, [pc, #36]	@ (800099c <StartTask02+0x3c>)
 8000978:	f000 fd3d 	bl	80013f6 <HAL_GPIO_TogglePin>
		  HAL_Delay(300);
 800097c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000980:	f000 fa96 	bl	8000eb0 <HAL_Delay>
	  for(int i = 0; i<5; i++)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b04      	cmp	r3, #4
 800098e:	ddf0      	ble.n	8000972 <StartTask02+0x12>
	  }
	//printf("release recources task02\n");
    osDelay(300);
 8000990:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000994:	f002 f88c 	bl	8002ab0 <osDelay>
	  reportStatus();
 8000998:	e7e6      	b.n	8000968 <StartTask02+0x8>
 800099a:	bf00      	nop
 800099c:	40020000 	.word	0x40020000

080009a0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  //printf("Start job task03\n");
	  reportStatus();
 80009a8:	f7ff ff7e 	bl	80008a8 <reportStatus>
	  for(int i = 0; i<5; i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e00b      	b.n	80009ca <StartTask03+0x2a>
	  {
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <StartTask03+0x3c>)
 80009ba:	f000 fd03 	bl	80013c4 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 80009be:	20fa      	movs	r0, #250	@ 0xfa
 80009c0:	f000 fa76 	bl	8000eb0 <HAL_Delay>
	  for(int i = 0; i<5; i++)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	ddf0      	ble.n	80009b2 <StartTask03+0x12>
	  }
	//printf("release recources task03\n");
    osDelay(2000);
 80009d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009d4:	f002 f86c 	bl	8002ab0 <osDelay>
	  reportStatus();
 80009d8:	e7e6      	b.n	80009a8 <StartTask03+0x8>
 80009da:	bf00      	nop
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009f2:	f000 fa3d 	bl	8000e70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40000c00 	.word	0x40000c00

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_MspInit+0x54>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	4a11      	ldr	r2, [pc, #68]	@ (8000a64 <HAL_MspInit+0x54>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <HAL_MspInit+0x54>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <HAL_MspInit+0x54>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_MspInit+0x54>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <HAL_MspInit+0x54>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210f      	movs	r1, #15
 8000a52:	f06f 0001 	mvn.w	r0, #1
 8000a56:	f000 fb07 	bl	8001068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_UART_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_UART_MspInit+0x8c>)
 8000ade:	f000 faed 	bl	80010bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	@ 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b33      	ldr	r3, [pc, #204]	@ (8000bdc <HAL_InitTick+0xe4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	4a32      	ldr	r2, [pc, #200]	@ (8000bdc <HAL_InitTick+0xe4>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b18:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <HAL_InitTick+0xe4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f8f8 	bl	8001d24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d103      	bne.n	8000b46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3e:	f001 f8c9 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8000b42:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b44:	e004      	b.n	8000b50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b46:	f001 f8c5 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b52:	4a23      	ldr	r2, [pc, #140]	@ (8000be0 <HAL_InitTick+0xe8>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	0c9b      	lsrs	r3, r3, #18
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b60:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <HAL_InitTick+0xf0>)
 8000b62:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b70:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b84:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b86:	f001 f8ff 	bl	8001d88 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11b      	bne.n	8000bd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b98:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <HAL_InitTick+0xec>)
 8000b9a:	f001 f94f 	bl	8001e3c <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d111      	bne.n	8000bd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bac:	2032      	movs	r0, #50	@ 0x32
 8000bae:	f000 fa77 	bl	80010a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d808      	bhi.n	8000bca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2032      	movs	r0, #50	@ 0x32
 8000bbe:	f000 fa53 	bl	8001068 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_InitTick+0xf4>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e002      	b.n	8000bd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3738      	adds	r7, #56	@ 0x38
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	200000ec 	.word	0x200000ec
 8000be8:	40000c00 	.word	0x40000c00
 8000bec:	20000004 	.word	0x20000004

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  osEventFlagsSet(myEventFlags, 0x1);
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <EXTI0_IRQHandler+0x1c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2101      	movs	r1, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 ff96 	bl	8002b64 <osEventFlagsSet>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f000 fbf7 	bl	800142c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000e8 	.word	0x200000e8

08000c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_OLD_Pin);
 8000c4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c50:	f000 fbec 	bl	800142c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM5_IRQHandler+0x10>)
 8000c5e:	f001 f94f 	bl	8001f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000ec 	.word	0x200000ec

08000c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
  }

  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc9a 	bl	80005fa <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
  }
  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d06:	605a      	str	r2, [r3, #4]
  return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <_sbrk>:
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
 8000d78:	f005 f8da 	bl	8005f30 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20020000 	.word	0x20020000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	20000134 	.word	0x20000134
 8000db0:	20004c70 	.word	0x20004c70

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0xe>
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x1a>)
 8000de6:	2300      	movs	r3, #0
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:
 8000dea:	58d4      	ldr	r4, [r2, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:
 8000df0:	18c4      	adds	r4, r0, r3
 8000df2:	428c      	cmp	r4, r1
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x1e>)
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x22>)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:
 8000e02:	42a2      	cmp	r2, r4
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>
 8000e06:	f005 f899 	bl	8005f3c <__libc_init_array>
 8000e0a:	f7ff fc03 	bl	8000614 <main>
 8000e0e:	4770      	bx	lr
 8000e10:	20020000 	.word	0x20020000
 8000e14:	20000000 	.word	0x20000000
 8000e18:	2000006c 	.word	0x2000006c
 8000e1c:	08006c20 	.word	0x08006c20
 8000e20:	2000006c 	.word	0x2000006c
 8000e24:	20004c70 	.word	0x20004c70

08000e28 <ADC_IRQHandler>:
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f8fc 	bl	8001052 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f7ff fe4c 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fdd6 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000138 	.word	0x20000138

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	@ (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000138 	.word	0x20000138

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	@ (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	@ (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	@ (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	@ 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	@ 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff4c 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107a:	f7ff ff61 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 800107e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	6978      	ldr	r0, [r7, #20]
 8001086:	f7ff ffb1 	bl	8000fec <NVIC_EncodePriority>
 800108a:	4602      	mov	r2, r0
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff80 	bl	8000f98 <__NVIC_SetPriority>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff54 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e159      	b.n	800138c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8148 	bne.w	8001386 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a2 	beq.w	8001386 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a56      	ldr	r2, [pc, #344]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b54      	ldr	r3, [pc, #336]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a52      	ldr	r2, [pc, #328]	@ (80013a8 <HAL_GPIO_Init+0x2ec>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a49      	ldr	r2, [pc, #292]	@ (80013ac <HAL_GPIO_Init+0x2f0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x202>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a48      	ldr	r2, [pc, #288]	@ (80013b0 <HAL_GPIO_Init+0x2f4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x1fe>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a47      	ldr	r2, [pc, #284]	@ (80013b4 <HAL_GPIO_Init+0x2f8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x1fa>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a46      	ldr	r2, [pc, #280]	@ (80013b8 <HAL_GPIO_Init+0x2fc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x1f6>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a45      	ldr	r2, [pc, #276]	@ (80013bc <HAL_GPIO_Init+0x300>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x1f2>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x2ec>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a2f      	ldr	r2, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a24      	ldr	r2, [pc, #144]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f aea2 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001408:	887a      	ldrh	r2, [r7, #2]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	041a      	lsls	r2, r3, #16
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43d9      	mvns	r1, r3
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	400b      	ands	r3, r1
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f806 	bl	800145c <HAL_GPIO_EXTI_Callback>
  }
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e267      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d075      	beq.n	800157e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001492:	4b88      	ldr	r3, [pc, #544]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d00c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149e:	4b85      	ldr	r3, [pc, #532]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d112      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b82      	ldr	r3, [pc, #520]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b7e      	ldr	r3, [pc, #504]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d05b      	beq.n	800157c <HAL_RCC_OscConfig+0x108>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d157      	bne.n	800157c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e242      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x74>
 80014da:	4b76      	ldr	r3, [pc, #472]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a75      	ldr	r2, [pc, #468]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x98>
 80014f2:	4b70      	ldr	r3, [pc, #448]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6f      	ldr	r2, [pc, #444]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6d      	ldr	r3, [pc, #436]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6c      	ldr	r2, [pc, #432]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 800150c:	4b69      	ldr	r3, [pc, #420]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a68      	ldr	r2, [pc, #416]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b66      	ldr	r3, [pc, #408]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a65      	ldr	r2, [pc, #404]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fcb4 	bl	8000e98 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fcb0 	bl	8000e98 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	@ 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e207      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b5b      	ldr	r3, [pc, #364]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xc0>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fca0 	bl	8000e98 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc9c 	bl	8000e98 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	@ 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1f3      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b51      	ldr	r3, [pc, #324]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0xe8>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800158a:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b44      	ldr	r3, [pc, #272]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1c7      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b3b      	ldr	r3, [pc, #236]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4937      	ldr	r1, [pc, #220]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <HAL_RCC_OscConfig+0x244>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc55 	bl	8000e98 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc51 	bl	8000e98 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1a8      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4925      	ldr	r1, [pc, #148]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <HAL_RCC_OscConfig+0x244>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fc34 	bl	8000e98 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fc30 	bl	8000e98 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e187      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d036      	beq.n	80016cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_RCC_OscConfig+0x248>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fc14 	bl	8000e98 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fc10 	bl	8000e98 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e167      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x200>
 8001692:	e01b      	b.n	80016cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_RCC_OscConfig+0x248>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fbfd 	bl	8000e98 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	e00e      	b.n	80016c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fbf9 	bl	8000e98 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d907      	bls.n	80016c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e150      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470000 	.word	0x42470000
 80016bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	4b88      	ldr	r3, [pc, #544]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ea      	bne.n	80016a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8097 	beq.w	8001808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016de:	4b81      	ldr	r3, [pc, #516]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b7d      	ldr	r3, [pc, #500]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4a7c      	ldr	r2, [pc, #496]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	4b7a      	ldr	r3, [pc, #488]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	4b77      	ldr	r3, [pc, #476]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	4b74      	ldr	r3, [pc, #464]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a73      	ldr	r2, [pc, #460]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7ff fbb9 	bl	8000e98 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fbb5 	bl	8000e98 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e10c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b6a      	ldr	r3, [pc, #424]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x2ea>
 8001750:	4b64      	ldr	r3, [pc, #400]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001754:	4a63      	ldr	r2, [pc, #396]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	@ 0x70
 800175c:	e01c      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x30c>
 8001766:	4b5f      	ldr	r3, [pc, #380]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176a:	4a5e      	ldr	r2, [pc, #376]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	@ 0x70
 8001772:	4b5c      	ldr	r3, [pc, #368]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	4a5b      	ldr	r2, [pc, #364]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 8001780:	4b58      	ldr	r3, [pc, #352]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001784:	4a57      	ldr	r2, [pc, #348]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	@ 0x70
 800178c:	4b55      	ldr	r3, [pc, #340]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	4a54      	ldr	r2, [pc, #336]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d015      	beq.n	80017cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fb7a 	bl	8000e98 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fb76 	bl	8000e98 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0cb      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	4b49      	ldr	r3, [pc, #292]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ee      	beq.n	80017a8 <HAL_RCC_OscConfig+0x334>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb64 	bl	8000e98 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb60 	bl	8000e98 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0b5      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	4a38      	ldr	r2, [pc, #224]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a1 	beq.w	8001954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001812:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d05c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d141      	bne.n	80018aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <HAL_RCC_OscConfig+0x478>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb34 	bl	8000e98 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fb30 	bl	8000e98 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e087      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	491b      	ldr	r1, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_RCC_OscConfig+0x478>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb09 	bl	8000e98 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fb05 	bl	8000e98 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e05c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x416>
 80018a8:	e054      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_RCC_OscConfig+0x478>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff faf2 	bl	8000e98 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff faee 	bl	8000e98 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e045      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x444>
 80018d6:	e03d      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e038      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x4ec>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d028      	beq.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d121      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11a      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	4293      	cmp	r3, r2
 800192a:	d111      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	085b      	lsrs	r3, r3, #1
 8001938:	3b01      	subs	r3, #1
 800193a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0cc      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b68      	ldr	r3, [pc, #416]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d90c      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b65      	ldr	r3, [pc, #404]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b63      	ldr	r3, [pc, #396]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0b8      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b8:	4b59      	ldr	r3, [pc, #356]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a58      	ldr	r2, [pc, #352]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d0:	4b53      	ldr	r3, [pc, #332]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a52      	ldr	r2, [pc, #328]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b50      	ldr	r3, [pc, #320]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	494d      	ldr	r1, [pc, #308]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d044      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b47      	ldr	r3, [pc, #284]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d119      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	4b3f      	ldr	r3, [pc, #252]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b3b      	ldr	r3, [pc, #236]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e067      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4934      	ldr	r1, [pc, #208]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a54:	f7ff fa20 	bl	8000e98 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff fa1c 	bl	8000e98 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e04f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d20c      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e032      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab8:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4916      	ldr	r1, [pc, #88]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	490e      	ldr	r1, [pc, #56]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aea:	f000 f821 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	490a      	ldr	r1, [pc, #40]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fff4 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08006bc4 	.word	0x08006bc4
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b34:	b090      	sub	sp, #64	@ 0x40
 8001b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b48:	4b59      	ldr	r3, [pc, #356]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d00d      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x40>
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	f200 80a1 	bhi.w	8001c9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b62:	e09b      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b53      	ldr	r3, [pc, #332]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b68:	e09b      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6a:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b6e:	e098      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b70:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d028      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b9c:	fb03 f201 	mul.w	r2, r3, r1
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	fb00 f303 	mul.w	r3, r0, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a43      	ldr	r2, [pc, #268]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001baa:	fba0 1202 	umull	r1, r2, r0, r2
 8001bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bb6:	4413      	add	r3, r2
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	61fa      	str	r2, [r7, #28]
 8001bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bca:	f7fe fb59 	bl	8000280 <__aeabi_uldivmod>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bd6:	e053      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	2200      	movs	r2, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	617a      	str	r2, [r7, #20]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bea:	f04f 0b00 	mov.w	fp, #0
 8001bee:	4652      	mov	r2, sl
 8001bf0:	465b      	mov	r3, fp
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	0159      	lsls	r1, r3, #5
 8001bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c00:	0150      	lsls	r0, r2, #5
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ebb2 080a 	subs.w	r8, r2, sl
 8001c0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c22:	ebb2 0408 	subs.w	r4, r2, r8
 8001c26:	eb63 0509 	sbc.w	r5, r3, r9
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	00eb      	lsls	r3, r5, #3
 8001c34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c38:	00e2      	lsls	r2, r4, #3
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	eb14 030a 	adds.w	r3, r4, sl
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	eb45 030b 	adc.w	r3, r5, fp
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c56:	4629      	mov	r1, r5
 8001c58:	028b      	lsls	r3, r1, #10
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c60:	4621      	mov	r1, r4
 8001c62:	028a      	lsls	r2, r1, #10
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c74:	f7fe fb04 	bl	8000280 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3740      	adds	r7, #64	@ 0x40
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	017d7840 	.word	0x017d7840

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	@ (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08006bd4 	.word	0x08006bd4

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffdc 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	@ (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08006bd4 	.word	0x08006bd4

08001d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	220f      	movs	r2, #15
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <HAL_RCC_GetClockConfig+0x60>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0207 	and.w	r2, r3, #7
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e041      	b.n	8001e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f839 	bl	8001e26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f000 f9b2 	bl	8002130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e044      	b.n	8001ede <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <HAL_TIM_Base_Start_IT+0xb0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d018      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7e:	d013      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00e      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <HAL_TIM_Base_Start_IT+0xc0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d111      	bne.n	8001ecc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d010      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eca:	e007      	b.n	8001edc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40000800 	.word	0x40000800
 8001ef8:	40000c00 	.word	0x40000c00
 8001efc:	40014000 	.word	0x40014000

08001f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d020      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0202 	mvn.w	r2, #2
 8001f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8d2 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8c4 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8d5 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0204 	mvn.w	r2, #4
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8ac 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f89e 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8af 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d020      	beq.n	8001ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f886 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f878 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f889 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f860 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f852 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f863 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0201 	mvn.w	r2, #1
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fcba 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8e6 	bl	800225c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f834 	bl	800211c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0220 	mvn.w	r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8b8 	bl	8002248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3a      	ldr	r2, [pc, #232]	@ (800222c <TIM_Base_SetConfig+0xfc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00f      	beq.n	8002168 <TIM_Base_SetConfig+0x38>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214e:	d00b      	beq.n	8002168 <TIM_Base_SetConfig+0x38>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a37      	ldr	r2, [pc, #220]	@ (8002230 <TIM_Base_SetConfig+0x100>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <TIM_Base_SetConfig+0x38>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a36      	ldr	r2, [pc, #216]	@ (8002234 <TIM_Base_SetConfig+0x104>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_Base_SetConfig+0x38>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a35      	ldr	r2, [pc, #212]	@ (8002238 <TIM_Base_SetConfig+0x108>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d108      	bne.n	800217a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800216e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2b      	ldr	r2, [pc, #172]	@ (800222c <TIM_Base_SetConfig+0xfc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01b      	beq.n	80021ba <TIM_Base_SetConfig+0x8a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002188:	d017      	beq.n	80021ba <TIM_Base_SetConfig+0x8a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a28      	ldr	r2, [pc, #160]	@ (8002230 <TIM_Base_SetConfig+0x100>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <TIM_Base_SetConfig+0x8a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <TIM_Base_SetConfig+0x104>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00f      	beq.n	80021ba <TIM_Base_SetConfig+0x8a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <TIM_Base_SetConfig+0x108>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00b      	beq.n	80021ba <TIM_Base_SetConfig+0x8a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a25      	ldr	r2, [pc, #148]	@ (800223c <TIM_Base_SetConfig+0x10c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <TIM_Base_SetConfig+0x8a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a24      	ldr	r2, [pc, #144]	@ (8002240 <TIM_Base_SetConfig+0x110>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d003      	beq.n	80021ba <TIM_Base_SetConfig+0x8a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <TIM_Base_SetConfig+0x114>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <TIM_Base_SetConfig+0xfc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f023 0201 	bic.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  }
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40014000 	.word	0x40014000
 8002240:	40014400 	.word	0x40014400
 8002244:	40014800 	.word	0x40014800

08002248 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e042      	b.n	8002308 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fbe6 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	@ 0x24
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f82b 	bl	8002310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b0c0      	sub	sp, #256	@ 0x100
 8002316:	af00      	add	r7, sp, #0
 8002318:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	ea40 0301 	orr.w	r3, r0, r1
 8002338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	431a      	orrs	r2, r3
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002368:	f021 010c 	bic.w	r1, r1, #12
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002376:	430b      	orrs	r3, r1
 8002378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238a:	6999      	ldr	r1, [r3, #24]
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	ea40 0301 	orr.w	r3, r0, r1
 8002396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b8f      	ldr	r3, [pc, #572]	@ (80025dc <UART_SetConfig+0x2cc>)
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d005      	beq.n	80023b0 <UART_SetConfig+0xa0>
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b8d      	ldr	r3, [pc, #564]	@ (80025e0 <UART_SetConfig+0x2d0>)
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d104      	bne.n	80023ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b0:	f7ff fca4 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 80023b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023b8:	e003      	b.n	80023c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ba:	f7ff fc8b 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80023be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023cc:	f040 810c 	bne.w	80025e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023e2:	4622      	mov	r2, r4
 80023e4:	462b      	mov	r3, r5
 80023e6:	1891      	adds	r1, r2, r2
 80023e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023ea:	415b      	adcs	r3, r3
 80023ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023f2:	4621      	mov	r1, r4
 80023f4:	eb12 0801 	adds.w	r8, r2, r1
 80023f8:	4629      	mov	r1, r5
 80023fa:	eb43 0901 	adc.w	r9, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	4690      	mov	r8, r2
 8002414:	4699      	mov	r9, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb18 0303 	adds.w	r3, r8, r3
 800241c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002420:	462b      	mov	r3, r5
 8002422:	eb49 0303 	adc.w	r3, r9, r3
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002436:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800243a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800243e:	460b      	mov	r3, r1
 8002440:	18db      	adds	r3, r3, r3
 8002442:	653b      	str	r3, [r7, #80]	@ 0x50
 8002444:	4613      	mov	r3, r2
 8002446:	eb42 0303 	adc.w	r3, r2, r3
 800244a:	657b      	str	r3, [r7, #84]	@ 0x54
 800244c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002454:	f7fd ff14 	bl	8000280 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4b61      	ldr	r3, [pc, #388]	@ (80025e4 <UART_SetConfig+0x2d4>)
 800245e:	fba3 2302 	umull	r2, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	011c      	lsls	r4, r3, #4
 8002466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800246a:	2200      	movs	r2, #0
 800246c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002470:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	1891      	adds	r1, r2, r2
 800247e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002480:	415b      	adcs	r3, r3
 8002482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002488:	4641      	mov	r1, r8
 800248a:	eb12 0a01 	adds.w	sl, r2, r1
 800248e:	4649      	mov	r1, r9
 8002490:	eb43 0b01 	adc.w	fp, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a8:	4692      	mov	sl, r2
 80024aa:	469b      	mov	fp, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	eb1a 0303 	adds.w	r3, sl, r3
 80024b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024b6:	464b      	mov	r3, r9
 80024b8:	eb4b 0303 	adc.w	r3, fp, r3
 80024bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024d4:	460b      	mov	r3, r1
 80024d6:	18db      	adds	r3, r3, r3
 80024d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80024da:	4613      	mov	r3, r2
 80024dc:	eb42 0303 	adc.w	r3, r2, r3
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80024e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024ea:	f7fd fec9 	bl	8000280 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	4b3b      	ldr	r3, [pc, #236]	@ (80025e4 <UART_SetConfig+0x2d4>)
 80024f6:	fba3 2301 	umull	r2, r3, r3, r1
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2264      	movs	r2, #100	@ 0x64
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	1acb      	subs	r3, r1, r3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800250a:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <UART_SetConfig+0x2d4>)
 800250c:	fba3 2302 	umull	r2, r3, r3, r2
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002518:	441c      	add	r4, r3
 800251a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002524:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800252c:	4642      	mov	r2, r8
 800252e:	464b      	mov	r3, r9
 8002530:	1891      	adds	r1, r2, r2
 8002532:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002534:	415b      	adcs	r3, r3
 8002536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800253c:	4641      	mov	r1, r8
 800253e:	1851      	adds	r1, r2, r1
 8002540:	6339      	str	r1, [r7, #48]	@ 0x30
 8002542:	4649      	mov	r1, r9
 8002544:	414b      	adcs	r3, r1
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002554:	4659      	mov	r1, fp
 8002556:	00cb      	lsls	r3, r1, #3
 8002558:	4651      	mov	r1, sl
 800255a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800255e:	4651      	mov	r1, sl
 8002560:	00ca      	lsls	r2, r1, #3
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	4603      	mov	r3, r0
 8002568:	4642      	mov	r2, r8
 800256a:	189b      	adds	r3, r3, r2
 800256c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002570:	464b      	mov	r3, r9
 8002572:	460a      	mov	r2, r1
 8002574:	eb42 0303 	adc.w	r3, r2, r3
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002588:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800258c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002590:	460b      	mov	r3, r1
 8002592:	18db      	adds	r3, r3, r3
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002596:	4613      	mov	r3, r2
 8002598:	eb42 0303 	adc.w	r3, r2, r3
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800259e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025a6:	f7fd fe6b 	bl	8000280 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <UART_SetConfig+0x2d4>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	@ 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	3332      	adds	r3, #50	@ 0x32
 80025c2:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <UART_SetConfig+0x2d4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	f003 0207 	and.w	r2, r3, #7
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4422      	add	r2, r4
 80025d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025d8:	e106      	b.n	80027e8 <UART_SetConfig+0x4d8>
 80025da:	bf00      	nop
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025fa:	4642      	mov	r2, r8
 80025fc:	464b      	mov	r3, r9
 80025fe:	1891      	adds	r1, r2, r2
 8002600:	6239      	str	r1, [r7, #32]
 8002602:	415b      	adcs	r3, r3
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
 8002606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800260a:	4641      	mov	r1, r8
 800260c:	1854      	adds	r4, r2, r1
 800260e:	4649      	mov	r1, r9
 8002610:	eb43 0501 	adc.w	r5, r3, r1
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	00eb      	lsls	r3, r5, #3
 800261e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002622:	00e2      	lsls	r2, r4, #3
 8002624:	4614      	mov	r4, r2
 8002626:	461d      	mov	r5, r3
 8002628:	4643      	mov	r3, r8
 800262a:	18e3      	adds	r3, r4, r3
 800262c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002630:	464b      	mov	r3, r9
 8002632:	eb45 0303 	adc.w	r3, r5, r3
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002646:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002656:	4629      	mov	r1, r5
 8002658:	008b      	lsls	r3, r1, #2
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002660:	4621      	mov	r1, r4
 8002662:	008a      	lsls	r2, r1, #2
 8002664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002668:	f7fd fe0a 	bl	8000280 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4b60      	ldr	r3, [pc, #384]	@ (80027f4 <UART_SetConfig+0x4e4>)
 8002672:	fba3 2302 	umull	r2, r3, r3, r2
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	011c      	lsls	r4, r3, #4
 800267a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800267e:	2200      	movs	r2, #0
 8002680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800268c:	4642      	mov	r2, r8
 800268e:	464b      	mov	r3, r9
 8002690:	1891      	adds	r1, r2, r2
 8002692:	61b9      	str	r1, [r7, #24]
 8002694:	415b      	adcs	r3, r3
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	4641      	mov	r1, r8
 800269e:	1851      	adds	r1, r2, r1
 80026a0:	6139      	str	r1, [r7, #16]
 80026a2:	4649      	mov	r1, r9
 80026a4:	414b      	adcs	r3, r1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b4:	4659      	mov	r1, fp
 80026b6:	00cb      	lsls	r3, r1, #3
 80026b8:	4651      	mov	r1, sl
 80026ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026be:	4651      	mov	r1, sl
 80026c0:	00ca      	lsls	r2, r1, #3
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	4642      	mov	r2, r8
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026d0:	464b      	mov	r3, r9
 80026d2:	460a      	mov	r2, r1
 80026d4:	eb42 0303 	adc.w	r3, r2, r3
 80026d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026f4:	4649      	mov	r1, r9
 80026f6:	008b      	lsls	r3, r1, #2
 80026f8:	4641      	mov	r1, r8
 80026fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026fe:	4641      	mov	r1, r8
 8002700:	008a      	lsls	r2, r1, #2
 8002702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002706:	f7fd fdbb 	bl	8000280 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4611      	mov	r1, r2
 8002710:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <UART_SetConfig+0x4e4>)
 8002712:	fba3 2301 	umull	r2, r3, r3, r1
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2264      	movs	r2, #100	@ 0x64
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	1acb      	subs	r3, r1, r3
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	3332      	adds	r3, #50	@ 0x32
 8002724:	4a33      	ldr	r2, [pc, #204]	@ (80027f4 <UART_SetConfig+0x4e4>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002730:	441c      	add	r4, r3
 8002732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002736:	2200      	movs	r2, #0
 8002738:	673b      	str	r3, [r7, #112]	@ 0x70
 800273a:	677a      	str	r2, [r7, #116]	@ 0x74
 800273c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	1891      	adds	r1, r2, r2
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	415b      	adcs	r3, r3
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002750:	4641      	mov	r1, r8
 8002752:	1851      	adds	r1, r2, r1
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	4649      	mov	r1, r9
 8002758:	414b      	adcs	r3, r1
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002768:	4659      	mov	r1, fp
 800276a:	00cb      	lsls	r3, r1, #3
 800276c:	4651      	mov	r1, sl
 800276e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002772:	4651      	mov	r1, sl
 8002774:	00ca      	lsls	r2, r1, #3
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	4603      	mov	r3, r0
 800277c:	4642      	mov	r2, r8
 800277e:	189b      	adds	r3, r3, r2
 8002780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002782:	464b      	mov	r3, r9
 8002784:	460a      	mov	r2, r1
 8002786:	eb42 0303 	adc.w	r3, r2, r3
 800278a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	663b      	str	r3, [r7, #96]	@ 0x60
 8002796:	667a      	str	r2, [r7, #100]	@ 0x64
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027a4:	4649      	mov	r1, r9
 80027a6:	008b      	lsls	r3, r1, #2
 80027a8:	4641      	mov	r1, r8
 80027aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ae:	4641      	mov	r1, r8
 80027b0:	008a      	lsls	r2, r1, #2
 80027b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027b6:	f7fd fd63 	bl	8000280 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <UART_SetConfig+0x4e4>)
 80027c0:	fba3 1302 	umull	r1, r3, r3, r2
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	2164      	movs	r1, #100	@ 0x64
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	3332      	adds	r3, #50	@ 0x32
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <UART_SetConfig+0x4e4>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	f003 020f 	and.w	r2, r3, #15
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4422      	add	r2, r4
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027ee:	46bd      	mov	sp, r7
 80027f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f4:	51eb851f 	.word	0x51eb851f

080027f8 <__NVIC_SetPriority>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <SysTick_Handler+0x1c>)
 8002852:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002854:	f002 f8f2 	bl	8004a3c <xTaskGetSchedulerState>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d001      	beq.n	8002862 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800285e:	f002 ff23 	bl	80056a8 <xPortSysTickHandler>
  }
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002870:	2100      	movs	r1, #0
 8002872:	f06f 0004 	mvn.w	r0, #4
 8002876:	f7ff ffbf 	bl	80027f8 <__NVIC_SetPriority>
#endif
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002886:	f3ef 8305 	mrs	r3, IPSR
 800288a:	603b      	str	r3, [r7, #0]
  return(result);
 800288c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002892:	f06f 0305 	mvn.w	r3, #5
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	e00c      	b.n	80028b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <osKernelInitialize+0x44>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028a2:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <osKernelInitialize+0x44>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	e002      	b.n	80028b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	2000013c 	.word	0x2000013c

080028c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ce:	f3ef 8305 	mrs	r3, IPSR
 80028d2:	603b      	str	r3, [r7, #0]
  return(result);
 80028d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80028da:	f06f 0305 	mvn.w	r3, #5
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	e010      	b.n	8002904 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <osKernelStart+0x48>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d109      	bne.n	80028fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028ea:	f7ff ffbf 	bl	800286c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <osKernelStart+0x48>)
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028f4:	f001 fbd2 	bl	800409c <vTaskStartScheduler>
      stat = osOK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	e002      	b.n	8002904 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	2000013c 	.word	0x2000013c

08002914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	@ 0x38
 8002918:	af04      	add	r7, sp, #16
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002924:	f3ef 8305 	mrs	r3, IPSR
 8002928:	617b      	str	r3, [r7, #20]
  return(result);
 800292a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800292c:	2b00      	cmp	r3, #0
 800292e:	d17e      	bne.n	8002a2e <osThreadNew+0x11a>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07b      	beq.n	8002a2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800293a:	2318      	movs	r3, #24
 800293c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d045      	beq.n	80029da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <osThreadNew+0x48>
        name = attr->name;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <osThreadNew+0x6e>
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b38      	cmp	r3, #56	@ 0x38
 8002974:	d805      	bhi.n	8002982 <osThreadNew+0x6e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <osThreadNew+0x72>
        return (NULL);
 8002982:	2300      	movs	r3, #0
 8002984:	e054      	b.n	8002a30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00e      	beq.n	80029bc <osThreadNew+0xa8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2ba7      	cmp	r3, #167	@ 0xa7
 80029a4:	d90a      	bls.n	80029bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <osThreadNew+0xa8>
        mem = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	e010      	b.n	80029de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10c      	bne.n	80029de <osThreadNew+0xca>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <osThreadNew+0xca>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <osThreadNew+0xca>
          mem = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	e001      	b.n	80029de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d110      	bne.n	8002a06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029ec:	9202      	str	r2, [sp, #8]
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6a3a      	ldr	r2, [r7, #32]
 80029f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f001 f902 	bl	8003c04 <xTaskCreateStatic>
 8002a00:	4603      	mov	r3, r0
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e013      	b.n	8002a2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d110      	bne.n	8002a2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f001 f950 	bl	8003cc4 <xTaskCreate>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d001      	beq.n	8002a2e <osThreadNew+0x11a>
            hTask = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a2e:	693b      	ldr	r3, [r7, #16]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3728      	adds	r7, #40	@ 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <osThreadGetState>:
  id = (osThreadId_t)xTaskGetCurrentTaskHandle();

  return (id);
}

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a44:	f3ef 8305 	mrs	r3, IPSR
 8002a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <osThreadGetState+0x1e>
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <osThreadGetState+0x26>
    state = osThreadError;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e022      	b.n	8002aa4 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8002a5e:	6938      	ldr	r0, [r7, #16]
 8002a60:	f001 fab4 	bl	8003fcc <eTaskGetState>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d818      	bhi.n	8002a9c <osThreadGetState+0x64>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <osThreadGetState+0x38>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a85 	.word	0x08002a85
 8002a74:	08002a8b 	.word	0x08002a8b
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a91 	.word	0x08002a91
 8002a80:	08002a97 	.word	0x08002a97
      case eRunning:   state = osThreadRunning;    break;
 8002a84:	2302      	movs	r3, #2
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e00c      	b.n	8002aa4 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e009      	b.n	8002aa4 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8002a90:	2303      	movs	r3, #3
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e006      	b.n	8002aa4 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8002a96:	2304      	movs	r3, #4
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e003      	b.n	8002aa4 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	bf00      	nop
    }
  }

  return (state);
 8002aa4:	697b      	ldr	r3, [r7, #20]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop

08002ab0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab8:	f3ef 8305 	mrs	r3, IPSR
 8002abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002abe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <osDelay+0x1c>
    stat = osErrorISR;
 8002ac4:	f06f 0305 	mvn.w	r3, #5
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e007      	b.n	8002adc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 fa42 	bl	8003f60 <vTaskDelay>
    }
  }

  return (stat);
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002af2:	f3ef 8305 	mrs	r3, IPSR
 8002af6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002af8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d12d      	bne.n	8002b5a <osEventFlagsNew+0x74>
    mem = -1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d015      	beq.n	8002b36 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <osEventFlagsNew+0x3a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b1f      	cmp	r3, #31
 8002b18:	d902      	bls.n	8002b20 <osEventFlagsNew+0x3a>
        mem = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e00c      	b.n	8002b3a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d108      	bne.n	8002b3a <osEventFlagsNew+0x54>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <osEventFlagsNew+0x54>
          mem = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e001      	b.n	8002b3a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f8e9 	bl	8002d1c <xEventGroupCreateStatic>
 8002b4a:	6178      	str	r0, [r7, #20]
 8002b4c:	e005      	b.n	8002b5a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002b54:	f000 f91b 	bl	8002d8e <xEventGroupCreate>
 8002b58:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002b5a:	697b      	ldr	r3, [r7, #20]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <osEventFlagsSet+0x1c>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b7e:	d303      	bcc.n	8002b88 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8002b80:	f06f 0303 	mvn.w	r3, #3
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e028      	b.n	8002bda <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b88:	f3ef 8305 	mrs	r3, IPSR
 8002b8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01d      	beq.n	8002bd0 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	6938      	ldr	r0, [r7, #16]
 8002ba2:	f000 fa9d 	bl	80030e0 <xEventGroupSetBitsFromISR>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8002bac:	f06f 0302 	mvn.w	r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e012      	b.n	8002bda <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <osEventFlagsSet+0x76>
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <osEventFlagsSet+0x80>)
 8002bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	e004      	b.n	8002bda <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002bd0:	6839      	ldr	r1, [r7, #0]
 8002bd2:	6938      	ldr	r0, [r7, #16]
 8002bd4:	f000 f9c8 	bl	8002f68 <xEventGroupSetBits>
 8002bd8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002bda:	697b      	ldr	r3, [r7, #20]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	@ 0x30
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <osEventFlagsWait+0x20>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c06:	d303      	bcc.n	8002c10 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8002c08:	f06f 0303 	mvn.w	r3, #3
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e04b      	b.n	8002ca8 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c10:	f3ef 8305 	mrs	r3, IPSR
 8002c14:	617b      	str	r3, [r7, #20]
  return(result);
 8002c16:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8002c1c:	f06f 0305 	mvn.w	r3, #5
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e041      	b.n	8002ca8 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c32:	e001      	b.n	8002c38 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	e001      	b.n	8002c4c <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	6a3a      	ldr	r2, [r7, #32]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	69b8      	ldr	r0, [r7, #24]
 8002c58:	f000 f8b4 	bl	8002dc4 <xEventGroupWaitBits>
 8002c5c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d019      	beq.n	8002ca8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8002c7a:	f06f 0301 	mvn.w	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	e012      	b.n	8002ca8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002c82:	f06f 0302 	mvn.w	r3, #2
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e00e      	b.n	8002ca8 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8002c9a:	f06f 0301 	mvn.w	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e002      	b.n	8002ca8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002ca2:	f06f 0302 	mvn.w	r3, #2
 8002ca6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3728      	adds	r7, #40	@ 0x28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	@ (8002ce0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4a06      	ldr	r2, [pc, #24]	@ (8002ce4 <vApplicationGetIdleTaskMemory+0x30>)
 8002cca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2280      	movs	r2, #128	@ 0x80
 8002cd0:	601a      	str	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000140 	.word	0x20000140
 8002ce4:	200001e8 	.word	0x200001e8

08002ce8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a07      	ldr	r2, [pc, #28]	@ (8002d14 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4a06      	ldr	r2, [pc, #24]	@ (8002d18 <vApplicationGetTimerTaskMemory+0x30>)
 8002cfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d06:	601a      	str	r2, [r3, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	200003e8 	.word	0x200003e8
 8002d18:	20000490 	.word	0x20000490

08002d1c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	e7fd      	b.n	8002d3e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002d42:	2320      	movs	r3, #32
 8002d44:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d00b      	beq.n	8002d64 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	60fb      	str	r3, [r7, #12]
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f9c5 	bl	8003108 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2201      	movs	r2, #1
 8002d82:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002d84:	697b      	ldr	r3, [r7, #20]
	}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002d94:	2020      	movs	r0, #32
 8002d96:	f002 fd19 	bl	80057cc <pvPortMalloc>
 8002d9a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f9ab 	bl	8003108 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002db8:	687b      	ldr	r3, [r7, #4]
	}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b090      	sub	sp, #64	@ 0x40
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <xEventGroupWaitBits+0x38>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	623b      	str	r3, [r7, #32]
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e02:	d30b      	bcc.n	8002e1c <xEventGroupWaitBits+0x58>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61fb      	str	r3, [r7, #28]
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <xEventGroupWaitBits+0x76>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	61bb      	str	r3, [r7, #24]
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	e7fd      	b.n	8002e36 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e3a:	f001 fdff 	bl	8004a3c <xTaskGetSchedulerState>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <xEventGroupWaitBits+0x86>
 8002e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <xEventGroupWaitBits+0x8a>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <xEventGroupWaitBits+0x8c>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	617b      	str	r3, [r7, #20]
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8002e6c:	f001 f986 	bl	800417c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e7c:	f000 f90d 	bl	800309a <prvTestWaitCondition>
 8002e80:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8002e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d028      	beq.n	8002ee8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e020      	b.n	8002ee8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eb4:	e018      	b.n	8002ee8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed4:	1d18      	adds	r0, r3, #4
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eda:	4313      	orrs	r3, r2
 8002edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f001 fb1e 	bl	8004520 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002ee8:	f001 f956 	bl	8004198 <xTaskResumeAll>
 8002eec:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d031      	beq.n	8002f58 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8002efa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <xEventGroupWaitBits+0x1a0>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002f0a:	f001 fe25 	bl	8004b58 <uxTaskResetEventItemValue>
 8002f0e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11a      	bne.n	8002f50 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8002f1a:	f002 fb35 	bl	8005588 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f2a:	f000 f8b6 	bl	800309a <prvTestWaitCondition>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f46:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8002f4c:	f002 fb4e 	bl	80055ec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3740      	adds	r7, #64	@ 0x40
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08e      	sub	sp, #56	@ 0x38
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002f72:	2300      	movs	r3, #0
 8002f74:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <xEventGroupSetBits+0x34>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	613b      	str	r3, [r7, #16]
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa2:	d30b      	bcc.n	8002fbc <xEventGroupSetBits+0x54>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002fc8:	f001 f8d8 	bl	800417c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002fde:	e03c      	b.n	800305a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002ff6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ffe:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d108      	bne.n	800301c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800300a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8003016:	2301      	movs	r3, #1
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800301a:	e008      	b.n	800302e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	429a      	cmp	r2, r3
 8003028:	d101      	bne.n	800302e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800302a:	2301      	movs	r3, #1
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800303e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800304e:	4619      	mov	r1, r3
 8003050:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003052:	f001 fb33 	bl	80046bc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800305a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	429a      	cmp	r2, r3
 8003060:	d1be      	bne.n	8002fe0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003070:	f001 f892 	bl	8004198 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3738      	adds	r7, #56	@ 0x38
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff6b 	bl	8002f68 <xEventGroupSetBits>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800309a:	b480      	push	{r7}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e007      	b.n	80030d0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d101      	bne.n	80030d0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80030cc:	2301      	movs	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80030d0:	697b      	ldr	r3, [r7, #20]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	4804      	ldr	r0, [pc, #16]	@ (8003104 <xEventGroupSetBitsFromISR+0x24>)
 80030f4:	f002 f8f6 	bl	80052e4 <xTimerPendFunctionCallFromISR>
 80030f8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80030fa:	697b      	ldr	r3, [r7, #20]
	}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	08003081 	.word	0x08003081

08003108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f103 0208 	add.w	r2, r3, #8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f103 0208 	add.w	r2, r3, #8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f103 0208 	add.w	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d103      	bne.n	80031ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e00c      	b.n	80031e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3308      	adds	r3, #8
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	e002      	b.n	80031d8 <vListInsert+0x2e>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d2f6      	bcs.n	80031d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	601a      	str	r2, [r3, #0]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6892      	ldr	r2, [r2, #8]
 8003232:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6852      	ldr	r2, [r2, #4]
 800323c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d103      	bne.n	8003250 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1e5a      	subs	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <xQueueGenericReset+0x2c>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	60bb      	str	r3, [r7, #8]
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800329c:	f002 f974 	bl	8005588 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	441a      	add	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032cc:	3b01      	subs	r3, #1
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	@ 0xff
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	22ff      	movs	r2, #255	@ 0xff
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00f      	beq.n	800331a <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3310      	adds	r3, #16
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f978 	bl	80045f4 <xTaskRemoveFromEventList>
 8003304:	e009      	b.n	800331a <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3310      	adds	r3, #16
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fefc 	bl	8003108 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3324      	adds	r3, #36	@ 0x24
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fef7 	bl	8003108 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800331a:	f002 f967 	bl	80055ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800331e:	2301      	movs	r3, #1
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	@ 0x38
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <xQueueGenericCreateStatic+0x56>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <xQueueGenericCreateStatic+0x5a>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueGenericCreateStatic+0x5c>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	623b      	str	r3, [r7, #32]
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <xQueueGenericCreateStatic+0x84>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <xQueueGenericCreateStatic+0x88>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <xQueueGenericCreateStatic+0x8a>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	61fb      	str	r3, [r7, #28]
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	e7fd      	b.n	80033ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033ce:	2350      	movs	r3, #80	@ 0x50
 80033d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b50      	cmp	r3, #80	@ 0x50
 80033d6:	d00b      	beq.n	80033f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61bb      	str	r3, [r7, #24]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80033f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003404:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f805 	bl	8003422 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800341a:	4618      	mov	r0, r3
 800341c:	3730      	adds	r7, #48	@ 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e002      	b.n	8003444 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003450:	2101      	movs	r1, #1
 8003452:	69b8      	ldr	r0, [r7, #24]
 8003454:	f7ff ff0c 	bl	8003270 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08e      	sub	sp, #56	@ 0x38
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <xQueueGenericSend+0x34>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <xQueueGenericSend+0x42>
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <xQueueGenericSend+0x46>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <xQueueGenericSend+0x48>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10b      	bne.n	80034cc <xQueueGenericSend+0x64>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d103      	bne.n	80034da <xQueueGenericSend+0x72>
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <xQueueGenericSend+0x76>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <xQueueGenericSend+0x78>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <xQueueGenericSend+0x94>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	623b      	str	r3, [r7, #32]
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034fc:	f001 fa9e 	bl	8004a3c <xTaskGetSchedulerState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <xQueueGenericSend+0xa4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <xQueueGenericSend+0xa8>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <xQueueGenericSend+0xaa>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <xQueueGenericSend+0xc6>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	61fb      	str	r3, [r7, #28]
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	e7fd      	b.n	800352a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800352e:	f002 f82b 	bl	8005588 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <xQueueGenericSend+0xdc>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d112      	bne.n	800356a <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800354a:	f000 f9ed 	bl	8003928 <prvCopyDataToQueue>
 800354e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	3324      	adds	r3, #36	@ 0x24
 800355c:	4618      	mov	r0, r3
 800355e:	f001 f849 	bl	80045f4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003562:	f002 f843 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 8003566:	2301      	movs	r3, #1
 8003568:	e062      	b.n	8003630 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003570:	f002 f83c 	bl	80055ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003574:	2300      	movs	r3, #0
 8003576:	e05b      	b.n	8003630 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f8fe 	bl	8004784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800358c:	f002 f82e 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003590:	f000 fdf4 	bl	800417c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003594:	f001 fff8 	bl	8005588 <vPortEnterCritical>
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d103      	bne.n	80035ae <xQueueGenericSend+0x146>
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d103      	bne.n	80035c4 <xQueueGenericSend+0x15c>
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035c4:	f002 f812 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035c8:	1d3a      	adds	r2, r7, #4
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f8ed 	bl	80047b0 <xTaskCheckForTimeOut>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d123      	bne.n	8003624 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035de:	f000 fa9b 	bl	8003b18 <prvIsQueueFull>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ea:	3310      	adds	r3, #16
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 ff6f 	bl	80044d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035f8:	f000 fa26 	bl	8003a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035fc:	f000 fdcc 	bl	8004198 <xTaskResumeAll>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d193      	bne.n	800352e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003606:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <xQueueGenericSend+0x1d0>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	e78a      	b.n	800352e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800361a:	f000 fa15 	bl	8003a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800361e:	f000 fdbb 	bl	8004198 <xTaskResumeAll>
 8003622:	e784      	b.n	800352e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003626:	f000 fa0f 	bl	8003a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362a:	f000 fdb5 	bl	8004198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800362e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003630:	4618      	mov	r0, r3
 8003632:	3738      	adds	r7, #56	@ 0x38
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b090      	sub	sp, #64	@ 0x40
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <xQueueGenericSendFromISR+0x3e>
 8003672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <xQueueGenericSendFromISR+0x42>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <xQueueGenericSendFromISR+0x44>
 800367e:	2300      	movs	r3, #0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d103      	bne.n	80036aa <xQueueGenericSendFromISR+0x6e>
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <xQueueGenericSendFromISR+0x72>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueGenericSendFromISR+0x74>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036cc:	f002 f83c 	bl	8005748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036d0:	f3ef 8211 	mrs	r2, BASEPRI
 80036d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	61fa      	str	r2, [r7, #28]
 80036e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <xQueueGenericSendFromISR+0xc2>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d12f      	bne.n	800375e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003704:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003714:	f000 f908 	bl	8003928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003718:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d112      	bne.n	8003748 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d016      	beq.n	8003758 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	3324      	adds	r3, #36	@ 0x24
 800372e:	4618      	mov	r0, r3
 8003730:	f000 ff60 	bl	80045f4 <xTaskRemoveFromEventList>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e007      	b.n	8003758 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003748:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800374c:	3301      	adds	r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	b25a      	sxtb	r2, r3
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003758:	2301      	movs	r3, #1
 800375a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800375c:	e001      	b.n	8003762 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800375e:	2300      	movs	r3, #0
 8003760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003764:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800376c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800376e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003770:	4618      	mov	r0, r3
 8003772:	3740      	adds	r7, #64	@ 0x40
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	@ 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10b      	bne.n	80037aa <xQueueReceive+0x32>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	623b      	str	r3, [r7, #32]
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <xQueueReceive+0x40>
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <xQueueReceive+0x44>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <xQueueReceive+0x46>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <xQueueReceive+0x62>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	61fb      	str	r3, [r7, #28]
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	e7fd      	b.n	80037d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037da:	f001 f92f 	bl	8004a3c <xTaskGetSchedulerState>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <xQueueReceive+0x72>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <xQueueReceive+0x76>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <xQueueReceive+0x78>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <xQueueReceive+0x94>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	61bb      	str	r3, [r7, #24]
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800380c:	f001 febc 	bl	8005588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d014      	beq.n	8003846 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003820:	f000 f8ec 	bl	80039fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	1e5a      	subs	r2, r3, #1
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	3310      	adds	r3, #16
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fedb 	bl	80045f4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800383e:	f001 fed5 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 8003842:	2301      	movs	r3, #1
 8003844:	e069      	b.n	800391a <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800384c:	f001 fece 	bl	80055ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003850:	2300      	movs	r3, #0
 8003852:	e062      	b.n	800391a <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800385a:	f107 0310 	add.w	r3, r7, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f000 ff90 	bl	8004784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003864:	2301      	movs	r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003868:	f001 fec0 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800386c:	f000 fc86 	bl	800417c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003870:	f001 fe8a 	bl	8005588 <vPortEnterCritical>
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800387a:	b25b      	sxtb	r3, r3
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d103      	bne.n	800388a <xQueueReceive+0x112>
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003890:	b25b      	sxtb	r3, r3
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d103      	bne.n	80038a0 <xQueueReceive+0x128>
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038a0:	f001 fea4 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038a4:	1d3a      	adds	r2, r7, #4
 80038a6:	f107 0310 	add.w	r3, r7, #16
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 ff7f 	bl	80047b0 <xTaskCheckForTimeOut>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d123      	bne.n	8003900 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ba:	f000 f917 	bl	8003aec <prvIsQueueEmpty>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d017      	beq.n	80038f4 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	3324      	adds	r3, #36	@ 0x24
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fe01 	bl	80044d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038d4:	f000 f8b8 	bl	8003a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038d8:	f000 fc5e 	bl	8004198 <xTaskResumeAll>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d194      	bne.n	800380c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80038e2:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <xQueueReceive+0x1ac>)
 80038e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	e78b      	b.n	800380c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038f6:	f000 f8a7 	bl	8003a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038fa:	f000 fc4d 	bl	8004198 <xTaskResumeAll>
 80038fe:	e785      	b.n	800380c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003902:	f000 f8a1 	bl	8003a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003906:	f000 fc47 	bl	8004198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800390a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800390c:	f000 f8ee 	bl	8003aec <prvIsQueueEmpty>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	f43f af7a 	beq.w	800380c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800391a:	4618      	mov	r0, r3
 800391c:	3730      	adds	r7, #48	@ 0x30
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d14d      	bne.n	80039ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f890 	bl	8004a78 <xTaskPriorityDisinherit>
 8003958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	e043      	b.n	80039ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d119      	bne.n	800399c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6858      	ldr	r0, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	461a      	mov	r2, r3
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	f002 fb09 	bl	8005f8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	441a      	add	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d32b      	bcc.n	80039ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e026      	b.n	80039ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68d8      	ldr	r0, [r3, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	461a      	mov	r2, r3
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	f002 faef 	bl	8005f8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	425b      	negs	r3, r3
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d207      	bcs.n	80039d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	425b      	negs	r3, r3
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d105      	bne.n	80039ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039f2:	697b      	ldr	r3, [r7, #20]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d018      	beq.n	8003a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	441a      	add	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d303      	bcc.n	8003a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68d9      	ldr	r1, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6838      	ldr	r0, [r7, #0]
 8003a3c:	f002 faa5 	bl	8005f8a <memcpy>
	}
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a50:	f001 fd9a 	bl	8005588 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a5c:	e011      	b.n	8003a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3324      	adds	r3, #36	@ 0x24
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fdc2 	bl	80045f4 <xTaskRemoveFromEventList>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a76:	f000 feff 	bl	8004878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	dce9      	bgt.n	8003a5e <prvUnlockQueue+0x16>
 8003a8a:	e000      	b.n	8003a8e <prvUnlockQueue+0x46>
					break;
 8003a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	22ff      	movs	r2, #255	@ 0xff
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a96:	f001 fda9 	bl	80055ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a9a:	f001 fd75 	bl	8005588 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aa6:	e011      	b.n	8003acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fd9d 	bl	80045f4 <xTaskRemoveFromEventList>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ac0:	f000 feda 	bl	8004878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	dce9      	bgt.n	8003aa8 <prvUnlockQueue+0x60>
 8003ad4:	e000      	b.n	8003ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	22ff      	movs	r2, #255	@ 0xff
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ae0:	f001 fd84 	bl	80055ec <vPortExitCritical>
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003af4:	f001 fd48 	bl	8005588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e001      	b.n	8003b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b0a:	f001 fd6f 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b20:	f001 fd32 	bl	8005588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d102      	bne.n	8003b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e001      	b.n	8003b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b3a:	f001 fd57 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e014      	b.n	8003b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b58:	4a0f      	ldr	r2, [pc, #60]	@ (8003b98 <vQueueAddToRegistry+0x50>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b64:	490c      	ldr	r1, [pc, #48]	@ (8003b98 <vQueueAddToRegistry+0x50>)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <vQueueAddToRegistry+0x50>)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b7a:	e006      	b.n	8003b8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b07      	cmp	r3, #7
 8003b86:	d9e7      	bls.n	8003b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000890 	.word	0x20000890

08003b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bac:	f001 fcec 	bl	8005588 <vPortEnterCritical>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d103      	bne.n	8003bc6 <vQueueWaitForMessageRestricted+0x2a>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <vQueueWaitForMessageRestricted+0x40>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bdc:	f001 fd06 	bl	80055ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3324      	adds	r3, #36	@ 0x24
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fcd3 	bl	800459c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7ff ff26 	bl	8003a48 <prvUnlockQueue>
	}
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	@ 0x38
 8003c08:	af04      	add	r7, sp, #16
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	623b      	str	r3, [r7, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	61fb      	str	r3, [r7, #28]
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c4e:	23a8      	movs	r3, #168	@ 0xa8
 8003c50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2ba8      	cmp	r3, #168	@ 0xa8
 8003c56:	d00b      	beq.n	8003c70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	61bb      	str	r3, [r7, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01e      	beq.n	8003cb6 <xTaskCreateStatic+0xb2>
 8003c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01b      	beq.n	8003cb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c90:	2300      	movs	r3, #0
 8003c92:	9303      	str	r3, [sp, #12]
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	9302      	str	r3, [sp, #8]
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f851 	bl	8003d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003cb0:	f000 f8f6 	bl	8003ea0 <prvAddNewTaskToReadyList>
 8003cb4:	e001      	b.n	8003cba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cba:	697b      	ldr	r3, [r7, #20]
	}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3728      	adds	r7, #40	@ 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	@ 0x30
 8003cc8:	af04      	add	r7, sp, #16
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 fd77 	bl	80057cc <pvPortMalloc>
 8003cde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ce6:	20a8      	movs	r0, #168	@ 0xa8
 8003ce8:	f001 fd70 	bl	80057cc <pvPortMalloc>
 8003cec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cfa:	e005      	b.n	8003d08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f001 fe33 	bl	8005968 <vPortFree>
 8003d02:	e001      	b.n	8003d08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d017      	beq.n	8003d3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9303      	str	r3, [sp, #12]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f80f 	bl	8003d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d32:	69f8      	ldr	r0, [r7, #28]
 8003d34:	f000 f8b4 	bl	8003ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e002      	b.n	8003d44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d44:	69bb      	ldr	r3, [r7, #24]
	}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	21a5      	movs	r1, #165	@ 0xa5
 8003d6a:	f002 f834 	bl	8005dd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f023 0307 	bic.w	r3, r3, #7
 8003d86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	617b      	str	r3, [r7, #20]
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01f      	beq.n	8003df0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e012      	b.n	8003ddc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	7819      	ldrb	r1, [r3, #0]
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3334      	adds	r3, #52	@ 0x34
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d9e9      	bls.n	8003db6 <prvInitialiseNewTask+0x66>
 8003de2:	e000      	b.n	8003de6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003de4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dee:	e003      	b.n	8003df8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	2b37      	cmp	r3, #55	@ 0x37
 8003dfc:	d901      	bls.n	8003e02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dfe:	2337      	movs	r3, #55	@ 0x37
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	2200      	movs	r2, #0
 8003e12:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	3304      	adds	r3, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f995 	bl	8003148 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	3318      	adds	r3, #24
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f990 	bl	8003148 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	3354      	adds	r3, #84	@ 0x54
 8003e52:	224c      	movs	r2, #76	@ 0x4c
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 ffbd 	bl	8005dd6 <memset>
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e94 <prvInitialiseNewTask+0x144>)
 8003e60:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	4a0c      	ldr	r2, [pc, #48]	@ (8003e98 <prvInitialiseNewTask+0x148>)
 8003e66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e9c <prvInitialiseNewTask+0x14c>)
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	69b8      	ldr	r0, [r7, #24]
 8003e74:	f001 fa56 	bl	8005324 <pxPortInitialiseStack>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20004b24 	.word	0x20004b24
 8003e98:	20004b8c 	.word	0x20004b8c
 8003e9c:	20004bf4 	.word	0x20004bf4

08003ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ea8:	f001 fb6e 	bl	8005588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eac:	4b26      	ldr	r3, [pc, #152]	@ (8003f48 <prvAddNewTaskToReadyList+0xa8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a25      	ldr	r2, [pc, #148]	@ (8003f48 <prvAddNewTaskToReadyList+0xa8>)
 8003eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eb6:	4b25      	ldr	r3, [pc, #148]	@ (8003f4c <prvAddNewTaskToReadyList+0xac>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ebe:	4a23      	ldr	r2, [pc, #140]	@ (8003f4c <prvAddNewTaskToReadyList+0xac>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ec4:	4b20      	ldr	r3, [pc, #128]	@ (8003f48 <prvAddNewTaskToReadyList+0xa8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d110      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ecc:	f000 fcf2 	bl	80048b4 <prvInitialiseTaskLists>
 8003ed0:	e00d      	b.n	8003eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <prvAddNewTaskToReadyList+0xb0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eda:	4b1c      	ldr	r3, [pc, #112]	@ (8003f4c <prvAddNewTaskToReadyList+0xac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d802      	bhi.n	8003eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ee8:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <prvAddNewTaskToReadyList+0xac>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eee:	4b19      	ldr	r3, [pc, #100]	@ (8003f54 <prvAddNewTaskToReadyList+0xb4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	4a17      	ldr	r2, [pc, #92]	@ (8003f54 <prvAddNewTaskToReadyList+0xb4>)
 8003ef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ef8:	4b16      	ldr	r3, [pc, #88]	@ (8003f54 <prvAddNewTaskToReadyList+0xb4>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f04:	4b14      	ldr	r3, [pc, #80]	@ (8003f58 <prvAddNewTaskToReadyList+0xb8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d903      	bls.n	8003f14 <prvAddNewTaskToReadyList+0x74>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	4a11      	ldr	r2, [pc, #68]	@ (8003f58 <prvAddNewTaskToReadyList+0xb8>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <prvAddNewTaskToReadyList+0xbc>)
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f7ff f919 	bl	8003162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f30:	f001 fb5c 	bl	80055ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <prvAddNewTaskToReadyList+0xb0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f3c:	4b03      	ldr	r3, [pc, #12]	@ (8003f4c <prvAddNewTaskToReadyList+0xac>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000da4 	.word	0x20000da4
 8003f4c:	200008d0 	.word	0x200008d0
 8003f50:	20000db0 	.word	0x20000db0
 8003f54:	20000dc0 	.word	0x20000dc0
 8003f58:	20000dac 	.word	0x20000dac
 8003f5c:	200008d4 	.word	0x200008d4

08003f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f72:	4b14      	ldr	r3, [pc, #80]	@ (8003fc4 <vTaskDelay+0x64>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <vTaskDelay+0x32>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	60bb      	str	r3, [r7, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f92:	f000 f8f3 	bl	800417c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f96:	2100      	movs	r1, #0
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fdf5 	bl	8004b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f9e:	f000 f8fb 	bl	8004198 <xTaskResumeAll>
 8003fa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d107      	bne.n	8003fba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003faa:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <vTaskDelay+0x68>)
 8003fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000dcc 	.word	0x20000dcc
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <eTaskGetState+0x2a>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60bb      	str	r3, [r7, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003ff6:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <eTaskGetState+0xbc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d102      	bne.n	8004006 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004000:	2300      	movs	r3, #0
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e03a      	b.n	800407c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8004006:	f001 fabf 	bl	8005588 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004010:	4b1e      	ldr	r3, [pc, #120]	@ (800408c <eTaskGetState+0xc0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004016:	4b1e      	ldr	r3, [pc, #120]	@ (8004090 <eTaskGetState+0xc4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800401c:	f001 fae6 	bl	80055ec <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	429a      	cmp	r2, r3
 8004026:	d003      	beq.n	8004030 <eTaskGetState+0x64>
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	429a      	cmp	r2, r3
 800402e:	d102      	bne.n	8004036 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004030:	2302      	movs	r3, #2
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e022      	b.n	800407c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4a16      	ldr	r2, [pc, #88]	@ (8004094 <eTaskGetState+0xc8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d112      	bne.n	8004064 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8004052:	2302      	movs	r3, #2
 8004054:	77fb      	strb	r3, [r7, #31]
 8004056:	e011      	b.n	800407c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004058:	2303      	movs	r3, #3
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e00e      	b.n	800407c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800405e:	2302      	movs	r3, #2
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e00b      	b.n	800407c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	4a0c      	ldr	r2, [pc, #48]	@ (8004098 <eTaskGetState+0xcc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d002      	beq.n	8004072 <eTaskGetState+0xa6>
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004072:	2304      	movs	r3, #4
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e001      	b.n	800407c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004078:	2301      	movs	r3, #1
 800407a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800407c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200008d0 	.word	0x200008d0
 800408c:	20000d5c 	.word	0x20000d5c
 8004090:	20000d60 	.word	0x20000d60
 8004094:	20000d90 	.word	0x20000d90
 8004098:	20000d78 	.word	0x20000d78

0800409c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	@ 0x28
 80040a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040aa:	463a      	mov	r2, r7
 80040ac:	1d39      	adds	r1, r7, #4
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fdfe 	bl	8002cb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	9202      	str	r2, [sp, #8]
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	2300      	movs	r3, #0
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2300      	movs	r3, #0
 80040c8:	460a      	mov	r2, r1
 80040ca:	4924      	ldr	r1, [pc, #144]	@ (800415c <vTaskStartScheduler+0xc0>)
 80040cc:	4824      	ldr	r0, [pc, #144]	@ (8004160 <vTaskStartScheduler+0xc4>)
 80040ce:	f7ff fd99 	bl	8003c04 <xTaskCreateStatic>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4a23      	ldr	r2, [pc, #140]	@ (8004164 <vTaskStartScheduler+0xc8>)
 80040d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040d8:	4b22      	ldr	r3, [pc, #136]	@ (8004164 <vTaskStartScheduler+0xc8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040e0:	2301      	movs	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e001      	b.n	80040ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d102      	bne.n	80040f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80040f0:	f000 fd9e 	bl	8004c30 <xTimerCreateTimerTask>
 80040f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d11b      	bne.n	8004134 <vTaskStartScheduler+0x98>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	613b      	str	r3, [r7, #16]
}
 800410e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004110:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <vTaskStartScheduler+0xcc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3354      	adds	r3, #84	@ 0x54
 8004116:	4a15      	ldr	r2, [pc, #84]	@ (800416c <vTaskStartScheduler+0xd0>)
 8004118:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800411a:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <vTaskStartScheduler+0xd4>)
 800411c:	f04f 32ff 	mov.w	r2, #4294967295
 8004120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004122:	4b14      	ldr	r3, [pc, #80]	@ (8004174 <vTaskStartScheduler+0xd8>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004128:	4b13      	ldr	r3, [pc, #76]	@ (8004178 <vTaskStartScheduler+0xdc>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800412e:	f001 f987 	bl	8005440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004132:	e00f      	b.n	8004154 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d10b      	bne.n	8004154 <vTaskStartScheduler+0xb8>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <vTaskStartScheduler+0xb4>
}
 8004154:	bf00      	nop
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	08006b40 	.word	0x08006b40
 8004160:	08004891 	.word	0x08004891
 8004164:	20000dc8 	.word	0x20000dc8
 8004168:	200008d0 	.word	0x200008d0
 800416c:	2000001c 	.word	0x2000001c
 8004170:	20000dc4 	.word	0x20000dc4
 8004174:	20000db0 	.word	0x20000db0
 8004178:	20000da8 	.word	0x20000da8

0800417c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004180:	4b04      	ldr	r3, [pc, #16]	@ (8004194 <vTaskSuspendAll+0x18>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	4a03      	ldr	r2, [pc, #12]	@ (8004194 <vTaskSuspendAll+0x18>)
 8004188:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20000dcc 	.word	0x20000dcc

08004198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004298 <xTaskResumeAll+0x100>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	603b      	str	r3, [r7, #0]
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	e7fd      	b.n	80041c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041c6:	f001 f9df 	bl	8005588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041ca:	4b33      	ldr	r3, [pc, #204]	@ (8004298 <xTaskResumeAll+0x100>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	4a31      	ldr	r2, [pc, #196]	@ (8004298 <xTaskResumeAll+0x100>)
 80041d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d4:	4b30      	ldr	r3, [pc, #192]	@ (8004298 <xTaskResumeAll+0x100>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d156      	bne.n	800428a <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041dc:	4b2f      	ldr	r3, [pc, #188]	@ (800429c <xTaskResumeAll+0x104>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d052      	beq.n	800428a <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041e4:	e02f      	b.n	8004246 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e6:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <xTaskResumeAll+0x108>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3318      	adds	r3, #24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f812 	bl	800321c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff f80d 	bl	800321c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004206:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <xTaskResumeAll+0x10c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d903      	bls.n	8004216 <xTaskResumeAll+0x7e>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	4a24      	ldr	r2, [pc, #144]	@ (80042a4 <xTaskResumeAll+0x10c>)
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4a21      	ldr	r2, [pc, #132]	@ (80042a8 <xTaskResumeAll+0x110>)
 8004224:	441a      	add	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe ff98 	bl	8003162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004236:	4b1d      	ldr	r3, [pc, #116]	@ (80042ac <xTaskResumeAll+0x114>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004240:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <xTaskResumeAll+0x118>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004246:	4b16      	ldr	r3, [pc, #88]	@ (80042a0 <xTaskResumeAll+0x108>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1cb      	bne.n	80041e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004254:	f000 fbd2 	bl	80049fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004258:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <xTaskResumeAll+0x11c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004264:	f000 f838 	bl	80042d8 <xTaskIncrementTick>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800426e:	4b10      	ldr	r3, [pc, #64]	@ (80042b0 <xTaskResumeAll+0x118>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3b01      	subs	r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f1      	bne.n	8004264 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004280:	4b0c      	ldr	r3, [pc, #48]	@ (80042b4 <xTaskResumeAll+0x11c>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004286:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <xTaskResumeAll+0x118>)
 8004288:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800428a:	f001 f9af 	bl	80055ec <vPortExitCritical>

	return xAlreadyYielded;
 800428e:	687b      	ldr	r3, [r7, #4]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000dcc 	.word	0x20000dcc
 800429c:	20000da4 	.word	0x20000da4
 80042a0:	20000d64 	.word	0x20000d64
 80042a4:	20000dac 	.word	0x20000dac
 80042a8:	200008d4 	.word	0x200008d4
 80042ac:	200008d0 	.word	0x200008d0
 80042b0:	20000db8 	.word	0x20000db8
 80042b4:	20000db4 	.word	0x20000db4

080042b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042be:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <xTaskGetTickCount+0x1c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042c4:	687b      	ldr	r3, [r7, #4]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000da8 	.word	0x20000da8

080042d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e2:	4b40      	ldr	r3, [pc, #256]	@ (80043e4 <xTaskIncrementTick+0x10c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d171      	bne.n	80043ce <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042ea:	4b3f      	ldr	r3, [pc, #252]	@ (80043e8 <xTaskIncrementTick+0x110>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042f2:	4a3d      	ldr	r2, [pc, #244]	@ (80043e8 <xTaskIncrementTick+0x110>)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d121      	bne.n	8004342 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042fe:	4b3b      	ldr	r3, [pc, #236]	@ (80043ec <xTaskIncrementTick+0x114>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <xTaskIncrementTick+0x48>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	603b      	str	r3, [r7, #0]
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <xTaskIncrementTick+0x44>
 8004320:	4b32      	ldr	r3, [pc, #200]	@ (80043ec <xTaskIncrementTick+0x114>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	4b32      	ldr	r3, [pc, #200]	@ (80043f0 <xTaskIncrementTick+0x118>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a30      	ldr	r2, [pc, #192]	@ (80043ec <xTaskIncrementTick+0x114>)
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <xTaskIncrementTick+0x118>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b2f      	ldr	r3, [pc, #188]	@ (80043f4 <xTaskIncrementTick+0x11c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a2e      	ldr	r2, [pc, #184]	@ (80043f4 <xTaskIncrementTick+0x11c>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	f000 fb5d 	bl	80049fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004342:	4b2d      	ldr	r3, [pc, #180]	@ (80043f8 <xTaskIncrementTick+0x120>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	429a      	cmp	r2, r3
 800434a:	d345      	bcc.n	80043d8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <xTaskIncrementTick+0x114>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004356:	4b28      	ldr	r3, [pc, #160]	@ (80043f8 <xTaskIncrementTick+0x120>)
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	601a      	str	r2, [r3, #0]
					break;
 800435e:	e03b      	b.n	80043d8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004360:	4b22      	ldr	r3, [pc, #136]	@ (80043ec <xTaskIncrementTick+0x114>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d203      	bcs.n	8004380 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004378:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <xTaskIncrementTick+0x120>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800437e:	e02b      	b.n	80043d8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe ff49 	bl	800321c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3318      	adds	r3, #24
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe ff40 	bl	800321c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a0:	4b16      	ldr	r3, [pc, #88]	@ (80043fc <xTaskIncrementTick+0x124>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d903      	bls.n	80043b0 <xTaskIncrementTick+0xd8>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	4a13      	ldr	r2, [pc, #76]	@ (80043fc <xTaskIncrementTick+0x124>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4a10      	ldr	r2, [pc, #64]	@ (8004400 <xTaskIncrementTick+0x128>)
 80043be:	441a      	add	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f7fe fecb 	bl	8003162 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043cc:	e7be      	b.n	800434c <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <xTaskIncrementTick+0x12c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004404 <xTaskIncrementTick+0x12c>)
 80043d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043d8:	697b      	ldr	r3, [r7, #20]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000dcc 	.word	0x20000dcc
 80043e8:	20000da8 	.word	0x20000da8
 80043ec:	20000d5c 	.word	0x20000d5c
 80043f0:	20000d60 	.word	0x20000d60
 80043f4:	20000dbc 	.word	0x20000dbc
 80043f8:	20000dc4 	.word	0x20000dc4
 80043fc:	20000dac 	.word	0x20000dac
 8004400:	200008d4 	.word	0x200008d4
 8004404:	20000db4 	.word	0x20000db4

08004408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800440e:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <vTaskSwitchContext+0xb4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004416:	4b2a      	ldr	r3, [pc, #168]	@ (80044c0 <vTaskSwitchContext+0xb8>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800441c:	e047      	b.n	80044ae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <vTaskSwitchContext+0xb8>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004424:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <vTaskSwitchContext+0xbc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e011      	b.n	8004450 <vTaskSwitchContext+0x48>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <vTaskSwitchContext+0x42>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	607b      	str	r3, [r7, #4]
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <vTaskSwitchContext+0x3e>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b01      	subs	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	491d      	ldr	r1, [pc, #116]	@ (80044c8 <vTaskSwitchContext+0xc0>)
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0e3      	beq.n	800442c <vTaskSwitchContext+0x24>
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4a16      	ldr	r2, [pc, #88]	@ (80044c8 <vTaskSwitchContext+0xc0>)
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	3308      	adds	r3, #8
 8004486:	429a      	cmp	r2, r3
 8004488:	d104      	bne.n	8004494 <vTaskSwitchContext+0x8c>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4a0c      	ldr	r2, [pc, #48]	@ (80044cc <vTaskSwitchContext+0xc4>)
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4a09      	ldr	r2, [pc, #36]	@ (80044c4 <vTaskSwitchContext+0xbc>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <vTaskSwitchContext+0xc4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3354      	adds	r3, #84	@ 0x54
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <vTaskSwitchContext+0xc8>)
 80044ac:	6013      	str	r3, [r2, #0]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000dcc 	.word	0x20000dcc
 80044c0:	20000db8 	.word	0x20000db8
 80044c4:	20000dac 	.word	0x20000dac
 80044c8:	200008d4 	.word	0x200008d4
 80044cc:	200008d0 	.word	0x200008d0
 80044d0:	2000001c 	.word	0x2000001c

080044d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044fc:	4b07      	ldr	r3, [pc, #28]	@ (800451c <vTaskPlaceOnEventList+0x48>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3318      	adds	r3, #24
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fe fe50 	bl	80031aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800450a:	2101      	movs	r1, #1
 800450c:	6838      	ldr	r0, [r7, #0]
 800450e:	f000 fb3b 	bl	8004b88 <prvAddCurrentTaskToDelayedList>
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200008d0 	.word	0x200008d0

08004520 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	617b      	str	r3, [r7, #20]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <vTaskPlaceOnUnorderedEventList+0x74>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	613b      	str	r3, [r7, #16]
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800456a:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <vTaskPlaceOnUnorderedEventList+0x78>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004574:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3318      	adds	r3, #24
 800457c:	4619      	mov	r1, r3
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7fe fdef 	bl	8003162 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004584:	2101      	movs	r1, #1
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fafe 	bl	8004b88 <prvAddCurrentTaskToDelayedList>
}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000dcc 	.word	0x20000dcc
 8004598:	200008d0 	.word	0x200008d0

0800459c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	617b      	str	r3, [r7, #20]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3318      	adds	r3, #24
 80045cc:	4619      	mov	r1, r3
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7fe fdc7 	bl	8003162 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	68b8      	ldr	r0, [r7, #8]
 80045e4:	f000 fad0 	bl	8004b88 <prvAddCurrentTaskToDelayedList>
	}
 80045e8:	bf00      	nop
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	200008d0 	.word	0x200008d0

080045f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60fb      	str	r3, [r7, #12]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3318      	adds	r3, #24
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fdf8 	bl	800321c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462c:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <xTaskRemoveFromEventList+0xb0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11d      	bne.n	8004670 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fdef 	bl	800321c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004642:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <xTaskRemoveFromEventList+0xb4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d903      	bls.n	8004652 <xTaskRemoveFromEventList+0x5e>
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	4a16      	ldr	r2, [pc, #88]	@ (80046a8 <xTaskRemoveFromEventList+0xb4>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <xTaskRemoveFromEventList+0xb8>)
 8004660:	441a      	add	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe fd7a 	bl	8003162 <vListInsertEnd>
 800466e:	e005      	b.n	800467c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3318      	adds	r3, #24
 8004674:	4619      	mov	r1, r3
 8004676:	480e      	ldr	r0, [pc, #56]	@ (80046b0 <xTaskRemoveFromEventList+0xbc>)
 8004678:	f7fe fd73 	bl	8003162 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <xTaskRemoveFromEventList+0xc0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d905      	bls.n	8004696 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <xTaskRemoveFromEventList+0xc4>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e001      	b.n	800469a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800469a:	697b      	ldr	r3, [r7, #20]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000dcc 	.word	0x20000dcc
 80046a8:	20000dac 	.word	0x20000dac
 80046ac:	200008d4 	.word	0x200008d4
 80046b0:	20000d64 	.word	0x20000d64
 80046b4:	200008d0 	.word	0x200008d0
 80046b8:	20000db8 	.word	0x20000db8

080046bc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80046c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	613b      	str	r3, [r7, #16]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fe fd81 	bl	800321c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3304      	adds	r3, #4
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fd7c 	bl	800321c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004728:	4b12      	ldr	r3, [pc, #72]	@ (8004774 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d903      	bls.n	8004738 <vTaskRemoveFromUnorderedEventList+0x7c>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	4a0f      	ldr	r2, [pc, #60]	@ (8004774 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a0c      	ldr	r2, [pc, #48]	@ (8004778 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004746:	441a      	add	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fd07 	bl	8003162 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004758:	4b08      	ldr	r3, [pc, #32]	@ (800477c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d902      	bls.n	8004768 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004762:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
	}
}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000dcc 	.word	0x20000dcc
 8004774:	20000dac 	.word	0x20000dac
 8004778:	200008d4 	.word	0x200008d4
 800477c:	200008d0 	.word	0x200008d0
 8004780:	20000db8 	.word	0x20000db8

08004784 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800478c:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <vTaskInternalSetTimeOutState+0x24>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004794:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <vTaskInternalSetTimeOutState+0x28>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	20000dbc 	.word	0x20000dbc
 80047ac:	20000da8 	.word	0x20000da8

080047b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	613b      	str	r3, [r7, #16]
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	e7fd      	b.n	80047d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	e7fd      	b.n	80047f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80047f6:	f000 fec7 	bl	8005588 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <xTaskCheckForTimeOut+0xc0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d102      	bne.n	800481a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e023      	b.n	8004862 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <xTaskCheckForTimeOut+0xc4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d007      	beq.n	8004836 <xTaskCheckForTimeOut+0x86>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	e015      	b.n	8004862 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	429a      	cmp	r2, r3
 800483e:	d20b      	bcs.n	8004858 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad2      	subs	r2, r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff99 	bl	8004784 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e004      	b.n	8004862 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800485e:	2301      	movs	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004862:	f000 fec3 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8004866:	69fb      	ldr	r3, [r7, #28]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000da8 	.word	0x20000da8
 8004874:	20000dbc 	.word	0x20000dbc

08004878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800487c:	4b03      	ldr	r3, [pc, #12]	@ (800488c <vTaskMissedYield+0x14>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000db8 	.word	0x20000db8

08004890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004898:	f000 f84c 	bl	8004934 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800489c:	4b04      	ldr	r3, [pc, #16]	@ (80048b0 <prvIdleTask+0x20>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ac:	bf00      	nop
 80048ae:	e7f3      	b.n	8004898 <prvIdleTask+0x8>
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048ba:	2300      	movs	r3, #0
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	e00c      	b.n	80048da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4a12      	ldr	r2, [pc, #72]	@ (8004914 <prvInitialiseTaskLists+0x60>)
 80048cc:	4413      	add	r3, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fc1a 	bl	8003108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3301      	adds	r3, #1
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b37      	cmp	r3, #55	@ 0x37
 80048de:	d9ef      	bls.n	80048c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e0:	480d      	ldr	r0, [pc, #52]	@ (8004918 <prvInitialiseTaskLists+0x64>)
 80048e2:	f7fe fc11 	bl	8003108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048e6:	480d      	ldr	r0, [pc, #52]	@ (800491c <prvInitialiseTaskLists+0x68>)
 80048e8:	f7fe fc0e 	bl	8003108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048ec:	480c      	ldr	r0, [pc, #48]	@ (8004920 <prvInitialiseTaskLists+0x6c>)
 80048ee:	f7fe fc0b 	bl	8003108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048f2:	480c      	ldr	r0, [pc, #48]	@ (8004924 <prvInitialiseTaskLists+0x70>)
 80048f4:	f7fe fc08 	bl	8003108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048f8:	480b      	ldr	r0, [pc, #44]	@ (8004928 <prvInitialiseTaskLists+0x74>)
 80048fa:	f7fe fc05 	bl	8003108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <prvInitialiseTaskLists+0x78>)
 8004900:	4a05      	ldr	r2, [pc, #20]	@ (8004918 <prvInitialiseTaskLists+0x64>)
 8004902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004904:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <prvInitialiseTaskLists+0x7c>)
 8004906:	4a05      	ldr	r2, [pc, #20]	@ (800491c <prvInitialiseTaskLists+0x68>)
 8004908:	601a      	str	r2, [r3, #0]
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200008d4 	.word	0x200008d4
 8004918:	20000d34 	.word	0x20000d34
 800491c:	20000d48 	.word	0x20000d48
 8004920:	20000d64 	.word	0x20000d64
 8004924:	20000d78 	.word	0x20000d78
 8004928:	20000d90 	.word	0x20000d90
 800492c:	20000d5c 	.word	0x20000d5c
 8004930:	20000d60 	.word	0x20000d60

08004934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493a:	e019      	b.n	8004970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800493c:	f000 fe24 	bl	8005588 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004940:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <prvCheckTasksWaitingTermination+0x50>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fc65 	bl	800321c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <prvCheckTasksWaitingTermination+0x54>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	4a0b      	ldr	r2, [pc, #44]	@ (8004988 <prvCheckTasksWaitingTermination+0x54>)
 800495a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800495c:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <prvCheckTasksWaitingTermination+0x58>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <prvCheckTasksWaitingTermination+0x58>)
 8004964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004966:	f000 fe41 	bl	80055ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f810 	bl	8004990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004970:	4b06      	ldr	r3, [pc, #24]	@ (800498c <prvCheckTasksWaitingTermination+0x58>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e1      	bne.n	800493c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000d78 	.word	0x20000d78
 8004988:	20000da4 	.word	0x20000da4
 800498c:	20000d8c 	.word	0x20000d8c

08004990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3354      	adds	r3, #84	@ 0x54
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fa33 	bl	8005e08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d108      	bne.n	80049be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 ffd9 	bl	8005968 <vPortFree>
				vPortFree( pxTCB );
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 ffd6 	bl	8005968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049bc:	e019      	b.n	80049f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d103      	bne.n	80049d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 ffcd 	bl	8005968 <vPortFree>
	}
 80049ce:	e010      	b.n	80049f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d00b      	beq.n	80049f2 <prvDeleteTCB+0x62>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60fb      	str	r3, [r7, #12]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <prvDeleteTCB+0x5e>
	}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a02:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <prvResetNextTaskUnblockTime+0x38>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <prvResetNextTaskUnblockTime+0x3c>)
 8004a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a14:	e008      	b.n	8004a28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a16:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <prvResetNextTaskUnblockTime+0x38>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <prvResetNextTaskUnblockTime+0x3c>)
 8004a26:	6013      	str	r3, [r2, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	20000d5c 	.word	0x20000d5c
 8004a38:	20000dc4 	.word	0x20000dc4

08004a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a42:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <xTaskGetSchedulerState+0x34>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	e008      	b.n	8004a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a50:	4b08      	ldr	r3, [pc, #32]	@ (8004a74 <xTaskGetSchedulerState+0x38>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	607b      	str	r3, [r7, #4]
 8004a5c:	e001      	b.n	8004a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a62:	687b      	ldr	r3, [r7, #4]
	}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000db0 	.word	0x20000db0
 8004a74:	20000dcc 	.word	0x20000dcc

08004a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d058      	beq.n	8004b40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b4c <xTaskPriorityDisinherit+0xd4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d00b      	beq.n	8004ab0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10b      	bne.n	8004ad0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60bb      	str	r3, [r7, #8]
}
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
 8004ace:	e7fd      	b.n	8004acc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d02c      	beq.n	8004b40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d128      	bne.n	8004b40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fb92 	bl	800321c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b10:	4b0f      	ldr	r3, [pc, #60]	@ (8004b50 <xTaskPriorityDisinherit+0xd8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d903      	bls.n	8004b20 <xTaskPriorityDisinherit+0xa8>
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b50 <xTaskPriorityDisinherit+0xd8>)
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4a09      	ldr	r2, [pc, #36]	@ (8004b54 <xTaskPriorityDisinherit+0xdc>)
 8004b2e:	441a      	add	r2, r3
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f7fe fb13 	bl	8003162 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b40:	697b      	ldr	r3, [r7, #20]
	}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	200008d0 	.word	0x200008d0
 8004b50:	20000dac 	.word	0x20000dac
 8004b54:	200008d4 	.word	0x200008d4

08004b58 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004b5e:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <uxTaskResetEventItemValue+0x2c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b66:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <uxTaskResetEventItemValue+0x2c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <uxTaskResetEventItemValue+0x2c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004b74:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004b76:	687b      	ldr	r3, [r7, #4]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	200008d0 	.word	0x200008d0

08004b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b92:	4b21      	ldr	r3, [pc, #132]	@ (8004c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b98:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fb3c 	bl	800321c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d10a      	bne.n	8004bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4819      	ldr	r0, [pc, #100]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8004bbc:	f7fe fad1 	bl	8003162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bc0:	e026      	b.n	8004c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bca:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d209      	bcs.n	8004bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bda:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f7fe fadf 	bl	80031aa <vListInsert>
}
 8004bec:	e010      	b.n	8004c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bee:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe fad5 	bl	80031aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c00:	4b0a      	ldr	r3, [pc, #40]	@ (8004c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d202      	bcs.n	8004c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c0a:	4a08      	ldr	r2, [pc, #32]	@ (8004c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000da8 	.word	0x20000da8
 8004c1c:	200008d0 	.word	0x200008d0
 8004c20:	20000d90 	.word	0x20000d90
 8004c24:	20000d60 	.word	0x20000d60
 8004c28:	20000d5c 	.word	0x20000d5c
 8004c2c:	20000dc4 	.word	0x20000dc4

08004c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	@ 0x28
 8004c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c3a:	f000 fb13 	bl	8005264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <xTimerCreateTimerTask+0x84>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d021      	beq.n	8004c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c4e:	1d3a      	adds	r2, r7, #4
 8004c50:	f107 0108 	add.w	r1, r7, #8
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe f845 	bl	8002ce8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	9202      	str	r2, [sp, #8]
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	2302      	movs	r3, #2
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	460a      	mov	r2, r1
 8004c70:	4911      	ldr	r1, [pc, #68]	@ (8004cb8 <xTimerCreateTimerTask+0x88>)
 8004c72:	4812      	ldr	r0, [pc, #72]	@ (8004cbc <xTimerCreateTimerTask+0x8c>)
 8004c74:	f7fe ffc6 	bl	8003c04 <xTaskCreateStatic>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4a11      	ldr	r2, [pc, #68]	@ (8004cc0 <xTimerCreateTimerTask+0x90>)
 8004c7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c7e:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <xTimerCreateTimerTask+0x90>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c86:	2301      	movs	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10b      	bne.n	8004ca8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	e7fd      	b.n	8004ca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ca8:	697b      	ldr	r3, [r7, #20]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000e00 	.word	0x20000e00
 8004cb8:	08006b48 	.word	0x08006b48
 8004cbc:	08004dfd 	.word	0x08004dfd
 8004cc0:	20000e04 	.word	0x20000e04

08004cc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	@ 0x28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	623b      	str	r3, [r7, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cf4:	4b19      	ldr	r3, [pc, #100]	@ (8004d5c <xTimerGenericCommand+0x98>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02a      	beq.n	8004d52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b05      	cmp	r3, #5
 8004d0c:	dc18      	bgt.n	8004d40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d0e:	f7ff fe95 	bl	8004a3c <xTaskGetSchedulerState>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d109      	bne.n	8004d2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d18:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <xTimerGenericCommand+0x98>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	f107 0110 	add.w	r1, r7, #16
 8004d20:	2300      	movs	r3, #0
 8004d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d24:	f7fe fba0 	bl	8003468 <xQueueGenericSend>
 8004d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d2a:	e012      	b.n	8004d52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <xTimerGenericCommand+0x98>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	f107 0110 	add.w	r1, r7, #16
 8004d34:	2300      	movs	r3, #0
 8004d36:	2200      	movs	r2, #0
 8004d38:	f7fe fb96 	bl	8003468 <xQueueGenericSend>
 8004d3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d3e:	e008      	b.n	8004d52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d40:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <xTimerGenericCommand+0x98>)
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	f107 0110 	add.w	r1, r7, #16
 8004d48:	2300      	movs	r3, #0
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	f7fe fc76 	bl	800363c <xQueueGenericSendFromISR>
 8004d50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3728      	adds	r7, #40	@ 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000e00 	.word	0x20000e00

08004d60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6a:	4b23      	ldr	r3, [pc, #140]	@ (8004df8 <prvProcessExpiredTimer+0x98>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fa4f 	bl	800321c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d023      	beq.n	8004dd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	18d1      	adds	r1, r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	f000 f8d5 	bl	8004f48 <prvInsertTimerInActiveList>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2300      	movs	r3, #0
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	2100      	movs	r1, #0
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f7ff ff88 	bl	8004cc4 <xTimerGenericCommand>
 8004db4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d114      	bne.n	8004de6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60fb      	str	r3, [r7, #12]
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	e7fd      	b.n	8004dd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	4798      	blx	r3
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000df8 	.word	0x20000df8

08004dfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e04:	f107 0308 	add.w	r3, r7, #8
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f859 	bl	8004ec0 <prvGetNextExpireTime>
 8004e0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4619      	mov	r1, r3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f805 	bl	8004e24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e1a:	f000 f8d7 	bl	8004fcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e1e:	bf00      	nop
 8004e20:	e7f0      	b.n	8004e04 <prvTimerTask+0x8>
	...

08004e24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e2e:	f7ff f9a5 	bl	800417c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f866 	bl	8004f08 <prvSampleTimeNow>
 8004e3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d130      	bne.n	8004ea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <prvProcessTimerOrBlockTask+0x3c>
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d806      	bhi.n	8004e60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e52:	f7ff f9a1 	bl	8004198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff81 	bl	8004d60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e5e:	e024      	b.n	8004eaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e66:	4b13      	ldr	r3, [pc, #76]	@ (8004eb4 <prvProcessTimerOrBlockTask+0x90>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <prvProcessTimerOrBlockTask+0x50>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <prvProcessTimerOrBlockTask+0x52>
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e78:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <prvProcessTimerOrBlockTask+0x94>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	4619      	mov	r1, r3
 8004e86:	f7fe fe89 	bl	8003b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e8a:	f7ff f985 	bl	8004198 <xTaskResumeAll>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e94:	4b09      	ldr	r3, [pc, #36]	@ (8004ebc <prvProcessTimerOrBlockTask+0x98>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
}
 8004ea4:	e001      	b.n	8004eaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ea6:	f7ff f977 	bl	8004198 <xTaskResumeAll>
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000dfc 	.word	0x20000dfc
 8004eb8:	20000e00 	.word	0x20000e00
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <prvGetNextExpireTime+0x44>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <prvGetNextExpireTime+0x16>
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	e000      	b.n	8004ed8 <prvGetNextExpireTime+0x18>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d105      	bne.n	8004ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee4:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <prvGetNextExpireTime+0x44>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e001      	b.n	8004ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000df8 	.word	0x20000df8

08004f08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f10:	f7ff f9d2 	bl	80042b8 <xTaskGetTickCount>
 8004f14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <prvSampleTimeNow+0x3c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d205      	bcs.n	8004f2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f20:	f000 f93a 	bl	8005198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f32:	4a04      	ldr	r2, [pc, #16]	@ (8004f44 <prvSampleTimeNow+0x3c>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f38:	68fb      	ldr	r3, [r7, #12]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000e08 	.word	0x20000e08

08004f48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d812      	bhi.n	8004f94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	1ad2      	subs	r2, r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d302      	bcc.n	8004f82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	e01b      	b.n	8004fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f82:	4b10      	ldr	r3, [pc, #64]	@ (8004fc4 <prvInsertTimerInActiveList+0x7c>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7fe f90c 	bl	80031aa <vListInsert>
 8004f92:	e012      	b.n	8004fba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d206      	bcs.n	8004faa <prvInsertTimerInActiveList+0x62>
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d302      	bcc.n	8004faa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e007      	b.n	8004fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <prvInsertTimerInActiveList+0x80>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f7fe f8f8 	bl	80031aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fba:	697b      	ldr	r3, [r7, #20]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000dfc 	.word	0x20000dfc
 8004fc8:	20000df8 	.word	0x20000df8

08004fcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	@ 0x38
 8004fd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fd2:	e0ce      	b.n	8005172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da19      	bge.n	800500e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	3304      	adds	r3, #4
 8004fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61fb      	str	r3, [r7, #28]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005004:	6850      	ldr	r0, [r2, #4]
 8005006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	4611      	mov	r1, r2
 800500c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f2c0 80ae 	blt.w	8005172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	3304      	adds	r3, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe f8f8 	bl	800321c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800502c:	463b      	mov	r3, r7
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff ff6a 	bl	8004f08 <prvSampleTimeNow>
 8005034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b09      	cmp	r3, #9
 800503a:	f200 8097 	bhi.w	800516c <prvProcessReceivedCommands+0x1a0>
 800503e:	a201      	add	r2, pc, #4	@ (adr r2, 8005044 <prvProcessReceivedCommands+0x78>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	0800506d 	.word	0x0800506d
 8005048:	0800506d 	.word	0x0800506d
 800504c:	0800506d 	.word	0x0800506d
 8005050:	080050e3 	.word	0x080050e3
 8005054:	080050f7 	.word	0x080050f7
 8005058:	08005143 	.word	0x08005143
 800505c:	0800506d 	.word	0x0800506d
 8005060:	0800506d 	.word	0x0800506d
 8005064:	080050e3 	.word	0x080050e3
 8005068:	080050f7 	.word	0x080050f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	b2da      	uxtb	r2, r3
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	18d1      	adds	r1, r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800508c:	f7ff ff5c 	bl	8004f48 <prvInsertTimerInActiveList>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d06c      	beq.n	8005170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800509c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d061      	beq.n	8005170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	441a      	add	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050be:	f7ff fe01 	bl	8004cc4 <xTimerGenericCommand>
 80050c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d152      	bne.n	8005170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	61bb      	str	r3, [r7, #24]
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	e7fd      	b.n	80050de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80050f4:	e03d      	b.n	8005172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	b2da      	uxtb	r2, r3
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	617b      	str	r3, [r7, #20]
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	e7fd      	b.n	800512a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	18d1      	adds	r1, r2, r3
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800513c:	f7ff ff04 	bl	8004f48 <prvInsertTimerInActiveList>
					break;
 8005140:	e017      	b.n	8005172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005152:	f000 fc09 	bl	8005968 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005156:	e00c      	b.n	8005172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800516a:	e002      	b.n	8005172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800516c:	bf00      	nop
 800516e:	e000      	b.n	8005172 <prvProcessReceivedCommands+0x1a6>
					break;
 8005170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005172:	4b08      	ldr	r3, [pc, #32]	@ (8005194 <prvProcessReceivedCommands+0x1c8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1d39      	adds	r1, r7, #4
 8005178:	2200      	movs	r2, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fafc 	bl	8003778 <xQueueReceive>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f47f af26 	bne.w	8004fd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3730      	adds	r7, #48	@ 0x30
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000e00 	.word	0x20000e00

08005198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800519e:	e049      	b.n	8005234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051a0:	4b2e      	ldr	r3, [pc, #184]	@ (800525c <prvSwitchTimerLists+0xc4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051aa:	4b2c      	ldr	r3, [pc, #176]	@ (800525c <prvSwitchTimerLists+0xc4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe f82f 	bl	800321c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02f      	beq.n	8005234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d90e      	bls.n	8005204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051f2:	4b1a      	ldr	r3, [pc, #104]	@ (800525c <prvSwitchTimerLists+0xc4>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7fd ffd4 	bl	80031aa <vListInsert>
 8005202:	e017      	b.n	8005234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005204:	2300      	movs	r3, #0
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	2300      	movs	r3, #0
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	2100      	movs	r1, #0
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f7ff fd58 	bl	8004cc4 <xTimerGenericCommand>
 8005214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	603b      	str	r3, [r7, #0]
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	e7fd      	b.n	8005230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <prvSwitchTimerLists+0xc4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1b0      	bne.n	80051a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800523e:	4b07      	ldr	r3, [pc, #28]	@ (800525c <prvSwitchTimerLists+0xc4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <prvSwitchTimerLists+0xc8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a04      	ldr	r2, [pc, #16]	@ (800525c <prvSwitchTimerLists+0xc4>)
 800524a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800524c:	4a04      	ldr	r2, [pc, #16]	@ (8005260 <prvSwitchTimerLists+0xc8>)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	6013      	str	r3, [r2, #0]
}
 8005252:	bf00      	nop
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000df8 	.word	0x20000df8
 8005260:	20000dfc 	.word	0x20000dfc

08005264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800526a:	f000 f98d 	bl	8005588 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <prvCheckForValidListAndQueue+0x60>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d120      	bne.n	80052b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005276:	4814      	ldr	r0, [pc, #80]	@ (80052c8 <prvCheckForValidListAndQueue+0x64>)
 8005278:	f7fd ff46 	bl	8003108 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800527c:	4813      	ldr	r0, [pc, #76]	@ (80052cc <prvCheckForValidListAndQueue+0x68>)
 800527e:	f7fd ff43 	bl	8003108 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005282:	4b13      	ldr	r3, [pc, #76]	@ (80052d0 <prvCheckForValidListAndQueue+0x6c>)
 8005284:	4a10      	ldr	r2, [pc, #64]	@ (80052c8 <prvCheckForValidListAndQueue+0x64>)
 8005286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005288:	4b12      	ldr	r3, [pc, #72]	@ (80052d4 <prvCheckForValidListAndQueue+0x70>)
 800528a:	4a10      	ldr	r2, [pc, #64]	@ (80052cc <prvCheckForValidListAndQueue+0x68>)
 800528c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800528e:	2300      	movs	r3, #0
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <prvCheckForValidListAndQueue+0x74>)
 8005294:	4a11      	ldr	r2, [pc, #68]	@ (80052dc <prvCheckForValidListAndQueue+0x78>)
 8005296:	2110      	movs	r1, #16
 8005298:	200a      	movs	r0, #10
 800529a:	f7fe f845 	bl	8003328 <xQueueGenericCreateStatic>
 800529e:	4603      	mov	r3, r0
 80052a0:	4a08      	ldr	r2, [pc, #32]	@ (80052c4 <prvCheckForValidListAndQueue+0x60>)
 80052a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052a4:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <prvCheckForValidListAndQueue+0x60>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <prvCheckForValidListAndQueue+0x60>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	490b      	ldr	r1, [pc, #44]	@ (80052e0 <prvCheckForValidListAndQueue+0x7c>)
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fc48 	bl	8003b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052b8:	f000 f998 	bl	80055ec <vPortExitCritical>
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000e00 	.word	0x20000e00
 80052c8:	20000dd0 	.word	0x20000dd0
 80052cc:	20000de4 	.word	0x20000de4
 80052d0:	20000df8 	.word	0x20000df8
 80052d4:	20000dfc 	.word	0x20000dfc
 80052d8:	20000eac 	.word	0x20000eac
 80052dc:	20000e0c 	.word	0x20000e0c
 80052e0:	08006b50 	.word	0x08006b50

080052e4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	@ 0x28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80052f2:	f06f 0301 	mvn.w	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005304:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <xTimerPendFunctionCallFromISR+0x3c>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	f107 0114 	add.w	r1, r7, #20
 800530c:	2300      	movs	r3, #0
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	f7fe f994 	bl	800363c <xQueueGenericSendFromISR>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005318:	4618      	mov	r0, r3
 800531a:	3728      	adds	r7, #40	@ 0x28
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000e00 	.word	0x20000e00

08005324 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b04      	subs	r3, #4
 8005334:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800533c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b04      	subs	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f023 0201 	bic.w	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b04      	subs	r3, #4
 8005352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005354:	4a0c      	ldr	r2, [pc, #48]	@ (8005388 <pxPortInitialiseStack+0x64>)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3b14      	subs	r3, #20
 800535e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3b04      	subs	r3, #4
 800536a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f06f 0202 	mvn.w	r2, #2
 8005372:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3b20      	subs	r3, #32
 8005378:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	0800538d 	.word	0x0800538d

0800538c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005396:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <prvTaskExitError+0x58>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d00b      	beq.n	80053b8 <prvTaskExitError+0x2c>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60fb      	str	r3, [r7, #12]
}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	e7fd      	b.n	80053b4 <prvTaskExitError+0x28>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	60bb      	str	r3, [r7, #8]
}
 80053ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053cc:	bf00      	nop
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0fc      	beq.n	80053ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	2000000c 	.word	0x2000000c
	...

080053f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053f0:	4b07      	ldr	r3, [pc, #28]	@ (8005410 <pxCurrentTCBConst2>)
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	6808      	ldr	r0, [r1, #0]
 80053f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	f380 8809 	msr	PSP, r0
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8811 	msr	BASEPRI, r0
 800540a:	4770      	bx	lr
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst2>:
 8005410:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005418:	4808      	ldr	r0, [pc, #32]	@ (800543c <prvPortStartFirstTask+0x24>)
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	6800      	ldr	r0, [r0, #0]
 800541e:	f380 8808 	msr	MSP, r0
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f380 8814 	msr	CONTROL, r0
 800542a:	b662      	cpsie	i
 800542c:	b661      	cpsie	f
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	df00      	svc	0
 8005438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800543a:	bf00      	nop
 800543c:	e000ed08 	.word	0xe000ed08

08005440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005446:	4b47      	ldr	r3, [pc, #284]	@ (8005564 <xPortStartScheduler+0x124>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a47      	ldr	r2, [pc, #284]	@ (8005568 <xPortStartScheduler+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10b      	bne.n	8005468 <xPortStartScheduler+0x28>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005468:	4b3e      	ldr	r3, [pc, #248]	@ (8005564 <xPortStartScheduler+0x124>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a3f      	ldr	r2, [pc, #252]	@ (800556c <xPortStartScheduler+0x12c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10b      	bne.n	800548a <xPortStartScheduler+0x4a>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	613b      	str	r3, [r7, #16]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800548a:	4b39      	ldr	r3, [pc, #228]	@ (8005570 <xPortStartScheduler+0x130>)
 800548c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	22ff      	movs	r2, #255	@ 0xff
 800549a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4b31      	ldr	r3, [pc, #196]	@ (8005574 <xPortStartScheduler+0x134>)
 80054b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054b2:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <xPortStartScheduler+0x138>)
 80054b4:	2207      	movs	r2, #7
 80054b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054b8:	e009      	b.n	80054ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80054ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005578 <xPortStartScheduler+0x138>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3b01      	subs	r3, #1
 80054c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <xPortStartScheduler+0x138>)
 80054c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d6:	2b80      	cmp	r3, #128	@ 0x80
 80054d8:	d0ef      	beq.n	80054ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054da:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <xPortStartScheduler+0x138>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1c3 0307 	rsb	r3, r3, #7
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d00b      	beq.n	80054fe <xPortStartScheduler+0xbe>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60bb      	str	r3, [r7, #8]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <xPortStartScheduler+0x138>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <xPortStartScheduler+0x138>)
 8005506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005508:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <xPortStartScheduler+0x138>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005510:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <xPortStartScheduler+0x138>)
 8005512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800551c:	4b17      	ldr	r3, [pc, #92]	@ (800557c <xPortStartScheduler+0x13c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a16      	ldr	r2, [pc, #88]	@ (800557c <xPortStartScheduler+0x13c>)
 8005522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005528:	4b14      	ldr	r3, [pc, #80]	@ (800557c <xPortStartScheduler+0x13c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a13      	ldr	r2, [pc, #76]	@ (800557c <xPortStartScheduler+0x13c>)
 800552e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005534:	f000 f8da 	bl	80056ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005538:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <xPortStartScheduler+0x140>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800553e:	f000 f8f9 	bl	8005734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005542:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <xPortStartScheduler+0x144>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0f      	ldr	r2, [pc, #60]	@ (8005584 <xPortStartScheduler+0x144>)
 8005548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800554c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800554e:	f7ff ff63 	bl	8005418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005552:	f7fe ff59 	bl	8004408 <vTaskSwitchContext>
	prvTaskExitError();
 8005556:	f7ff ff19 	bl	800538c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	e000ed00 	.word	0xe000ed00
 8005568:	410fc271 	.word	0x410fc271
 800556c:	410fc270 	.word	0x410fc270
 8005570:	e000e400 	.word	0xe000e400
 8005574:	20000efc 	.word	0x20000efc
 8005578:	20000f00 	.word	0x20000f00
 800557c:	e000ed20 	.word	0xe000ed20
 8005580:	2000000c 	.word	0x2000000c
 8005584:	e000ef34 	.word	0xe000ef34

08005588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	4a0e      	ldr	r2, [pc, #56]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055ac:	4b0d      	ldr	r3, [pc, #52]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d110      	bne.n	80055d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <vPortEnterCritical+0x60>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	603b      	str	r3, [r7, #0]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <vPortEnterCritical+0x4a>
	}
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	2000000c 	.word	0x2000000c
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055f2:	4b12      	ldr	r3, [pc, #72]	@ (800563c <vPortExitCritical+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <vPortExitCritical+0x26>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005612:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <vPortExitCritical+0x50>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a08      	ldr	r2, [pc, #32]	@ (800563c <vPortExitCritical+0x50>)
 800561a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <vPortExitCritical+0x50>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <vPortExitCritical+0x44>
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	2000000c 	.word	0x2000000c

08005640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005640:	f3ef 8009 	mrs	r0, PSP
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <pxCurrentTCBConst>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f01e 0f10 	tst.w	lr, #16
 8005650:	bf08      	it	eq
 8005652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	6010      	str	r0, [r2, #0]
 800565c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005664:	f380 8811 	msr	BASEPRI, r0
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f7fe feca 	bl	8004408 <vTaskSwitchContext>
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f380 8811 	msr	BASEPRI, r0
 800567c:	bc09      	pop	{r0, r3}
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	6808      	ldr	r0, [r1, #0]
 8005682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005686:	f01e 0f10 	tst.w	lr, #16
 800568a:	bf08      	it	eq
 800568c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005690:	f380 8809 	msr	PSP, r0
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w

080056a0 <pxCurrentTCBConst>:
 80056a0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop

080056a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	607b      	str	r3, [r7, #4]
}
 80056c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056c2:	f7fe fe09 	bl	80042d8 <xTaskIncrementTick>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <xPortSysTickHandler+0x40>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f383 8811 	msr	BASEPRI, r3
}
 80056de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <vPortSetupTimerInterrupt+0x34>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <vPortSetupTimerInterrupt+0x38>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <vPortSetupTimerInterrupt+0x3c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a0a      	ldr	r2, [pc, #40]	@ (800572c <vPortSetupTimerInterrupt+0x40>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	4a09      	ldr	r2, [pc, #36]	@ (8005730 <vPortSetupTimerInterrupt+0x44>)
 800570a:	3b01      	subs	r3, #1
 800570c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800570e:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <vPortSetupTimerInterrupt+0x34>)
 8005710:	2207      	movs	r2, #7
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000e010 	.word	0xe000e010
 8005724:	e000e018 	.word	0xe000e018
 8005728:	20000000 	.word	0x20000000
 800572c:	10624dd3 	.word	0x10624dd3
 8005730:	e000e014 	.word	0xe000e014

08005734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005744 <vPortEnableVFP+0x10>
 8005738:	6801      	ldr	r1, [r0, #0]
 800573a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800573e:	6001      	str	r1, [r0, #0]
 8005740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005742:	bf00      	nop
 8005744:	e000ed88 	.word	0xe000ed88

08005748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800574e:	f3ef 8305 	mrs	r3, IPSR
 8005752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d915      	bls.n	8005786 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800575a:	4a18      	ldr	r2, [pc, #96]	@ (80057bc <vPortValidateInterruptPriority+0x74>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005764:	4b16      	ldr	r3, [pc, #88]	@ (80057c0 <vPortValidateInterruptPriority+0x78>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	7afa      	ldrb	r2, [r7, #11]
 800576a:	429a      	cmp	r2, r3
 800576c:	d20b      	bcs.n	8005786 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	607b      	str	r3, [r7, #4]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005786:	4b0f      	ldr	r3, [pc, #60]	@ (80057c4 <vPortValidateInterruptPriority+0x7c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800578e:	4b0e      	ldr	r3, [pc, #56]	@ (80057c8 <vPortValidateInterruptPriority+0x80>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90b      	bls.n	80057ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	603b      	str	r3, [r7, #0]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <vPortValidateInterruptPriority+0x62>
	}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	e000e3f0 	.word	0xe000e3f0
 80057c0:	20000efc 	.word	0x20000efc
 80057c4:	e000ed0c 	.word	0xe000ed0c
 80057c8:	20000f00 	.word	0x20000f00

080057cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	@ 0x28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057d8:	f7fe fcd0 	bl	800417c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005950 <pvPortMalloc+0x184>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057e4:	f000 f924 	bl	8005a30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005954 <pvPortMalloc+0x188>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f040 8095 	bne.w	8005920 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01e      	beq.n	800583a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057fc:	2208      	movs	r2, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f023 0307 	bic.w	r3, r3, #7
 8005814:	3308      	adds	r3, #8
 8005816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <pvPortMalloc+0x6e>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	617b      	str	r3, [r7, #20]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d06f      	beq.n	8005920 <pvPortMalloc+0x154>
 8005840:	4b45      	ldr	r3, [pc, #276]	@ (8005958 <pvPortMalloc+0x18c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d86a      	bhi.n	8005920 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800584a:	4b44      	ldr	r3, [pc, #272]	@ (800595c <pvPortMalloc+0x190>)
 800584c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800584e:	4b43      	ldr	r3, [pc, #268]	@ (800595c <pvPortMalloc+0x190>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005854:	e004      	b.n	8005860 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d903      	bls.n	8005872 <pvPortMalloc+0xa6>
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f1      	bne.n	8005856 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005872:	4b37      	ldr	r3, [pc, #220]	@ (8005950 <pvPortMalloc+0x184>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005878:	429a      	cmp	r2, r3
 800587a:	d051      	beq.n	8005920 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2208      	movs	r2, #8
 8005882:	4413      	add	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	1ad2      	subs	r2, r2, r3
 8005896:	2308      	movs	r3, #8
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	429a      	cmp	r2, r3
 800589c:	d920      	bls.n	80058e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800589e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <pvPortMalloc+0xfc>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058da:	69b8      	ldr	r0, [r7, #24]
 80058dc:	f000 f90a 	bl	8005af4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005958 <pvPortMalloc+0x18c>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005958 <pvPortMalloc+0x18c>)
 80058ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <pvPortMalloc+0x18c>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005960 <pvPortMalloc+0x194>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d203      	bcs.n	8005902 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058fa:	4b17      	ldr	r3, [pc, #92]	@ (8005958 <pvPortMalloc+0x18c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <pvPortMalloc+0x194>)
 8005900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <pvPortMalloc+0x188>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	431a      	orrs	r2, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005916:	4b13      	ldr	r3, [pc, #76]	@ (8005964 <pvPortMalloc+0x198>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	4a11      	ldr	r2, [pc, #68]	@ (8005964 <pvPortMalloc+0x198>)
 800591e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005920:	f7fe fc3a 	bl	8004198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <pvPortMalloc+0x17a>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60fb      	str	r3, [r7, #12]
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <pvPortMalloc+0x176>
	return pvReturn;
 8005946:	69fb      	ldr	r3, [r7, #28]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3728      	adds	r7, #40	@ 0x28
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20004b0c 	.word	0x20004b0c
 8005954:	20004b20 	.word	0x20004b20
 8005958:	20004b10 	.word	0x20004b10
 800595c:	20004b04 	.word	0x20004b04
 8005960:	20004b14 	.word	0x20004b14
 8005964:	20004b18 	.word	0x20004b18

08005968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04f      	beq.n	8005a1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800597a:	2308      	movs	r3, #8
 800597c:	425b      	negs	r3, r3
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4b25      	ldr	r3, [pc, #148]	@ (8005a24 <vPortFree+0xbc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <vPortFree+0x46>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <vPortFree+0x66>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4b14      	ldr	r3, [pc, #80]	@ (8005a24 <vPortFree+0xbc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01e      	beq.n	8005a1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11a      	bne.n	8005a1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <vPortFree+0xbc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	401a      	ands	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059f4:	f7fe fbc2 	bl	800417c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <vPortFree+0xc0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4413      	add	r3, r2
 8005a02:	4a09      	ldr	r2, [pc, #36]	@ (8005a28 <vPortFree+0xc0>)
 8005a04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a06:	6938      	ldr	r0, [r7, #16]
 8005a08:	f000 f874 	bl	8005af4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <vPortFree+0xc4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	4a06      	ldr	r2, [pc, #24]	@ (8005a2c <vPortFree+0xc4>)
 8005a14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a16:	f7fe fbbf 	bl	8004198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20004b20 	.word	0x20004b20
 8005a28:	20004b10 	.word	0x20004b10
 8005a2c:	20004b1c 	.word	0x20004b1c

08005a30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a3c:	4b27      	ldr	r3, [pc, #156]	@ (8005adc <prvHeapInit+0xac>)
 8005a3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3307      	adds	r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0307 	bic.w	r3, r3, #7
 8005a56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005adc <prvHeapInit+0xac>)
 8005a60:	4413      	add	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a68:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae0 <prvHeapInit+0xb0>)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae0 <prvHeapInit+0xb0>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	4413      	add	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ae4 <prvHeapInit+0xb4>)
 8005a90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a92:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <prvHeapInit+0xb4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <prvHeapInit+0xb4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	1ad2      	subs	r2, r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae4 <prvHeapInit+0xb4>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae8 <prvHeapInit+0xb8>)
 8005abe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4a09      	ldr	r2, [pc, #36]	@ (8005aec <prvHeapInit+0xbc>)
 8005ac6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ac8:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <prvHeapInit+0xc0>)
 8005aca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ace:	601a      	str	r2, [r3, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	20000f04 	.word	0x20000f04
 8005ae0:	20004b04 	.word	0x20004b04
 8005ae4:	20004b0c 	.word	0x20004b0c
 8005ae8:	20004b14 	.word	0x20004b14
 8005aec:	20004b10 	.word	0x20004b10
 8005af0:	20004b20 	.word	0x20004b20

08005af4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005afc:	4b28      	ldr	r3, [pc, #160]	@ (8005ba0 <prvInsertBlockIntoFreeList+0xac>)
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e002      	b.n	8005b08 <prvInsertBlockIntoFreeList+0x14>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d8f7      	bhi.n	8005b02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d108      	bne.n	8005b36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d118      	bne.n	8005b7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d00d      	beq.n	8005b72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	441a      	add	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e008      	b.n	8005b84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e003      	b.n	8005b84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d002      	beq.n	8005b92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20004b04 	.word	0x20004b04
 8005ba4:	20004b0c 	.word	0x20004b0c

08005ba8 <std>:
 8005ba8:	2300      	movs	r3, #0
 8005baa:	b510      	push	{r4, lr}
 8005bac:	4604      	mov	r4, r0
 8005bae:	e9c0 3300 	strd	r3, r3, [r0]
 8005bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bb6:	6083      	str	r3, [r0, #8]
 8005bb8:	8181      	strh	r1, [r0, #12]
 8005bba:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bbc:	81c2      	strh	r2, [r0, #14]
 8005bbe:	6183      	str	r3, [r0, #24]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	305c      	adds	r0, #92	@ 0x5c
 8005bc6:	f000 f906 	bl	8005dd6 <memset>
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <std+0x58>)
 8005bcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <std+0x5c>)
 8005bd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <std+0x60>)
 8005bd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <std+0x64>)
 8005bd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <std+0x68>)
 8005bdc:	6224      	str	r4, [r4, #32]
 8005bde:	429c      	cmp	r4, r3
 8005be0:	d006      	beq.n	8005bf0 <std+0x48>
 8005be2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005be6:	4294      	cmp	r4, r2
 8005be8:	d002      	beq.n	8005bf0 <std+0x48>
 8005bea:	33d0      	adds	r3, #208	@ 0xd0
 8005bec:	429c      	cmp	r4, r3
 8005bee:	d105      	bne.n	8005bfc <std+0x54>
 8005bf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf8:	f000 b9c4 	b.w	8005f84 <__retarget_lock_init_recursive>
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	bf00      	nop
 8005c00:	08005d51 	.word	0x08005d51
 8005c04:	08005d73 	.word	0x08005d73
 8005c08:	08005dab 	.word	0x08005dab
 8005c0c:	08005dcf 	.word	0x08005dcf
 8005c10:	20004b24 	.word	0x20004b24

08005c14 <stdio_exit_handler>:
 8005c14:	4a02      	ldr	r2, [pc, #8]	@ (8005c20 <stdio_exit_handler+0xc>)
 8005c16:	4903      	ldr	r1, [pc, #12]	@ (8005c24 <stdio_exit_handler+0x10>)
 8005c18:	4803      	ldr	r0, [pc, #12]	@ (8005c28 <stdio_exit_handler+0x14>)
 8005c1a:	f000 b869 	b.w	8005cf0 <_fwalk_sglue>
 8005c1e:	bf00      	nop
 8005c20:	20000010 	.word	0x20000010
 8005c24:	0800683d 	.word	0x0800683d
 8005c28:	20000020 	.word	0x20000020

08005c2c <cleanup_stdio>:
 8005c2c:	6841      	ldr	r1, [r0, #4]
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <cleanup_stdio+0x34>)
 8005c30:	4299      	cmp	r1, r3
 8005c32:	b510      	push	{r4, lr}
 8005c34:	4604      	mov	r4, r0
 8005c36:	d001      	beq.n	8005c3c <cleanup_stdio+0x10>
 8005c38:	f000 fe00 	bl	800683c <_fflush_r>
 8005c3c:	68a1      	ldr	r1, [r4, #8]
 8005c3e:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <cleanup_stdio+0x38>)
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <cleanup_stdio+0x1e>
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 fdf9 	bl	800683c <_fflush_r>
 8005c4a:	68e1      	ldr	r1, [r4, #12]
 8005c4c:	4b06      	ldr	r3, [pc, #24]	@ (8005c68 <cleanup_stdio+0x3c>)
 8005c4e:	4299      	cmp	r1, r3
 8005c50:	d004      	beq.n	8005c5c <cleanup_stdio+0x30>
 8005c52:	4620      	mov	r0, r4
 8005c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c58:	f000 bdf0 	b.w	800683c <_fflush_r>
 8005c5c:	bd10      	pop	{r4, pc}
 8005c5e:	bf00      	nop
 8005c60:	20004b24 	.word	0x20004b24
 8005c64:	20004b8c 	.word	0x20004b8c
 8005c68:	20004bf4 	.word	0x20004bf4

08005c6c <global_stdio_init.part.0>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <global_stdio_init.part.0+0x30>)
 8005c70:	4c0b      	ldr	r4, [pc, #44]	@ (8005ca0 <global_stdio_init.part.0+0x34>)
 8005c72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca4 <global_stdio_init.part.0+0x38>)
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	4620      	mov	r0, r4
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2104      	movs	r1, #4
 8005c7c:	f7ff ff94 	bl	8005ba8 <std>
 8005c80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c84:	2201      	movs	r2, #1
 8005c86:	2109      	movs	r1, #9
 8005c88:	f7ff ff8e 	bl	8005ba8 <std>
 8005c8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c90:	2202      	movs	r2, #2
 8005c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c96:	2112      	movs	r1, #18
 8005c98:	f7ff bf86 	b.w	8005ba8 <std>
 8005c9c:	20004c5c 	.word	0x20004c5c
 8005ca0:	20004b24 	.word	0x20004b24
 8005ca4:	08005c15 	.word	0x08005c15

08005ca8 <__sfp_lock_acquire>:
 8005ca8:	4801      	ldr	r0, [pc, #4]	@ (8005cb0 <__sfp_lock_acquire+0x8>)
 8005caa:	f000 b96c 	b.w	8005f86 <__retarget_lock_acquire_recursive>
 8005cae:	bf00      	nop
 8005cb0:	20004c65 	.word	0x20004c65

08005cb4 <__sfp_lock_release>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	@ (8005cbc <__sfp_lock_release+0x8>)
 8005cb6:	f000 b967 	b.w	8005f88 <__retarget_lock_release_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20004c65 	.word	0x20004c65

08005cc0 <__sinit>:
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	f7ff fff0 	bl	8005ca8 <__sfp_lock_acquire>
 8005cc8:	6a23      	ldr	r3, [r4, #32]
 8005cca:	b11b      	cbz	r3, 8005cd4 <__sinit+0x14>
 8005ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd0:	f7ff bff0 	b.w	8005cb4 <__sfp_lock_release>
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <__sinit+0x28>)
 8005cd6:	6223      	str	r3, [r4, #32]
 8005cd8:	4b04      	ldr	r3, [pc, #16]	@ (8005cec <__sinit+0x2c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f5      	bne.n	8005ccc <__sinit+0xc>
 8005ce0:	f7ff ffc4 	bl	8005c6c <global_stdio_init.part.0>
 8005ce4:	e7f2      	b.n	8005ccc <__sinit+0xc>
 8005ce6:	bf00      	nop
 8005ce8:	08005c2d 	.word	0x08005c2d
 8005cec:	20004c5c 	.word	0x20004c5c

08005cf0 <_fwalk_sglue>:
 8005cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	4688      	mov	r8, r1
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d00:	f1b9 0901 	subs.w	r9, r9, #1
 8005d04:	d505      	bpl.n	8005d12 <_fwalk_sglue+0x22>
 8005d06:	6824      	ldr	r4, [r4, #0]
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	d1f7      	bne.n	8005cfc <_fwalk_sglue+0xc>
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d12:	89ab      	ldrh	r3, [r5, #12]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d907      	bls.n	8005d28 <_fwalk_sglue+0x38>
 8005d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	d003      	beq.n	8005d28 <_fwalk_sglue+0x38>
 8005d20:	4629      	mov	r1, r5
 8005d22:	4638      	mov	r0, r7
 8005d24:	47c0      	blx	r8
 8005d26:	4306      	orrs	r6, r0
 8005d28:	3568      	adds	r5, #104	@ 0x68
 8005d2a:	e7e9      	b.n	8005d00 <_fwalk_sglue+0x10>

08005d2c <iprintf>:
 8005d2c:	b40f      	push	{r0, r1, r2, r3}
 8005d2e:	b507      	push	{r0, r1, r2, lr}
 8005d30:	4906      	ldr	r1, [pc, #24]	@ (8005d4c <iprintf+0x20>)
 8005d32:	ab04      	add	r3, sp, #16
 8005d34:	6808      	ldr	r0, [r1, #0]
 8005d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d3a:	6881      	ldr	r1, [r0, #8]
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	f000 fa55 	bl	80061ec <_vfiprintf_r>
 8005d42:	b003      	add	sp, #12
 8005d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d48:	b004      	add	sp, #16
 8005d4a:	4770      	bx	lr
 8005d4c:	2000001c 	.word	0x2000001c

08005d50 <__sread>:
 8005d50:	b510      	push	{r4, lr}
 8005d52:	460c      	mov	r4, r1
 8005d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d58:	f000 f8c6 	bl	8005ee8 <_read_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	bfab      	itete	ge
 8005d60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d62:	89a3      	ldrhlt	r3, [r4, #12]
 8005d64:	181b      	addge	r3, r3, r0
 8005d66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d6a:	bfac      	ite	ge
 8005d6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d6e:	81a3      	strhlt	r3, [r4, #12]
 8005d70:	bd10      	pop	{r4, pc}

08005d72 <__swrite>:
 8005d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d76:	461f      	mov	r7, r3
 8005d78:	898b      	ldrh	r3, [r1, #12]
 8005d7a:	05db      	lsls	r3, r3, #23
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	4616      	mov	r6, r2
 8005d82:	d505      	bpl.n	8005d90 <__swrite+0x1e>
 8005d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d88:	2302      	movs	r3, #2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f000 f89a 	bl	8005ec4 <_lseek_r>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	4632      	mov	r2, r6
 8005d9e:	463b      	mov	r3, r7
 8005da0:	4628      	mov	r0, r5
 8005da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da6:	f000 b8b1 	b.w	8005f0c <_write_r>

08005daa <__sseek>:
 8005daa:	b510      	push	{r4, lr}
 8005dac:	460c      	mov	r4, r1
 8005dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db2:	f000 f887 	bl	8005ec4 <_lseek_r>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	bf15      	itete	ne
 8005dbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dc6:	81a3      	strheq	r3, [r4, #12]
 8005dc8:	bf18      	it	ne
 8005dca:	81a3      	strhne	r3, [r4, #12]
 8005dcc:	bd10      	pop	{r4, pc}

08005dce <__sclose>:
 8005dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd2:	f000 b809 	b.w	8005de8 <_close_r>

08005dd6 <memset>:
 8005dd6:	4402      	add	r2, r0
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d100      	bne.n	8005de0 <memset+0xa>
 8005dde:	4770      	bx	lr
 8005de0:	f803 1b01 	strb.w	r1, [r3], #1
 8005de4:	e7f9      	b.n	8005dda <memset+0x4>
	...

08005de8 <_close_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d06      	ldr	r5, [pc, #24]	@ (8005e04 <_close_r+0x1c>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fa ff73 	bl	8000cde <_close>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_close_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_close_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	20004c60 	.word	0x20004c60

08005e08 <_reclaim_reent>:
 8005e08:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec0 <_reclaim_reent+0xb8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4283      	cmp	r3, r0
 8005e0e:	b570      	push	{r4, r5, r6, lr}
 8005e10:	4604      	mov	r4, r0
 8005e12:	d053      	beq.n	8005ebc <_reclaim_reent+0xb4>
 8005e14:	69c3      	ldr	r3, [r0, #28]
 8005e16:	b31b      	cbz	r3, 8005e60 <_reclaim_reent+0x58>
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	b163      	cbz	r3, 8005e36 <_reclaim_reent+0x2e>
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	69e3      	ldr	r3, [r4, #28]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	5959      	ldr	r1, [r3, r5]
 8005e24:	b9b1      	cbnz	r1, 8005e54 <_reclaim_reent+0x4c>
 8005e26:	3504      	adds	r5, #4
 8005e28:	2d80      	cmp	r5, #128	@ 0x80
 8005e2a:	d1f8      	bne.n	8005e1e <_reclaim_reent+0x16>
 8005e2c:	69e3      	ldr	r3, [r4, #28]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	68d9      	ldr	r1, [r3, #12]
 8005e32:	f000 f8b9 	bl	8005fa8 <_free_r>
 8005e36:	69e3      	ldr	r3, [r4, #28]
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	b111      	cbz	r1, 8005e42 <_reclaim_reent+0x3a>
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 f8b3 	bl	8005fa8 <_free_r>
 8005e42:	69e3      	ldr	r3, [r4, #28]
 8005e44:	689d      	ldr	r5, [r3, #8]
 8005e46:	b15d      	cbz	r5, 8005e60 <_reclaim_reent+0x58>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	682d      	ldr	r5, [r5, #0]
 8005e4e:	f000 f8ab 	bl	8005fa8 <_free_r>
 8005e52:	e7f8      	b.n	8005e46 <_reclaim_reent+0x3e>
 8005e54:	680e      	ldr	r6, [r1, #0]
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f8a6 	bl	8005fa8 <_free_r>
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	e7e1      	b.n	8005e24 <_reclaim_reent+0x1c>
 8005e60:	6961      	ldr	r1, [r4, #20]
 8005e62:	b111      	cbz	r1, 8005e6a <_reclaim_reent+0x62>
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 f89f 	bl	8005fa8 <_free_r>
 8005e6a:	69e1      	ldr	r1, [r4, #28]
 8005e6c:	b111      	cbz	r1, 8005e74 <_reclaim_reent+0x6c>
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 f89a 	bl	8005fa8 <_free_r>
 8005e74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e76:	b111      	cbz	r1, 8005e7e <_reclaim_reent+0x76>
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 f895 	bl	8005fa8 <_free_r>
 8005e7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e80:	b111      	cbz	r1, 8005e88 <_reclaim_reent+0x80>
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 f890 	bl	8005fa8 <_free_r>
 8005e88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e8a:	b111      	cbz	r1, 8005e92 <_reclaim_reent+0x8a>
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 f88b 	bl	8005fa8 <_free_r>
 8005e92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005e94:	b111      	cbz	r1, 8005e9c <_reclaim_reent+0x94>
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f886 	bl	8005fa8 <_free_r>
 8005e9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005e9e:	b111      	cbz	r1, 8005ea6 <_reclaim_reent+0x9e>
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 f881 	bl	8005fa8 <_free_r>
 8005ea6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ea8:	b111      	cbz	r1, 8005eb0 <_reclaim_reent+0xa8>
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 f87c 	bl	8005fa8 <_free_r>
 8005eb0:	6a23      	ldr	r3, [r4, #32]
 8005eb2:	b11b      	cbz	r3, 8005ebc <_reclaim_reent+0xb4>
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005eba:	4718      	bx	r3
 8005ebc:	bd70      	pop	{r4, r5, r6, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000001c 	.word	0x2000001c

08005ec4 <_lseek_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d07      	ldr	r5, [pc, #28]	@ (8005ee4 <_lseek_r+0x20>)
 8005ec8:	4604      	mov	r4, r0
 8005eca:	4608      	mov	r0, r1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	2200      	movs	r2, #0
 8005ed0:	602a      	str	r2, [r5, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7fa ff2a 	bl	8000d2c <_lseek>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_lseek_r+0x1e>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_lseek_r+0x1e>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	20004c60 	.word	0x20004c60

08005ee8 <_read_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4d07      	ldr	r5, [pc, #28]	@ (8005f08 <_read_r+0x20>)
 8005eec:	4604      	mov	r4, r0
 8005eee:	4608      	mov	r0, r1
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f7fa feb8 	bl	8000c6c <_read>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d102      	bne.n	8005f06 <_read_r+0x1e>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	b103      	cbz	r3, 8005f06 <_read_r+0x1e>
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	bd38      	pop	{r3, r4, r5, pc}
 8005f08:	20004c60 	.word	0x20004c60

08005f0c <_write_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d07      	ldr	r5, [pc, #28]	@ (8005f2c <_write_r+0x20>)
 8005f10:	4604      	mov	r4, r0
 8005f12:	4608      	mov	r0, r1
 8005f14:	4611      	mov	r1, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7fa fec3 	bl	8000ca6 <_write>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_write_r+0x1e>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_write_r+0x1e>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	20004c60 	.word	0x20004c60

08005f30 <__errno>:
 8005f30:	4b01      	ldr	r3, [pc, #4]	@ (8005f38 <__errno+0x8>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	2000001c 	.word	0x2000001c

08005f3c <__libc_init_array>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f74 <__libc_init_array+0x38>)
 8005f40:	4c0d      	ldr	r4, [pc, #52]	@ (8005f78 <__libc_init_array+0x3c>)
 8005f42:	1b64      	subs	r4, r4, r5
 8005f44:	10a4      	asrs	r4, r4, #2
 8005f46:	2600      	movs	r6, #0
 8005f48:	42a6      	cmp	r6, r4
 8005f4a:	d109      	bne.n	8005f60 <__libc_init_array+0x24>
 8005f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f7c <__libc_init_array+0x40>)
 8005f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f80 <__libc_init_array+0x44>)
 8005f50:	f000 fdc4 	bl	8006adc <_init>
 8005f54:	1b64      	subs	r4, r4, r5
 8005f56:	10a4      	asrs	r4, r4, #2
 8005f58:	2600      	movs	r6, #0
 8005f5a:	42a6      	cmp	r6, r4
 8005f5c:	d105      	bne.n	8005f6a <__libc_init_array+0x2e>
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
 8005f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f64:	4798      	blx	r3
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7ee      	b.n	8005f48 <__libc_init_array+0xc>
 8005f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6e:	4798      	blx	r3
 8005f70:	3601      	adds	r6, #1
 8005f72:	e7f2      	b.n	8005f5a <__libc_init_array+0x1e>
 8005f74:	08006c18 	.word	0x08006c18
 8005f78:	08006c18 	.word	0x08006c18
 8005f7c:	08006c18 	.word	0x08006c18
 8005f80:	08006c1c 	.word	0x08006c1c

08005f84 <__retarget_lock_init_recursive>:
 8005f84:	4770      	bx	lr

08005f86 <__retarget_lock_acquire_recursive>:
 8005f86:	4770      	bx	lr

08005f88 <__retarget_lock_release_recursive>:
 8005f88:	4770      	bx	lr

08005f8a <memcpy>:
 8005f8a:	440a      	add	r2, r1
 8005f8c:	4291      	cmp	r1, r2
 8005f8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f92:	d100      	bne.n	8005f96 <memcpy+0xc>
 8005f94:	4770      	bx	lr
 8005f96:	b510      	push	{r4, lr}
 8005f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fa0:	4291      	cmp	r1, r2
 8005fa2:	d1f9      	bne.n	8005f98 <memcpy+0xe>
 8005fa4:	bd10      	pop	{r4, pc}
	...

08005fa8 <_free_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4605      	mov	r5, r0
 8005fac:	2900      	cmp	r1, #0
 8005fae:	d041      	beq.n	8006034 <_free_r+0x8c>
 8005fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb4:	1f0c      	subs	r4, r1, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bfb8      	it	lt
 8005fba:	18e4      	addlt	r4, r4, r3
 8005fbc:	f000 f8e0 	bl	8006180 <__malloc_lock>
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8006038 <_free_r+0x90>)
 8005fc2:	6813      	ldr	r3, [r2, #0]
 8005fc4:	b933      	cbnz	r3, 8005fd4 <_free_r+0x2c>
 8005fc6:	6063      	str	r3, [r4, #4]
 8005fc8:	6014      	str	r4, [r2, #0]
 8005fca:	4628      	mov	r0, r5
 8005fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd0:	f000 b8dc 	b.w	800618c <__malloc_unlock>
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	d908      	bls.n	8005fea <_free_r+0x42>
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	1821      	adds	r1, r4, r0
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	bf01      	itttt	eq
 8005fe0:	6819      	ldreq	r1, [r3, #0]
 8005fe2:	685b      	ldreq	r3, [r3, #4]
 8005fe4:	1809      	addeq	r1, r1, r0
 8005fe6:	6021      	streq	r1, [r4, #0]
 8005fe8:	e7ed      	b.n	8005fc6 <_free_r+0x1e>
 8005fea:	461a      	mov	r2, r3
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	b10b      	cbz	r3, 8005ff4 <_free_r+0x4c>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d9fa      	bls.n	8005fea <_free_r+0x42>
 8005ff4:	6811      	ldr	r1, [r2, #0]
 8005ff6:	1850      	adds	r0, r2, r1
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d10b      	bne.n	8006014 <_free_r+0x6c>
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	4401      	add	r1, r0
 8006000:	1850      	adds	r0, r2, r1
 8006002:	4283      	cmp	r3, r0
 8006004:	6011      	str	r1, [r2, #0]
 8006006:	d1e0      	bne.n	8005fca <_free_r+0x22>
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	6053      	str	r3, [r2, #4]
 800600e:	4408      	add	r0, r1
 8006010:	6010      	str	r0, [r2, #0]
 8006012:	e7da      	b.n	8005fca <_free_r+0x22>
 8006014:	d902      	bls.n	800601c <_free_r+0x74>
 8006016:	230c      	movs	r3, #12
 8006018:	602b      	str	r3, [r5, #0]
 800601a:	e7d6      	b.n	8005fca <_free_r+0x22>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	1821      	adds	r1, r4, r0
 8006020:	428b      	cmp	r3, r1
 8006022:	bf04      	itt	eq
 8006024:	6819      	ldreq	r1, [r3, #0]
 8006026:	685b      	ldreq	r3, [r3, #4]
 8006028:	6063      	str	r3, [r4, #4]
 800602a:	bf04      	itt	eq
 800602c:	1809      	addeq	r1, r1, r0
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	6054      	str	r4, [r2, #4]
 8006032:	e7ca      	b.n	8005fca <_free_r+0x22>
 8006034:	bd38      	pop	{r3, r4, r5, pc}
 8006036:	bf00      	nop
 8006038:	20004c6c 	.word	0x20004c6c

0800603c <sbrk_aligned>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4e0f      	ldr	r6, [pc, #60]	@ (800607c <sbrk_aligned+0x40>)
 8006040:	460c      	mov	r4, r1
 8006042:	6831      	ldr	r1, [r6, #0]
 8006044:	4605      	mov	r5, r0
 8006046:	b911      	cbnz	r1, 800604e <sbrk_aligned+0x12>
 8006048:	f000 fcb4 	bl	80069b4 <_sbrk_r>
 800604c:	6030      	str	r0, [r6, #0]
 800604e:	4621      	mov	r1, r4
 8006050:	4628      	mov	r0, r5
 8006052:	f000 fcaf 	bl	80069b4 <_sbrk_r>
 8006056:	1c43      	adds	r3, r0, #1
 8006058:	d103      	bne.n	8006062 <sbrk_aligned+0x26>
 800605a:	f04f 34ff 	mov.w	r4, #4294967295
 800605e:	4620      	mov	r0, r4
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	1cc4      	adds	r4, r0, #3
 8006064:	f024 0403 	bic.w	r4, r4, #3
 8006068:	42a0      	cmp	r0, r4
 800606a:	d0f8      	beq.n	800605e <sbrk_aligned+0x22>
 800606c:	1a21      	subs	r1, r4, r0
 800606e:	4628      	mov	r0, r5
 8006070:	f000 fca0 	bl	80069b4 <_sbrk_r>
 8006074:	3001      	adds	r0, #1
 8006076:	d1f2      	bne.n	800605e <sbrk_aligned+0x22>
 8006078:	e7ef      	b.n	800605a <sbrk_aligned+0x1e>
 800607a:	bf00      	nop
 800607c:	20004c68 	.word	0x20004c68

08006080 <_malloc_r>:
 8006080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006084:	1ccd      	adds	r5, r1, #3
 8006086:	f025 0503 	bic.w	r5, r5, #3
 800608a:	3508      	adds	r5, #8
 800608c:	2d0c      	cmp	r5, #12
 800608e:	bf38      	it	cc
 8006090:	250c      	movcc	r5, #12
 8006092:	2d00      	cmp	r5, #0
 8006094:	4606      	mov	r6, r0
 8006096:	db01      	blt.n	800609c <_malloc_r+0x1c>
 8006098:	42a9      	cmp	r1, r5
 800609a:	d904      	bls.n	80060a6 <_malloc_r+0x26>
 800609c:	230c      	movs	r3, #12
 800609e:	6033      	str	r3, [r6, #0]
 80060a0:	2000      	movs	r0, #0
 80060a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800617c <_malloc_r+0xfc>
 80060aa:	f000 f869 	bl	8006180 <__malloc_lock>
 80060ae:	f8d8 3000 	ldr.w	r3, [r8]
 80060b2:	461c      	mov	r4, r3
 80060b4:	bb44      	cbnz	r4, 8006108 <_malloc_r+0x88>
 80060b6:	4629      	mov	r1, r5
 80060b8:	4630      	mov	r0, r6
 80060ba:	f7ff ffbf 	bl	800603c <sbrk_aligned>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	4604      	mov	r4, r0
 80060c2:	d158      	bne.n	8006176 <_malloc_r+0xf6>
 80060c4:	f8d8 4000 	ldr.w	r4, [r8]
 80060c8:	4627      	mov	r7, r4
 80060ca:	2f00      	cmp	r7, #0
 80060cc:	d143      	bne.n	8006156 <_malloc_r+0xd6>
 80060ce:	2c00      	cmp	r4, #0
 80060d0:	d04b      	beq.n	800616a <_malloc_r+0xea>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	4639      	mov	r1, r7
 80060d6:	4630      	mov	r0, r6
 80060d8:	eb04 0903 	add.w	r9, r4, r3
 80060dc:	f000 fc6a 	bl	80069b4 <_sbrk_r>
 80060e0:	4581      	cmp	r9, r0
 80060e2:	d142      	bne.n	800616a <_malloc_r+0xea>
 80060e4:	6821      	ldr	r1, [r4, #0]
 80060e6:	1a6d      	subs	r5, r5, r1
 80060e8:	4629      	mov	r1, r5
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff ffa6 	bl	800603c <sbrk_aligned>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d03a      	beq.n	800616a <_malloc_r+0xea>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	442b      	add	r3, r5
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	f8d8 3000 	ldr.w	r3, [r8]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	bb62      	cbnz	r2, 800615c <_malloc_r+0xdc>
 8006102:	f8c8 7000 	str.w	r7, [r8]
 8006106:	e00f      	b.n	8006128 <_malloc_r+0xa8>
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	1b52      	subs	r2, r2, r5
 800610c:	d420      	bmi.n	8006150 <_malloc_r+0xd0>
 800610e:	2a0b      	cmp	r2, #11
 8006110:	d917      	bls.n	8006142 <_malloc_r+0xc2>
 8006112:	1961      	adds	r1, r4, r5
 8006114:	42a3      	cmp	r3, r4
 8006116:	6025      	str	r5, [r4, #0]
 8006118:	bf18      	it	ne
 800611a:	6059      	strne	r1, [r3, #4]
 800611c:	6863      	ldr	r3, [r4, #4]
 800611e:	bf08      	it	eq
 8006120:	f8c8 1000 	streq.w	r1, [r8]
 8006124:	5162      	str	r2, [r4, r5]
 8006126:	604b      	str	r3, [r1, #4]
 8006128:	4630      	mov	r0, r6
 800612a:	f000 f82f 	bl	800618c <__malloc_unlock>
 800612e:	f104 000b 	add.w	r0, r4, #11
 8006132:	1d23      	adds	r3, r4, #4
 8006134:	f020 0007 	bic.w	r0, r0, #7
 8006138:	1ac2      	subs	r2, r0, r3
 800613a:	bf1c      	itt	ne
 800613c:	1a1b      	subne	r3, r3, r0
 800613e:	50a3      	strne	r3, [r4, r2]
 8006140:	e7af      	b.n	80060a2 <_malloc_r+0x22>
 8006142:	6862      	ldr	r2, [r4, #4]
 8006144:	42a3      	cmp	r3, r4
 8006146:	bf0c      	ite	eq
 8006148:	f8c8 2000 	streq.w	r2, [r8]
 800614c:	605a      	strne	r2, [r3, #4]
 800614e:	e7eb      	b.n	8006128 <_malloc_r+0xa8>
 8006150:	4623      	mov	r3, r4
 8006152:	6864      	ldr	r4, [r4, #4]
 8006154:	e7ae      	b.n	80060b4 <_malloc_r+0x34>
 8006156:	463c      	mov	r4, r7
 8006158:	687f      	ldr	r7, [r7, #4]
 800615a:	e7b6      	b.n	80060ca <_malloc_r+0x4a>
 800615c:	461a      	mov	r2, r3
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	42a3      	cmp	r3, r4
 8006162:	d1fb      	bne.n	800615c <_malloc_r+0xdc>
 8006164:	2300      	movs	r3, #0
 8006166:	6053      	str	r3, [r2, #4]
 8006168:	e7de      	b.n	8006128 <_malloc_r+0xa8>
 800616a:	230c      	movs	r3, #12
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	4630      	mov	r0, r6
 8006170:	f000 f80c 	bl	800618c <__malloc_unlock>
 8006174:	e794      	b.n	80060a0 <_malloc_r+0x20>
 8006176:	6005      	str	r5, [r0, #0]
 8006178:	e7d6      	b.n	8006128 <_malloc_r+0xa8>
 800617a:	bf00      	nop
 800617c:	20004c6c 	.word	0x20004c6c

08006180 <__malloc_lock>:
 8006180:	4801      	ldr	r0, [pc, #4]	@ (8006188 <__malloc_lock+0x8>)
 8006182:	f7ff bf00 	b.w	8005f86 <__retarget_lock_acquire_recursive>
 8006186:	bf00      	nop
 8006188:	20004c64 	.word	0x20004c64

0800618c <__malloc_unlock>:
 800618c:	4801      	ldr	r0, [pc, #4]	@ (8006194 <__malloc_unlock+0x8>)
 800618e:	f7ff befb 	b.w	8005f88 <__retarget_lock_release_recursive>
 8006192:	bf00      	nop
 8006194:	20004c64 	.word	0x20004c64

08006198 <__sfputc_r>:
 8006198:	6893      	ldr	r3, [r2, #8]
 800619a:	3b01      	subs	r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	b410      	push	{r4}
 80061a0:	6093      	str	r3, [r2, #8]
 80061a2:	da08      	bge.n	80061b6 <__sfputc_r+0x1e>
 80061a4:	6994      	ldr	r4, [r2, #24]
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	db01      	blt.n	80061ae <__sfputc_r+0x16>
 80061aa:	290a      	cmp	r1, #10
 80061ac:	d103      	bne.n	80061b6 <__sfputc_r+0x1e>
 80061ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b2:	f000 bb6b 	b.w	800688c <__swbuf_r>
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	1c58      	adds	r0, r3, #1
 80061ba:	6010      	str	r0, [r2, #0]
 80061bc:	7019      	strb	r1, [r3, #0]
 80061be:	4608      	mov	r0, r1
 80061c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <__sfputs_r>:
 80061c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c8:	4606      	mov	r6, r0
 80061ca:	460f      	mov	r7, r1
 80061cc:	4614      	mov	r4, r2
 80061ce:	18d5      	adds	r5, r2, r3
 80061d0:	42ac      	cmp	r4, r5
 80061d2:	d101      	bne.n	80061d8 <__sfputs_r+0x12>
 80061d4:	2000      	movs	r0, #0
 80061d6:	e007      	b.n	80061e8 <__sfputs_r+0x22>
 80061d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061dc:	463a      	mov	r2, r7
 80061de:	4630      	mov	r0, r6
 80061e0:	f7ff ffda 	bl	8006198 <__sfputc_r>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d1f3      	bne.n	80061d0 <__sfputs_r+0xa>
 80061e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061ec <_vfiprintf_r>:
 80061ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	460d      	mov	r5, r1
 80061f2:	b09d      	sub	sp, #116	@ 0x74
 80061f4:	4614      	mov	r4, r2
 80061f6:	4698      	mov	r8, r3
 80061f8:	4606      	mov	r6, r0
 80061fa:	b118      	cbz	r0, 8006204 <_vfiprintf_r+0x18>
 80061fc:	6a03      	ldr	r3, [r0, #32]
 80061fe:	b90b      	cbnz	r3, 8006204 <_vfiprintf_r+0x18>
 8006200:	f7ff fd5e 	bl	8005cc0 <__sinit>
 8006204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006206:	07d9      	lsls	r1, r3, #31
 8006208:	d405      	bmi.n	8006216 <_vfiprintf_r+0x2a>
 800620a:	89ab      	ldrh	r3, [r5, #12]
 800620c:	059a      	lsls	r2, r3, #22
 800620e:	d402      	bmi.n	8006216 <_vfiprintf_r+0x2a>
 8006210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006212:	f7ff feb8 	bl	8005f86 <__retarget_lock_acquire_recursive>
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	071b      	lsls	r3, r3, #28
 800621a:	d501      	bpl.n	8006220 <_vfiprintf_r+0x34>
 800621c:	692b      	ldr	r3, [r5, #16]
 800621e:	b99b      	cbnz	r3, 8006248 <_vfiprintf_r+0x5c>
 8006220:	4629      	mov	r1, r5
 8006222:	4630      	mov	r0, r6
 8006224:	f000 fb70 	bl	8006908 <__swsetup_r>
 8006228:	b170      	cbz	r0, 8006248 <_vfiprintf_r+0x5c>
 800622a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800622c:	07dc      	lsls	r4, r3, #31
 800622e:	d504      	bpl.n	800623a <_vfiprintf_r+0x4e>
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	b01d      	add	sp, #116	@ 0x74
 8006236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623a:	89ab      	ldrh	r3, [r5, #12]
 800623c:	0598      	lsls	r0, r3, #22
 800623e:	d4f7      	bmi.n	8006230 <_vfiprintf_r+0x44>
 8006240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006242:	f7ff fea1 	bl	8005f88 <__retarget_lock_release_recursive>
 8006246:	e7f3      	b.n	8006230 <_vfiprintf_r+0x44>
 8006248:	2300      	movs	r3, #0
 800624a:	9309      	str	r3, [sp, #36]	@ 0x24
 800624c:	2320      	movs	r3, #32
 800624e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006252:	f8cd 800c 	str.w	r8, [sp, #12]
 8006256:	2330      	movs	r3, #48	@ 0x30
 8006258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006408 <_vfiprintf_r+0x21c>
 800625c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006260:	f04f 0901 	mov.w	r9, #1
 8006264:	4623      	mov	r3, r4
 8006266:	469a      	mov	sl, r3
 8006268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800626c:	b10a      	cbz	r2, 8006272 <_vfiprintf_r+0x86>
 800626e:	2a25      	cmp	r2, #37	@ 0x25
 8006270:	d1f9      	bne.n	8006266 <_vfiprintf_r+0x7a>
 8006272:	ebba 0b04 	subs.w	fp, sl, r4
 8006276:	d00b      	beq.n	8006290 <_vfiprintf_r+0xa4>
 8006278:	465b      	mov	r3, fp
 800627a:	4622      	mov	r2, r4
 800627c:	4629      	mov	r1, r5
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ffa1 	bl	80061c6 <__sfputs_r>
 8006284:	3001      	adds	r0, #1
 8006286:	f000 80a7 	beq.w	80063d8 <_vfiprintf_r+0x1ec>
 800628a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800628c:	445a      	add	r2, fp
 800628e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006290:	f89a 3000 	ldrb.w	r3, [sl]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 809f 	beq.w	80063d8 <_vfiprintf_r+0x1ec>
 800629a:	2300      	movs	r3, #0
 800629c:	f04f 32ff 	mov.w	r2, #4294967295
 80062a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062a4:	f10a 0a01 	add.w	sl, sl, #1
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	9307      	str	r3, [sp, #28]
 80062ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80062b2:	4654      	mov	r4, sl
 80062b4:	2205      	movs	r2, #5
 80062b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ba:	4853      	ldr	r0, [pc, #332]	@ (8006408 <_vfiprintf_r+0x21c>)
 80062bc:	f7f9 ff90 	bl	80001e0 <memchr>
 80062c0:	9a04      	ldr	r2, [sp, #16]
 80062c2:	b9d8      	cbnz	r0, 80062fc <_vfiprintf_r+0x110>
 80062c4:	06d1      	lsls	r1, r2, #27
 80062c6:	bf44      	itt	mi
 80062c8:	2320      	movmi	r3, #32
 80062ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062ce:	0713      	lsls	r3, r2, #28
 80062d0:	bf44      	itt	mi
 80062d2:	232b      	movmi	r3, #43	@ 0x2b
 80062d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062d8:	f89a 3000 	ldrb.w	r3, [sl]
 80062dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80062de:	d015      	beq.n	800630c <_vfiprintf_r+0x120>
 80062e0:	9a07      	ldr	r2, [sp, #28]
 80062e2:	4654      	mov	r4, sl
 80062e4:	2000      	movs	r0, #0
 80062e6:	f04f 0c0a 	mov.w	ip, #10
 80062ea:	4621      	mov	r1, r4
 80062ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f0:	3b30      	subs	r3, #48	@ 0x30
 80062f2:	2b09      	cmp	r3, #9
 80062f4:	d94b      	bls.n	800638e <_vfiprintf_r+0x1a2>
 80062f6:	b1b0      	cbz	r0, 8006326 <_vfiprintf_r+0x13a>
 80062f8:	9207      	str	r2, [sp, #28]
 80062fa:	e014      	b.n	8006326 <_vfiprintf_r+0x13a>
 80062fc:	eba0 0308 	sub.w	r3, r0, r8
 8006300:	fa09 f303 	lsl.w	r3, r9, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	9304      	str	r3, [sp, #16]
 8006308:	46a2      	mov	sl, r4
 800630a:	e7d2      	b.n	80062b2 <_vfiprintf_r+0xc6>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	1d19      	adds	r1, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	9103      	str	r1, [sp, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfbb      	ittet	lt
 8006318:	425b      	neglt	r3, r3
 800631a:	f042 0202 	orrlt.w	r2, r2, #2
 800631e:	9307      	strge	r3, [sp, #28]
 8006320:	9307      	strlt	r3, [sp, #28]
 8006322:	bfb8      	it	lt
 8006324:	9204      	strlt	r2, [sp, #16]
 8006326:	7823      	ldrb	r3, [r4, #0]
 8006328:	2b2e      	cmp	r3, #46	@ 0x2e
 800632a:	d10a      	bne.n	8006342 <_vfiprintf_r+0x156>
 800632c:	7863      	ldrb	r3, [r4, #1]
 800632e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006330:	d132      	bne.n	8006398 <_vfiprintf_r+0x1ac>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	9203      	str	r2, [sp, #12]
 800633a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800633e:	3402      	adds	r4, #2
 8006340:	9305      	str	r3, [sp, #20]
 8006342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006418 <_vfiprintf_r+0x22c>
 8006346:	7821      	ldrb	r1, [r4, #0]
 8006348:	2203      	movs	r2, #3
 800634a:	4650      	mov	r0, sl
 800634c:	f7f9 ff48 	bl	80001e0 <memchr>
 8006350:	b138      	cbz	r0, 8006362 <_vfiprintf_r+0x176>
 8006352:	9b04      	ldr	r3, [sp, #16]
 8006354:	eba0 000a 	sub.w	r0, r0, sl
 8006358:	2240      	movs	r2, #64	@ 0x40
 800635a:	4082      	lsls	r2, r0
 800635c:	4313      	orrs	r3, r2
 800635e:	3401      	adds	r4, #1
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006366:	4829      	ldr	r0, [pc, #164]	@ (800640c <_vfiprintf_r+0x220>)
 8006368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800636c:	2206      	movs	r2, #6
 800636e:	f7f9 ff37 	bl	80001e0 <memchr>
 8006372:	2800      	cmp	r0, #0
 8006374:	d03f      	beq.n	80063f6 <_vfiprintf_r+0x20a>
 8006376:	4b26      	ldr	r3, [pc, #152]	@ (8006410 <_vfiprintf_r+0x224>)
 8006378:	bb1b      	cbnz	r3, 80063c2 <_vfiprintf_r+0x1d6>
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	3307      	adds	r3, #7
 800637e:	f023 0307 	bic.w	r3, r3, #7
 8006382:	3308      	adds	r3, #8
 8006384:	9303      	str	r3, [sp, #12]
 8006386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006388:	443b      	add	r3, r7
 800638a:	9309      	str	r3, [sp, #36]	@ 0x24
 800638c:	e76a      	b.n	8006264 <_vfiprintf_r+0x78>
 800638e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006392:	460c      	mov	r4, r1
 8006394:	2001      	movs	r0, #1
 8006396:	e7a8      	b.n	80062ea <_vfiprintf_r+0xfe>
 8006398:	2300      	movs	r3, #0
 800639a:	3401      	adds	r4, #1
 800639c:	9305      	str	r3, [sp, #20]
 800639e:	4619      	mov	r1, r3
 80063a0:	f04f 0c0a 	mov.w	ip, #10
 80063a4:	4620      	mov	r0, r4
 80063a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063aa:	3a30      	subs	r2, #48	@ 0x30
 80063ac:	2a09      	cmp	r2, #9
 80063ae:	d903      	bls.n	80063b8 <_vfiprintf_r+0x1cc>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0c6      	beq.n	8006342 <_vfiprintf_r+0x156>
 80063b4:	9105      	str	r1, [sp, #20]
 80063b6:	e7c4      	b.n	8006342 <_vfiprintf_r+0x156>
 80063b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80063bc:	4604      	mov	r4, r0
 80063be:	2301      	movs	r3, #1
 80063c0:	e7f0      	b.n	80063a4 <_vfiprintf_r+0x1b8>
 80063c2:	ab03      	add	r3, sp, #12
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	462a      	mov	r2, r5
 80063c8:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <_vfiprintf_r+0x228>)
 80063ca:	a904      	add	r1, sp, #16
 80063cc:	4630      	mov	r0, r6
 80063ce:	f3af 8000 	nop.w
 80063d2:	4607      	mov	r7, r0
 80063d4:	1c78      	adds	r0, r7, #1
 80063d6:	d1d6      	bne.n	8006386 <_vfiprintf_r+0x19a>
 80063d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063da:	07d9      	lsls	r1, r3, #31
 80063dc:	d405      	bmi.n	80063ea <_vfiprintf_r+0x1fe>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	059a      	lsls	r2, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_vfiprintf_r+0x1fe>
 80063e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063e6:	f7ff fdcf 	bl	8005f88 <__retarget_lock_release_recursive>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	065b      	lsls	r3, r3, #25
 80063ee:	f53f af1f 	bmi.w	8006230 <_vfiprintf_r+0x44>
 80063f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063f4:	e71e      	b.n	8006234 <_vfiprintf_r+0x48>
 80063f6:	ab03      	add	r3, sp, #12
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	462a      	mov	r2, r5
 80063fc:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <_vfiprintf_r+0x228>)
 80063fe:	a904      	add	r1, sp, #16
 8006400:	4630      	mov	r0, r6
 8006402:	f000 f879 	bl	80064f8 <_printf_i>
 8006406:	e7e4      	b.n	80063d2 <_vfiprintf_r+0x1e6>
 8006408:	08006bdc 	.word	0x08006bdc
 800640c:	08006be6 	.word	0x08006be6
 8006410:	00000000 	.word	0x00000000
 8006414:	080061c7 	.word	0x080061c7
 8006418:	08006be2 	.word	0x08006be2

0800641c <_printf_common>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	4616      	mov	r6, r2
 8006422:	4698      	mov	r8, r3
 8006424:	688a      	ldr	r2, [r1, #8]
 8006426:	690b      	ldr	r3, [r1, #16]
 8006428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800642c:	4293      	cmp	r3, r2
 800642e:	bfb8      	it	lt
 8006430:	4613      	movlt	r3, r2
 8006432:	6033      	str	r3, [r6, #0]
 8006434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006438:	4607      	mov	r7, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b10a      	cbz	r2, 8006442 <_printf_common+0x26>
 800643e:	3301      	adds	r3, #1
 8006440:	6033      	str	r3, [r6, #0]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	0699      	lsls	r1, r3, #26
 8006446:	bf42      	ittt	mi
 8006448:	6833      	ldrmi	r3, [r6, #0]
 800644a:	3302      	addmi	r3, #2
 800644c:	6033      	strmi	r3, [r6, #0]
 800644e:	6825      	ldr	r5, [r4, #0]
 8006450:	f015 0506 	ands.w	r5, r5, #6
 8006454:	d106      	bne.n	8006464 <_printf_common+0x48>
 8006456:	f104 0a19 	add.w	sl, r4, #25
 800645a:	68e3      	ldr	r3, [r4, #12]
 800645c:	6832      	ldr	r2, [r6, #0]
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	42ab      	cmp	r3, r5
 8006462:	dc26      	bgt.n	80064b2 <_printf_common+0x96>
 8006464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006468:	6822      	ldr	r2, [r4, #0]
 800646a:	3b00      	subs	r3, #0
 800646c:	bf18      	it	ne
 800646e:	2301      	movne	r3, #1
 8006470:	0692      	lsls	r2, r2, #26
 8006472:	d42b      	bmi.n	80064cc <_printf_common+0xb0>
 8006474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006478:	4641      	mov	r1, r8
 800647a:	4638      	mov	r0, r7
 800647c:	47c8      	blx	r9
 800647e:	3001      	adds	r0, #1
 8006480:	d01e      	beq.n	80064c0 <_printf_common+0xa4>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	6922      	ldr	r2, [r4, #16]
 8006486:	f003 0306 	and.w	r3, r3, #6
 800648a:	2b04      	cmp	r3, #4
 800648c:	bf02      	ittt	eq
 800648e:	68e5      	ldreq	r5, [r4, #12]
 8006490:	6833      	ldreq	r3, [r6, #0]
 8006492:	1aed      	subeq	r5, r5, r3
 8006494:	68a3      	ldr	r3, [r4, #8]
 8006496:	bf0c      	ite	eq
 8006498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800649c:	2500      	movne	r5, #0
 800649e:	4293      	cmp	r3, r2
 80064a0:	bfc4      	itt	gt
 80064a2:	1a9b      	subgt	r3, r3, r2
 80064a4:	18ed      	addgt	r5, r5, r3
 80064a6:	2600      	movs	r6, #0
 80064a8:	341a      	adds	r4, #26
 80064aa:	42b5      	cmp	r5, r6
 80064ac:	d11a      	bne.n	80064e4 <_printf_common+0xc8>
 80064ae:	2000      	movs	r0, #0
 80064b0:	e008      	b.n	80064c4 <_printf_common+0xa8>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4652      	mov	r2, sl
 80064b6:	4641      	mov	r1, r8
 80064b8:	4638      	mov	r0, r7
 80064ba:	47c8      	blx	r9
 80064bc:	3001      	adds	r0, #1
 80064be:	d103      	bne.n	80064c8 <_printf_common+0xac>
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c8:	3501      	adds	r5, #1
 80064ca:	e7c6      	b.n	800645a <_printf_common+0x3e>
 80064cc:	18e1      	adds	r1, r4, r3
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	2030      	movs	r0, #48	@ 0x30
 80064d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064d6:	4422      	add	r2, r4
 80064d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064e0:	3302      	adds	r3, #2
 80064e2:	e7c7      	b.n	8006474 <_printf_common+0x58>
 80064e4:	2301      	movs	r3, #1
 80064e6:	4622      	mov	r2, r4
 80064e8:	4641      	mov	r1, r8
 80064ea:	4638      	mov	r0, r7
 80064ec:	47c8      	blx	r9
 80064ee:	3001      	adds	r0, #1
 80064f0:	d0e6      	beq.n	80064c0 <_printf_common+0xa4>
 80064f2:	3601      	adds	r6, #1
 80064f4:	e7d9      	b.n	80064aa <_printf_common+0x8e>
	...

080064f8 <_printf_i>:
 80064f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	7e0f      	ldrb	r7, [r1, #24]
 80064fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006500:	2f78      	cmp	r7, #120	@ 0x78
 8006502:	4691      	mov	r9, r2
 8006504:	4680      	mov	r8, r0
 8006506:	460c      	mov	r4, r1
 8006508:	469a      	mov	sl, r3
 800650a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800650e:	d807      	bhi.n	8006520 <_printf_i+0x28>
 8006510:	2f62      	cmp	r7, #98	@ 0x62
 8006512:	d80a      	bhi.n	800652a <_printf_i+0x32>
 8006514:	2f00      	cmp	r7, #0
 8006516:	f000 80d1 	beq.w	80066bc <_printf_i+0x1c4>
 800651a:	2f58      	cmp	r7, #88	@ 0x58
 800651c:	f000 80b8 	beq.w	8006690 <_printf_i+0x198>
 8006520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006528:	e03a      	b.n	80065a0 <_printf_i+0xa8>
 800652a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800652e:	2b15      	cmp	r3, #21
 8006530:	d8f6      	bhi.n	8006520 <_printf_i+0x28>
 8006532:	a101      	add	r1, pc, #4	@ (adr r1, 8006538 <_printf_i+0x40>)
 8006534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006538:	08006591 	.word	0x08006591
 800653c:	080065a5 	.word	0x080065a5
 8006540:	08006521 	.word	0x08006521
 8006544:	08006521 	.word	0x08006521
 8006548:	08006521 	.word	0x08006521
 800654c:	08006521 	.word	0x08006521
 8006550:	080065a5 	.word	0x080065a5
 8006554:	08006521 	.word	0x08006521
 8006558:	08006521 	.word	0x08006521
 800655c:	08006521 	.word	0x08006521
 8006560:	08006521 	.word	0x08006521
 8006564:	080066a3 	.word	0x080066a3
 8006568:	080065cf 	.word	0x080065cf
 800656c:	0800665d 	.word	0x0800665d
 8006570:	08006521 	.word	0x08006521
 8006574:	08006521 	.word	0x08006521
 8006578:	080066c5 	.word	0x080066c5
 800657c:	08006521 	.word	0x08006521
 8006580:	080065cf 	.word	0x080065cf
 8006584:	08006521 	.word	0x08006521
 8006588:	08006521 	.word	0x08006521
 800658c:	08006665 	.word	0x08006665
 8006590:	6833      	ldr	r3, [r6, #0]
 8006592:	1d1a      	adds	r2, r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6032      	str	r2, [r6, #0]
 8006598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800659c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065a0:	2301      	movs	r3, #1
 80065a2:	e09c      	b.n	80066de <_printf_i+0x1e6>
 80065a4:	6833      	ldr	r3, [r6, #0]
 80065a6:	6820      	ldr	r0, [r4, #0]
 80065a8:	1d19      	adds	r1, r3, #4
 80065aa:	6031      	str	r1, [r6, #0]
 80065ac:	0606      	lsls	r6, r0, #24
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0xbc>
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	e003      	b.n	80065bc <_printf_i+0xc4>
 80065b4:	0645      	lsls	r5, r0, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0xb8>
 80065b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065bc:	2d00      	cmp	r5, #0
 80065be:	da03      	bge.n	80065c8 <_printf_i+0xd0>
 80065c0:	232d      	movs	r3, #45	@ 0x2d
 80065c2:	426d      	negs	r5, r5
 80065c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c8:	4858      	ldr	r0, [pc, #352]	@ (800672c <_printf_i+0x234>)
 80065ca:	230a      	movs	r3, #10
 80065cc:	e011      	b.n	80065f2 <_printf_i+0xfa>
 80065ce:	6821      	ldr	r1, [r4, #0]
 80065d0:	6833      	ldr	r3, [r6, #0]
 80065d2:	0608      	lsls	r0, r1, #24
 80065d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80065d8:	d402      	bmi.n	80065e0 <_printf_i+0xe8>
 80065da:	0649      	lsls	r1, r1, #25
 80065dc:	bf48      	it	mi
 80065de:	b2ad      	uxthmi	r5, r5
 80065e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80065e2:	4852      	ldr	r0, [pc, #328]	@ (800672c <_printf_i+0x234>)
 80065e4:	6033      	str	r3, [r6, #0]
 80065e6:	bf14      	ite	ne
 80065e8:	230a      	movne	r3, #10
 80065ea:	2308      	moveq	r3, #8
 80065ec:	2100      	movs	r1, #0
 80065ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065f2:	6866      	ldr	r6, [r4, #4]
 80065f4:	60a6      	str	r6, [r4, #8]
 80065f6:	2e00      	cmp	r6, #0
 80065f8:	db05      	blt.n	8006606 <_printf_i+0x10e>
 80065fa:	6821      	ldr	r1, [r4, #0]
 80065fc:	432e      	orrs	r6, r5
 80065fe:	f021 0104 	bic.w	r1, r1, #4
 8006602:	6021      	str	r1, [r4, #0]
 8006604:	d04b      	beq.n	800669e <_printf_i+0x1a6>
 8006606:	4616      	mov	r6, r2
 8006608:	fbb5 f1f3 	udiv	r1, r5, r3
 800660c:	fb03 5711 	mls	r7, r3, r1, r5
 8006610:	5dc7      	ldrb	r7, [r0, r7]
 8006612:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006616:	462f      	mov	r7, r5
 8006618:	42bb      	cmp	r3, r7
 800661a:	460d      	mov	r5, r1
 800661c:	d9f4      	bls.n	8006608 <_printf_i+0x110>
 800661e:	2b08      	cmp	r3, #8
 8006620:	d10b      	bne.n	800663a <_printf_i+0x142>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	07df      	lsls	r7, r3, #31
 8006626:	d508      	bpl.n	800663a <_printf_i+0x142>
 8006628:	6923      	ldr	r3, [r4, #16]
 800662a:	6861      	ldr	r1, [r4, #4]
 800662c:	4299      	cmp	r1, r3
 800662e:	bfde      	ittt	le
 8006630:	2330      	movle	r3, #48	@ 0x30
 8006632:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006636:	f106 36ff 	addle.w	r6, r6, #4294967295
 800663a:	1b92      	subs	r2, r2, r6
 800663c:	6122      	str	r2, [r4, #16]
 800663e:	f8cd a000 	str.w	sl, [sp]
 8006642:	464b      	mov	r3, r9
 8006644:	aa03      	add	r2, sp, #12
 8006646:	4621      	mov	r1, r4
 8006648:	4640      	mov	r0, r8
 800664a:	f7ff fee7 	bl	800641c <_printf_common>
 800664e:	3001      	adds	r0, #1
 8006650:	d14a      	bne.n	80066e8 <_printf_i+0x1f0>
 8006652:	f04f 30ff 	mov.w	r0, #4294967295
 8006656:	b004      	add	sp, #16
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	6023      	str	r3, [r4, #0]
 8006664:	4832      	ldr	r0, [pc, #200]	@ (8006730 <_printf_i+0x238>)
 8006666:	2778      	movs	r7, #120	@ 0x78
 8006668:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	6831      	ldr	r1, [r6, #0]
 8006670:	061f      	lsls	r7, r3, #24
 8006672:	f851 5b04 	ldr.w	r5, [r1], #4
 8006676:	d402      	bmi.n	800667e <_printf_i+0x186>
 8006678:	065f      	lsls	r7, r3, #25
 800667a:	bf48      	it	mi
 800667c:	b2ad      	uxthmi	r5, r5
 800667e:	6031      	str	r1, [r6, #0]
 8006680:	07d9      	lsls	r1, r3, #31
 8006682:	bf44      	itt	mi
 8006684:	f043 0320 	orrmi.w	r3, r3, #32
 8006688:	6023      	strmi	r3, [r4, #0]
 800668a:	b11d      	cbz	r5, 8006694 <_printf_i+0x19c>
 800668c:	2310      	movs	r3, #16
 800668e:	e7ad      	b.n	80065ec <_printf_i+0xf4>
 8006690:	4826      	ldr	r0, [pc, #152]	@ (800672c <_printf_i+0x234>)
 8006692:	e7e9      	b.n	8006668 <_printf_i+0x170>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	f023 0320 	bic.w	r3, r3, #32
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	e7f6      	b.n	800668c <_printf_i+0x194>
 800669e:	4616      	mov	r6, r2
 80066a0:	e7bd      	b.n	800661e <_printf_i+0x126>
 80066a2:	6833      	ldr	r3, [r6, #0]
 80066a4:	6825      	ldr	r5, [r4, #0]
 80066a6:	6961      	ldr	r1, [r4, #20]
 80066a8:	1d18      	adds	r0, r3, #4
 80066aa:	6030      	str	r0, [r6, #0]
 80066ac:	062e      	lsls	r6, r5, #24
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	d501      	bpl.n	80066b6 <_printf_i+0x1be>
 80066b2:	6019      	str	r1, [r3, #0]
 80066b4:	e002      	b.n	80066bc <_printf_i+0x1c4>
 80066b6:	0668      	lsls	r0, r5, #25
 80066b8:	d5fb      	bpl.n	80066b2 <_printf_i+0x1ba>
 80066ba:	8019      	strh	r1, [r3, #0]
 80066bc:	2300      	movs	r3, #0
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	4616      	mov	r6, r2
 80066c2:	e7bc      	b.n	800663e <_printf_i+0x146>
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	1d1a      	adds	r2, r3, #4
 80066c8:	6032      	str	r2, [r6, #0]
 80066ca:	681e      	ldr	r6, [r3, #0]
 80066cc:	6862      	ldr	r2, [r4, #4]
 80066ce:	2100      	movs	r1, #0
 80066d0:	4630      	mov	r0, r6
 80066d2:	f7f9 fd85 	bl	80001e0 <memchr>
 80066d6:	b108      	cbz	r0, 80066dc <_printf_i+0x1e4>
 80066d8:	1b80      	subs	r0, r0, r6
 80066da:	6060      	str	r0, [r4, #4]
 80066dc:	6863      	ldr	r3, [r4, #4]
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	2300      	movs	r3, #0
 80066e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e6:	e7aa      	b.n	800663e <_printf_i+0x146>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	4632      	mov	r2, r6
 80066ec:	4649      	mov	r1, r9
 80066ee:	4640      	mov	r0, r8
 80066f0:	47d0      	blx	sl
 80066f2:	3001      	adds	r0, #1
 80066f4:	d0ad      	beq.n	8006652 <_printf_i+0x15a>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	079b      	lsls	r3, r3, #30
 80066fa:	d413      	bmi.n	8006724 <_printf_i+0x22c>
 80066fc:	68e0      	ldr	r0, [r4, #12]
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	4298      	cmp	r0, r3
 8006702:	bfb8      	it	lt
 8006704:	4618      	movlt	r0, r3
 8006706:	e7a6      	b.n	8006656 <_printf_i+0x15e>
 8006708:	2301      	movs	r3, #1
 800670a:	4632      	mov	r2, r6
 800670c:	4649      	mov	r1, r9
 800670e:	4640      	mov	r0, r8
 8006710:	47d0      	blx	sl
 8006712:	3001      	adds	r0, #1
 8006714:	d09d      	beq.n	8006652 <_printf_i+0x15a>
 8006716:	3501      	adds	r5, #1
 8006718:	68e3      	ldr	r3, [r4, #12]
 800671a:	9903      	ldr	r1, [sp, #12]
 800671c:	1a5b      	subs	r3, r3, r1
 800671e:	42ab      	cmp	r3, r5
 8006720:	dcf2      	bgt.n	8006708 <_printf_i+0x210>
 8006722:	e7eb      	b.n	80066fc <_printf_i+0x204>
 8006724:	2500      	movs	r5, #0
 8006726:	f104 0619 	add.w	r6, r4, #25
 800672a:	e7f5      	b.n	8006718 <_printf_i+0x220>
 800672c:	08006bed 	.word	0x08006bed
 8006730:	08006bfe 	.word	0x08006bfe

08006734 <__sflush_r>:
 8006734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673c:	0716      	lsls	r6, r2, #28
 800673e:	4605      	mov	r5, r0
 8006740:	460c      	mov	r4, r1
 8006742:	d454      	bmi.n	80067ee <__sflush_r+0xba>
 8006744:	684b      	ldr	r3, [r1, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	dc02      	bgt.n	8006750 <__sflush_r+0x1c>
 800674a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	dd48      	ble.n	80067e2 <__sflush_r+0xae>
 8006750:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006752:	2e00      	cmp	r6, #0
 8006754:	d045      	beq.n	80067e2 <__sflush_r+0xae>
 8006756:	2300      	movs	r3, #0
 8006758:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800675c:	682f      	ldr	r7, [r5, #0]
 800675e:	6a21      	ldr	r1, [r4, #32]
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	d030      	beq.n	80067c6 <__sflush_r+0x92>
 8006764:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	0759      	lsls	r1, r3, #29
 800676a:	d505      	bpl.n	8006778 <__sflush_r+0x44>
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006772:	b10b      	cbz	r3, 8006778 <__sflush_r+0x44>
 8006774:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800677c:	6a21      	ldr	r1, [r4, #32]
 800677e:	4628      	mov	r0, r5
 8006780:	47b0      	blx	r6
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	d106      	bne.n	8006796 <__sflush_r+0x62>
 8006788:	6829      	ldr	r1, [r5, #0]
 800678a:	291d      	cmp	r1, #29
 800678c:	d82b      	bhi.n	80067e6 <__sflush_r+0xb2>
 800678e:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <__sflush_r+0x104>)
 8006790:	40ca      	lsrs	r2, r1
 8006792:	07d6      	lsls	r6, r2, #31
 8006794:	d527      	bpl.n	80067e6 <__sflush_r+0xb2>
 8006796:	2200      	movs	r2, #0
 8006798:	6062      	str	r2, [r4, #4]
 800679a:	04d9      	lsls	r1, r3, #19
 800679c:	6922      	ldr	r2, [r4, #16]
 800679e:	6022      	str	r2, [r4, #0]
 80067a0:	d504      	bpl.n	80067ac <__sflush_r+0x78>
 80067a2:	1c42      	adds	r2, r0, #1
 80067a4:	d101      	bne.n	80067aa <__sflush_r+0x76>
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	b903      	cbnz	r3, 80067ac <__sflush_r+0x78>
 80067aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80067ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067ae:	602f      	str	r7, [r5, #0]
 80067b0:	b1b9      	cbz	r1, 80067e2 <__sflush_r+0xae>
 80067b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067b6:	4299      	cmp	r1, r3
 80067b8:	d002      	beq.n	80067c0 <__sflush_r+0x8c>
 80067ba:	4628      	mov	r0, r5
 80067bc:	f7ff fbf4 	bl	8005fa8 <_free_r>
 80067c0:	2300      	movs	r3, #0
 80067c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80067c4:	e00d      	b.n	80067e2 <__sflush_r+0xae>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b0      	blx	r6
 80067cc:	4602      	mov	r2, r0
 80067ce:	1c50      	adds	r0, r2, #1
 80067d0:	d1c9      	bne.n	8006766 <__sflush_r+0x32>
 80067d2:	682b      	ldr	r3, [r5, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0c6      	beq.n	8006766 <__sflush_r+0x32>
 80067d8:	2b1d      	cmp	r3, #29
 80067da:	d001      	beq.n	80067e0 <__sflush_r+0xac>
 80067dc:	2b16      	cmp	r3, #22
 80067de:	d11e      	bne.n	800681e <__sflush_r+0xea>
 80067e0:	602f      	str	r7, [r5, #0]
 80067e2:	2000      	movs	r0, #0
 80067e4:	e022      	b.n	800682c <__sflush_r+0xf8>
 80067e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ea:	b21b      	sxth	r3, r3
 80067ec:	e01b      	b.n	8006826 <__sflush_r+0xf2>
 80067ee:	690f      	ldr	r7, [r1, #16]
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	d0f6      	beq.n	80067e2 <__sflush_r+0xae>
 80067f4:	0793      	lsls	r3, r2, #30
 80067f6:	680e      	ldr	r6, [r1, #0]
 80067f8:	bf08      	it	eq
 80067fa:	694b      	ldreq	r3, [r1, #20]
 80067fc:	600f      	str	r7, [r1, #0]
 80067fe:	bf18      	it	ne
 8006800:	2300      	movne	r3, #0
 8006802:	eba6 0807 	sub.w	r8, r6, r7
 8006806:	608b      	str	r3, [r1, #8]
 8006808:	f1b8 0f00 	cmp.w	r8, #0
 800680c:	dde9      	ble.n	80067e2 <__sflush_r+0xae>
 800680e:	6a21      	ldr	r1, [r4, #32]
 8006810:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006812:	4643      	mov	r3, r8
 8006814:	463a      	mov	r2, r7
 8006816:	4628      	mov	r0, r5
 8006818:	47b0      	blx	r6
 800681a:	2800      	cmp	r0, #0
 800681c:	dc08      	bgt.n	8006830 <__sflush_r+0xfc>
 800681e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006830:	4407      	add	r7, r0
 8006832:	eba8 0800 	sub.w	r8, r8, r0
 8006836:	e7e7      	b.n	8006808 <__sflush_r+0xd4>
 8006838:	20400001 	.word	0x20400001

0800683c <_fflush_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	690b      	ldr	r3, [r1, #16]
 8006840:	4605      	mov	r5, r0
 8006842:	460c      	mov	r4, r1
 8006844:	b913      	cbnz	r3, 800684c <_fflush_r+0x10>
 8006846:	2500      	movs	r5, #0
 8006848:	4628      	mov	r0, r5
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	b118      	cbz	r0, 8006856 <_fflush_r+0x1a>
 800684e:	6a03      	ldr	r3, [r0, #32]
 8006850:	b90b      	cbnz	r3, 8006856 <_fflush_r+0x1a>
 8006852:	f7ff fa35 	bl	8005cc0 <__sinit>
 8006856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f3      	beq.n	8006846 <_fflush_r+0xa>
 800685e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006860:	07d0      	lsls	r0, r2, #31
 8006862:	d404      	bmi.n	800686e <_fflush_r+0x32>
 8006864:	0599      	lsls	r1, r3, #22
 8006866:	d402      	bmi.n	800686e <_fflush_r+0x32>
 8006868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800686a:	f7ff fb8c 	bl	8005f86 <__retarget_lock_acquire_recursive>
 800686e:	4628      	mov	r0, r5
 8006870:	4621      	mov	r1, r4
 8006872:	f7ff ff5f 	bl	8006734 <__sflush_r>
 8006876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006878:	07da      	lsls	r2, r3, #31
 800687a:	4605      	mov	r5, r0
 800687c:	d4e4      	bmi.n	8006848 <_fflush_r+0xc>
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	059b      	lsls	r3, r3, #22
 8006882:	d4e1      	bmi.n	8006848 <_fflush_r+0xc>
 8006884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006886:	f7ff fb7f 	bl	8005f88 <__retarget_lock_release_recursive>
 800688a:	e7dd      	b.n	8006848 <_fflush_r+0xc>

0800688c <__swbuf_r>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	460e      	mov	r6, r1
 8006890:	4614      	mov	r4, r2
 8006892:	4605      	mov	r5, r0
 8006894:	b118      	cbz	r0, 800689e <__swbuf_r+0x12>
 8006896:	6a03      	ldr	r3, [r0, #32]
 8006898:	b90b      	cbnz	r3, 800689e <__swbuf_r+0x12>
 800689a:	f7ff fa11 	bl	8005cc0 <__sinit>
 800689e:	69a3      	ldr	r3, [r4, #24]
 80068a0:	60a3      	str	r3, [r4, #8]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	071a      	lsls	r2, r3, #28
 80068a6:	d501      	bpl.n	80068ac <__swbuf_r+0x20>
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	b943      	cbnz	r3, 80068be <__swbuf_r+0x32>
 80068ac:	4621      	mov	r1, r4
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 f82a 	bl	8006908 <__swsetup_r>
 80068b4:	b118      	cbz	r0, 80068be <__swbuf_r+0x32>
 80068b6:	f04f 37ff 	mov.w	r7, #4294967295
 80068ba:	4638      	mov	r0, r7
 80068bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	6922      	ldr	r2, [r4, #16]
 80068c2:	1a98      	subs	r0, r3, r2
 80068c4:	6963      	ldr	r3, [r4, #20]
 80068c6:	b2f6      	uxtb	r6, r6
 80068c8:	4283      	cmp	r3, r0
 80068ca:	4637      	mov	r7, r6
 80068cc:	dc05      	bgt.n	80068da <__swbuf_r+0x4e>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f7ff ffb3 	bl	800683c <_fflush_r>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d1ed      	bne.n	80068b6 <__swbuf_r+0x2a>
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	3b01      	subs	r3, #1
 80068de:	60a3      	str	r3, [r4, #8]
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	701e      	strb	r6, [r3, #0]
 80068e8:	6962      	ldr	r2, [r4, #20]
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d004      	beq.n	80068fa <__swbuf_r+0x6e>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	07db      	lsls	r3, r3, #31
 80068f4:	d5e1      	bpl.n	80068ba <__swbuf_r+0x2e>
 80068f6:	2e0a      	cmp	r6, #10
 80068f8:	d1df      	bne.n	80068ba <__swbuf_r+0x2e>
 80068fa:	4621      	mov	r1, r4
 80068fc:	4628      	mov	r0, r5
 80068fe:	f7ff ff9d 	bl	800683c <_fflush_r>
 8006902:	2800      	cmp	r0, #0
 8006904:	d0d9      	beq.n	80068ba <__swbuf_r+0x2e>
 8006906:	e7d6      	b.n	80068b6 <__swbuf_r+0x2a>

08006908 <__swsetup_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4b29      	ldr	r3, [pc, #164]	@ (80069b0 <__swsetup_r+0xa8>)
 800690c:	4605      	mov	r5, r0
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	460c      	mov	r4, r1
 8006912:	b118      	cbz	r0, 800691c <__swsetup_r+0x14>
 8006914:	6a03      	ldr	r3, [r0, #32]
 8006916:	b90b      	cbnz	r3, 800691c <__swsetup_r+0x14>
 8006918:	f7ff f9d2 	bl	8005cc0 <__sinit>
 800691c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006920:	0719      	lsls	r1, r3, #28
 8006922:	d422      	bmi.n	800696a <__swsetup_r+0x62>
 8006924:	06da      	lsls	r2, r3, #27
 8006926:	d407      	bmi.n	8006938 <__swsetup_r+0x30>
 8006928:	2209      	movs	r2, #9
 800692a:	602a      	str	r2, [r5, #0]
 800692c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	e033      	b.n	80069a0 <__swsetup_r+0x98>
 8006938:	0758      	lsls	r0, r3, #29
 800693a:	d512      	bpl.n	8006962 <__swsetup_r+0x5a>
 800693c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800693e:	b141      	cbz	r1, 8006952 <__swsetup_r+0x4a>
 8006940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006944:	4299      	cmp	r1, r3
 8006946:	d002      	beq.n	800694e <__swsetup_r+0x46>
 8006948:	4628      	mov	r0, r5
 800694a:	f7ff fb2d 	bl	8005fa8 <_free_r>
 800694e:	2300      	movs	r3, #0
 8006950:	6363      	str	r3, [r4, #52]	@ 0x34
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	2300      	movs	r3, #0
 800695c:	6063      	str	r3, [r4, #4]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f043 0308 	orr.w	r3, r3, #8
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	b94b      	cbnz	r3, 8006982 <__swsetup_r+0x7a>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006978:	d003      	beq.n	8006982 <__swsetup_r+0x7a>
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f000 f84f 	bl	8006a20 <__smakebuf_r>
 8006982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006986:	f013 0201 	ands.w	r2, r3, #1
 800698a:	d00a      	beq.n	80069a2 <__swsetup_r+0x9a>
 800698c:	2200      	movs	r2, #0
 800698e:	60a2      	str	r2, [r4, #8]
 8006990:	6962      	ldr	r2, [r4, #20]
 8006992:	4252      	negs	r2, r2
 8006994:	61a2      	str	r2, [r4, #24]
 8006996:	6922      	ldr	r2, [r4, #16]
 8006998:	b942      	cbnz	r2, 80069ac <__swsetup_r+0xa4>
 800699a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800699e:	d1c5      	bne.n	800692c <__swsetup_r+0x24>
 80069a0:	bd38      	pop	{r3, r4, r5, pc}
 80069a2:	0799      	lsls	r1, r3, #30
 80069a4:	bf58      	it	pl
 80069a6:	6962      	ldrpl	r2, [r4, #20]
 80069a8:	60a2      	str	r2, [r4, #8]
 80069aa:	e7f4      	b.n	8006996 <__swsetup_r+0x8e>
 80069ac:	2000      	movs	r0, #0
 80069ae:	e7f7      	b.n	80069a0 <__swsetup_r+0x98>
 80069b0:	2000001c 	.word	0x2000001c

080069b4 <_sbrk_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d06      	ldr	r5, [pc, #24]	@ (80069d0 <_sbrk_r+0x1c>)
 80069b8:	2300      	movs	r3, #0
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	f7fa f9c2 	bl	8000d48 <_sbrk>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_sbrk_r+0x1a>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_sbrk_r+0x1a>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	20004c60 	.word	0x20004c60

080069d4 <__swhatbuf_r>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	460c      	mov	r4, r1
 80069d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069dc:	2900      	cmp	r1, #0
 80069de:	b096      	sub	sp, #88	@ 0x58
 80069e0:	4615      	mov	r5, r2
 80069e2:	461e      	mov	r6, r3
 80069e4:	da0d      	bge.n	8006a02 <__swhatbuf_r+0x2e>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	bf14      	ite	ne
 80069f2:	2340      	movne	r3, #64	@ 0x40
 80069f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069f8:	2000      	movs	r0, #0
 80069fa:	6031      	str	r1, [r6, #0]
 80069fc:	602b      	str	r3, [r5, #0]
 80069fe:	b016      	add	sp, #88	@ 0x58
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
 8006a02:	466a      	mov	r2, sp
 8006a04:	f000 f848 	bl	8006a98 <_fstat_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	dbec      	blt.n	80069e6 <__swhatbuf_r+0x12>
 8006a0c:	9901      	ldr	r1, [sp, #4]
 8006a0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a16:	4259      	negs	r1, r3
 8006a18:	4159      	adcs	r1, r3
 8006a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a1e:	e7eb      	b.n	80069f8 <__swhatbuf_r+0x24>

08006a20 <__smakebuf_r>:
 8006a20:	898b      	ldrh	r3, [r1, #12]
 8006a22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a24:	079d      	lsls	r5, r3, #30
 8006a26:	4606      	mov	r6, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	d507      	bpl.n	8006a3c <__smakebuf_r+0x1c>
 8006a2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	2301      	movs	r3, #1
 8006a36:	6163      	str	r3, [r4, #20]
 8006a38:	b003      	add	sp, #12
 8006a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a3c:	ab01      	add	r3, sp, #4
 8006a3e:	466a      	mov	r2, sp
 8006a40:	f7ff ffc8 	bl	80069d4 <__swhatbuf_r>
 8006a44:	9f00      	ldr	r7, [sp, #0]
 8006a46:	4605      	mov	r5, r0
 8006a48:	4639      	mov	r1, r7
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7ff fb18 	bl	8006080 <_malloc_r>
 8006a50:	b948      	cbnz	r0, 8006a66 <__smakebuf_r+0x46>
 8006a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a56:	059a      	lsls	r2, r3, #22
 8006a58:	d4ee      	bmi.n	8006a38 <__smakebuf_r+0x18>
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	f043 0302 	orr.w	r3, r3, #2
 8006a62:	81a3      	strh	r3, [r4, #12]
 8006a64:	e7e2      	b.n	8006a2c <__smakebuf_r+0xc>
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	6020      	str	r0, [r4, #0]
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a76:	b15b      	cbz	r3, 8006a90 <__smakebuf_r+0x70>
 8006a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f000 f81d 	bl	8006abc <_isatty_r>
 8006a82:	b128      	cbz	r0, 8006a90 <__smakebuf_r+0x70>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f023 0303 	bic.w	r3, r3, #3
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	431d      	orrs	r5, r3
 8006a94:	81a5      	strh	r5, [r4, #12]
 8006a96:	e7cf      	b.n	8006a38 <__smakebuf_r+0x18>

08006a98 <_fstat_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d07      	ldr	r5, [pc, #28]	@ (8006ab8 <_fstat_r+0x20>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	602b      	str	r3, [r5, #0]
 8006aa6:	f7fa f926 	bl	8000cf6 <_fstat>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d102      	bne.n	8006ab4 <_fstat_r+0x1c>
 8006aae:	682b      	ldr	r3, [r5, #0]
 8006ab0:	b103      	cbz	r3, 8006ab4 <_fstat_r+0x1c>
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20004c60 	.word	0x20004c60

08006abc <_isatty_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d06      	ldr	r5, [pc, #24]	@ (8006ad8 <_isatty_r+0x1c>)
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f7fa f925 	bl	8000d16 <_isatty>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_isatty_r+0x1a>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_isatty_r+0x1a>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20004c60 	.word	0x20004c60

08006adc <_init>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	bf00      	nop
 8006ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae2:	bc08      	pop	{r3}
 8006ae4:	469e      	mov	lr, r3
 8006ae6:	4770      	bx	lr

08006ae8 <_fini>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	bf00      	nop
 8006aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aee:	bc08      	pop	{r3}
 8006af0:	469e      	mov	lr, r3
 8006af2:	4770      	bx	lr
