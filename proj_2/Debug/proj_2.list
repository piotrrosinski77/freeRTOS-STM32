
proj_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e04  08005e04  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e0c  08005e0c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e0c  08005e0c  00006e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005e14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  2000006c  08005e80  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c60  08005e80  00007c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181e1  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cd  00000000  00000000  0001f27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00022750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff3  00000000  00000000  00023be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004173  00000000  00000000  00024bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e79  00000000  00000000  00028d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8f1  00000000  00000000  0003ebbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d94b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf0  00000000  00000000  000d94f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000df1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cf8 	.word	0x08005cf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005cf8 	.word	0x08005cf8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000514:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000518:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	2b00      	cmp	r3, #0
 8000522:	d013      	beq.n	800054c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000524:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000528:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800052c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00b      	beq.n	800054c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000534:	e000      	b.n	8000538 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000536:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000538:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f9      	beq.n	8000536 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000542:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	ITM_SendChar(chr);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffd1 	bl	800050c <ITM_SendChar>
	return 1;
 800056a:	2301      	movs	r3, #1
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fb5a 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f838 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8c8 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f89c 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000588:	f002 f83e 	bl	8002608 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of adcQueue01 */
  adcQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &adcQueue01_attributes);
 800058c:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <main+0x58>)
 800058e:	2102      	movs	r1, #2
 8000590:	2010      	movs	r0, #16
 8000592:	f002 f930 	bl	80027f6 <osMessageQueueNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <main+0x5c>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(StartConsumerTask, NULL, &ConsumerTask_attributes);
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <main+0x60>)
 800059e:	2100      	movs	r1, #0
 80005a0:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <main+0x64>)
 80005a2:	f002 f87b 	bl	800269c <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0c      	ldr	r2, [pc, #48]	@ (80005dc <main+0x68>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of ProducerTask */
  ProducerTaskHandle = osThreadNew(StartProducerTask, NULL, &ProducerTask_attributes);
 80005ac:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <main+0x6c>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <main+0x70>)
 80005b2:	f002 f873 	bl	800269c <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <main+0x74>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  printf("osKernelStart()\n");
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <main+0x78>)
 80005be:	f004 ff9b 	bl	80054f8 <puts>
  osKernelStart();
 80005c2:	f002 f845 	bl	8002650 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <main+0x52>
 80005ca:	bf00      	nop
 80005cc:	08005dd4 	.word	0x08005dd4
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	08005d8c 	.word	0x08005d8c
 80005d8:	080007c9 	.word	0x080007c9
 80005dc:	200000d0 	.word	0x200000d0
 80005e0:	08005db0 	.word	0x08005db0
 80005e4:	080007e9 	.word	0x080007e9
 80005e8:	200000d4 	.word	0x200000d4
 80005ec:	08005d3c 	.word	0x08005d3c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 f85a 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <SystemClock_Config+0xc8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a26      	ldr	r2, [pc, #152]	@ (80006b8 <SystemClock_Config+0xc8>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <SystemClock_Config+0xc8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <SystemClock_Config+0xcc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <SystemClock_Config+0xcc>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000664:	2354      	movs	r3, #84	@ 0x54
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fdc1 	bl	80011fc <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f8d4 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f823 	bl	80016ec <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ac:	f000 f8be 	bl	800082c <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f001 fc7e 	bl	8001ff8 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f893 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000088 	.word	0x20000088
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a23      	ldr	r2, [pc, #140]	@ (80007c0 <MX_GPIO_Init+0xac>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <MX_GPIO_Init+0xac>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <MX_GPIO_Init+0xac>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_GPIO_Init+0xac>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000768:	4816      	ldr	r0, [pc, #88]	@ (80007c4 <MX_GPIO_Init+0xb0>)
 800076a:	f000 fd09 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <MX_GPIO_Init+0xb0>)
 8000784:	f000 fb78 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4808      	ldr	r0, [pc, #32]	@ (80007c4 <MX_GPIO_Init+0xb0>)
 80007a2:	f000 fb69 	bl	8000e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2105      	movs	r1, #5
 80007aa:	2006      	movs	r0, #6
 80007ac:	f000 fb3a 	bl	8000e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007b0:	2006      	movs	r0, #6
 80007b2:	f000 fb53 	bl	8000e5c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000

080007c8 <StartConsumerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartConsumerTask */
void StartConsumerTask(void *argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("ConsumerTask Start\r\n");
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <StartConsumerTask+0x1c>)
 80007d2:	f004 fe91 	bl	80054f8 <puts>
    osDelay(1000);
 80007d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007da:	f001 fff1 	bl	80027c0 <osDelay>
	printf("ConsumerTask Start\r\n");
 80007de:	bf00      	nop
 80007e0:	e7f6      	b.n	80007d0 <StartConsumerTask+0x8>
 80007e2:	bf00      	nop
 80007e4:	08005d4c 	.word	0x08005d4c

080007e8 <StartProducerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProducerTask */
  /* Infinite loop */
  for(;;)
  {
	printf("ProcuderTask Start\r\n");
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <StartProducerTask+0x1c>)
 80007f2:	f004 fe81 	bl	80054f8 <puts>
    osDelay(1000);
 80007f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fa:	f001 ffe1 	bl	80027c0 <osDelay>
	printf("ProcuderTask Start\r\n");
 80007fe:	bf00      	nop
 8000800:	e7f6      	b.n	80007f0 <StartProducerTask+0x8>
 8000802:	bf00      	nop
 8000804:	08005d60 	.word	0x08005d60

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800081a:	f000 fa2b 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40000c00 	.word	0x40000c00

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_MspInit+0x54>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a11      	ldr	r2, [pc, #68]	@ (800088c <HAL_MspInit+0x54>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_MspInit+0x54>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <HAL_MspInit+0x54>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	@ 0x40
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	210f      	movs	r1, #15
 800087a:	f06f 0001 	mvn.w	r0, #1
 800087e:	f000 fad1 	bl	8000e24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a19      	ldr	r2, [pc, #100]	@ (8000914 <HAL_UART_MspInit+0x84>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d12b      	bne.n	800090a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a10      	ldr	r2, [pc, #64]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ea:	230c      	movs	r3, #12
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fa:	2307      	movs	r3, #7
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <HAL_UART_MspInit+0x8c>)
 8000906:	f000 fab7 	bl	8000e78 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40004400 	.word	0x40004400
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	@ 0x38
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	4b33      	ldr	r3, [pc, #204]	@ (8000a04 <HAL_InitTick+0xe4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	4a32      	ldr	r2, [pc, #200]	@ (8000a04 <HAL_InitTick+0xe4>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <HAL_InitTick+0xe4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f8a8 	bl	8001aac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000962:	2b00      	cmp	r3, #0
 8000964:	d103      	bne.n	800096e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000966:	f001 f879 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 800096a:	6378      	str	r0, [r7, #52]	@ 0x34
 800096c:	e004      	b.n	8000978 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800096e:	f001 f875 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8000972:	4603      	mov	r3, r0
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800097a:	4a23      	ldr	r2, [pc, #140]	@ (8000a08 <HAL_InitTick+0xe8>)
 800097c:	fba2 2303 	umull	r2, r3, r2, r3
 8000980:	0c9b      	lsrs	r3, r3, #18
 8000982:	3b01      	subs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <HAL_InitTick+0xec>)
 8000988:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <HAL_InitTick+0xf0>)
 800098a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <HAL_InitTick+0xec>)
 800098e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000992:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000994:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <HAL_InitTick+0xec>)
 8000996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000998:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <HAL_InitTick+0xec>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_InitTick+0xec>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_InitTick+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80009ac:	4817      	ldr	r0, [pc, #92]	@ (8000a0c <HAL_InitTick+0xec>)
 80009ae:	f001 f8af 	bl	8001b10 <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d11b      	bne.n	80009f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80009c0:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <HAL_InitTick+0xec>)
 80009c2:	f001 f8ff 	bl	8001bc4 <HAL_TIM_Base_Start_IT>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d111      	bne.n	80009f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80009d4:	2032      	movs	r0, #50	@ 0x32
 80009d6:	f000 fa41 	bl	8000e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d808      	bhi.n	80009f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	2032      	movs	r0, #50	@ 0x32
 80009e6:	f000 fa1d 	bl	8000e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_InitTick+0xf4>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e002      	b.n	80009f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3738      	adds	r7, #56	@ 0x38
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	200000dc 	.word	0x200000dc
 8000a10:	40000c00 	.word	0x40000c00
 8000a14:	20000004 	.word	0x20000004

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f000 fbae 	bl	80011b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM5_IRQHandler+0x10>)
 8000a62:	f001 f911 	bl	8001c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000dc 	.word	0x200000dc

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fd48 	bl	800055a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f004 fe48 	bl	8005810 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20000124 	.word	0x20000124
 8000bb4:	20004c60 	.word	0x20004c60

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f004 fe07 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fcb1 	bl	8000574 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c20:	08005e14 	.word	0x08005e14
  ldr r2, =_sbss
 8000c24:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c28:	20004c60 	.word	0x20004c60

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f8d8 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f7ff fe5e 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fde8 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000128 	.word	0x20000128

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000128 	.word	0x20000128

08000cb4 <__NVIC_SetPriorityGrouping>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e159      	b.n	8001148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8148 	bne.w	8001142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d005      	beq.n	8000eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d130      	bne.n	8000f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d017      	beq.n	8000f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80a2 	beq.w	8001142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <HAL_GPIO_Init+0x2e8>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a56      	ldr	r2, [pc, #344]	@ (8001160 <HAL_GPIO_Init+0x2e8>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b54      	ldr	r3, [pc, #336]	@ (8001160 <HAL_GPIO_Init+0x2e8>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101a:	4a52      	ldr	r2, [pc, #328]	@ (8001164 <HAL_GPIO_Init+0x2ec>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a49      	ldr	r2, [pc, #292]	@ (8001168 <HAL_GPIO_Init+0x2f0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x202>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a48      	ldr	r2, [pc, #288]	@ (800116c <HAL_GPIO_Init+0x2f4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x1fe>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a47      	ldr	r2, [pc, #284]	@ (8001170 <HAL_GPIO_Init+0x2f8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x1fa>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a46      	ldr	r2, [pc, #280]	@ (8001174 <HAL_GPIO_Init+0x2fc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x1f6>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a45      	ldr	r2, [pc, #276]	@ (8001178 <HAL_GPIO_Init+0x300>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x1f2>
 8001066:	2304      	movs	r3, #4
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x204>
 800106a:	2307      	movs	r3, #7
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x204>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x204>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x204>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x204>
 800107a:	2300      	movs	r3, #0
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	4935      	ldr	r1, [pc, #212]	@ (8001164 <HAL_GPIO_Init+0x2ec>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109a:	4b38      	ldr	r3, [pc, #224]	@ (800117c <HAL_GPIO_Init+0x304>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010be:	4a2f      	ldr	r2, [pc, #188]	@ (800117c <HAL_GPIO_Init+0x304>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c4:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <HAL_GPIO_Init+0x304>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e8:	4a24      	ldr	r2, [pc, #144]	@ (800117c <HAL_GPIO_Init+0x304>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ee:	4b23      	ldr	r3, [pc, #140]	@ (800117c <HAL_GPIO_Init+0x304>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001112:	4a1a      	ldr	r2, [pc, #104]	@ (800117c <HAL_GPIO_Init+0x304>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_GPIO_Init+0x304>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113c:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <HAL_GPIO_Init+0x304>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	f67f aea2 	bls.w	8000e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3724      	adds	r7, #36	@ 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40013800 	.word	0x40013800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f806 	bl	80011e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e267      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d075      	beq.n	8001306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800121a:	4b88      	ldr	r3, [pc, #544]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b04      	cmp	r3, #4
 8001224:	d00c      	beq.n	8001240 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b85      	ldr	r3, [pc, #532]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800122e:	2b08      	cmp	r3, #8
 8001230:	d112      	bne.n	8001258 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4b82      	ldr	r3, [pc, #520]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800123e:	d10b      	bne.n	8001258 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4b7e      	ldr	r3, [pc, #504]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d05b      	beq.n	8001304 <HAL_RCC_OscConfig+0x108>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d157      	bne.n	8001304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e242      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x74>
 8001262:	4b76      	ldr	r3, [pc, #472]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a75      	ldr	r2, [pc, #468]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e01d      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x98>
 800127a:	4b70      	ldr	r3, [pc, #448]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6f      	ldr	r2, [pc, #444]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b6d      	ldr	r3, [pc, #436]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6c      	ldr	r2, [pc, #432]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001294:	4b69      	ldr	r3, [pc, #420]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a68      	ldr	r2, [pc, #416]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b66      	ldr	r3, [pc, #408]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a65      	ldr	r2, [pc, #404]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fcf2 	bl	8000c9c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fcee 	bl	8000c9c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	@ 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e207      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b5b      	ldr	r3, [pc, #364]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0xc0>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fcde 	bl	8000c9c <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fcda 	bl	8000c9c <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	@ 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1f3      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	4b51      	ldr	r3, [pc, #324]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0xe8>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d063      	beq.n	80013da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001312:	4b4a      	ldr	r3, [pc, #296]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b47      	ldr	r3, [pc, #284]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001326:	2b08      	cmp	r3, #8
 8001328:	d11c      	bne.n	8001364 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b44      	ldr	r3, [pc, #272]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d116      	bne.n	8001364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	4b41      	ldr	r3, [pc, #260]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x152>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e1c7      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	4b3b      	ldr	r3, [pc, #236]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4937      	ldr	r1, [pc, #220]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	e03a      	b.n	80013da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136c:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <HAL_RCC_OscConfig+0x244>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fc93 	bl	8000c9c <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fc8f 	bl	8000c9c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1a8      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	4b2b      	ldr	r3, [pc, #172]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4925      	ldr	r1, [pc, #148]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
 80013ac:	e015      	b.n	80013da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_RCC_OscConfig+0x244>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc72 	bl	8000c9c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff fc6e 	bl	8000c9c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e187      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d036      	beq.n	8001454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d016      	beq.n	800141c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_RCC_OscConfig+0x248>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fc52 	bl	8000c9c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc4e 	bl	8000c9c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e167      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_RCC_OscConfig+0x240>)
 8001410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x200>
 800141a:	e01b      	b.n	8001454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_RCC_OscConfig+0x248>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc3b 	bl	8000c9c <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	e00e      	b.n	8001448 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142a:	f7ff fc37 	bl	8000c9c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d907      	bls.n	8001448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e150      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
 800143c:	40023800 	.word	0x40023800
 8001440:	42470000 	.word	0x42470000
 8001444:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b88      	ldr	r3, [pc, #544]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 800144a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ea      	bne.n	800142a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8097 	beq.w	8001590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4b81      	ldr	r3, [pc, #516]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b7d      	ldr	r3, [pc, #500]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a7c      	ldr	r2, [pc, #496]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b7a      	ldr	r3, [pc, #488]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b77      	ldr	r3, [pc, #476]	@ (8001670 <HAL_RCC_OscConfig+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d118      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149e:	4b74      	ldr	r3, [pc, #464]	@ (8001670 <HAL_RCC_OscConfig+0x474>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a73      	ldr	r2, [pc, #460]	@ (8001670 <HAL_RCC_OscConfig+0x474>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fbf7 	bl	8000c9c <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b2:	f7ff fbf3 	bl	8000c9c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e10c      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001670 <HAL_RCC_OscConfig+0x474>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2ea>
 80014d8:	4b64      	ldr	r3, [pc, #400]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014dc:	4a63      	ldr	r2, [pc, #396]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e4:	e01c      	b.n	8001520 <HAL_RCC_OscConfig+0x324>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x30c>
 80014ee:	4b5f      	ldr	r3, [pc, #380]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f2:	4a5e      	ldr	r2, [pc, #376]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fa:	4b5c      	ldr	r3, [pc, #368]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fe:	4a5b      	ldr	r2, [pc, #364]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6713      	str	r3, [r2, #112]	@ 0x70
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0x324>
 8001508:	4b58      	ldr	r3, [pc, #352]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150c:	4a57      	ldr	r2, [pc, #348]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6713      	str	r3, [r2, #112]	@ 0x70
 8001514:	4b55      	ldr	r3, [pc, #340]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001518:	4a54      	ldr	r2, [pc, #336]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d015      	beq.n	8001554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff fbb8 	bl	8000c9c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fbb4 	bl	8000c9c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0cb      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001546:	4b49      	ldr	r3, [pc, #292]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0ee      	beq.n	8001530 <HAL_RCC_OscConfig+0x334>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fba2 	bl	8000c9c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fb9e 	bl	8000c9c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0b5      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001572:	4b3e      	ldr	r3, [pc, #248]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ee      	bne.n	800155c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4b39      	ldr	r3, [pc, #228]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	4a38      	ldr	r2, [pc, #224]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 800158a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a1 	beq.w	80016dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159a:	4b34      	ldr	r3, [pc, #208]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d05c      	beq.n	8001660 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d141      	bne.n	8001632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <HAL_RCC_OscConfig+0x478>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb72 	bl	8000c9c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fb6e 	bl	8000c9c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e087      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	3b01      	subs	r3, #1
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	491b      	ldr	r1, [pc, #108]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_RCC_OscConfig+0x478>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fb47 	bl	8000c9c <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fb43 	bl	8000c9c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e05c      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x416>
 8001630:	e054      	b.n	80016dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <HAL_RCC_OscConfig+0x478>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fb30 	bl	8000c9c <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fb2c 	bl	8000c9c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e045      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_RCC_OscConfig+0x470>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x444>
 800165e:	e03d      	b.n	80016dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d107      	bne.n	8001678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e038      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000
 8001674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x4ec>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d028      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d121      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d11a      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016a8:	4013      	ands	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d111      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	3b01      	subs	r3, #1
 80016c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0cc      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b68      	ldr	r3, [pc, #416]	@ (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d90c      	bls.n	8001728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b65      	ldr	r3, [pc, #404]	@ (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b63      	ldr	r3, [pc, #396]	@ (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b8      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001740:	4b59      	ldr	r3, [pc, #356]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a58      	ldr	r2, [pc, #352]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800174a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001758:	4b53      	ldr	r3, [pc, #332]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4a52      	ldr	r2, [pc, #328]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b50      	ldr	r3, [pc, #320]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	494d      	ldr	r1, [pc, #308]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d044      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d119      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3b      	ldr	r3, [pc, #236]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e067      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4934      	ldr	r1, [pc, #208]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fa5e 	bl	8000c9c <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff fa5a 	bl	8000c9c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e04f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d20c      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b20      	ldr	r3, [pc, #128]	@ (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e032      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4916      	ldr	r1, [pc, #88]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	490e      	ldr	r1, [pc, #56]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001872:	f000 f821 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	490a      	ldr	r1, [pc, #40]	@ (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	4a09      	ldr	r2, [pc, #36]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f844 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08005dec 	.word	0x08005dec
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018bc:	b090      	sub	sp, #64	@ 0x40
 80018be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d0:	4b59      	ldr	r3, [pc, #356]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d00d      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x40>
 80018dc:	2b08      	cmp	r3, #8
 80018de:	f200 80a1 	bhi.w	8001a24 <HAL_RCC_GetSysClockFreq+0x16c>
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x34>
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ea:	e09b      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b53      	ldr	r3, [pc, #332]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x184>)
 80018ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018f0:	e09b      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018f6:	e098      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001902:	4b4d      	ldr	r3, [pc, #308]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d028      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	2200      	movs	r2, #0
 8001916:	623b      	str	r3, [r7, #32]
 8001918:	627a      	str	r2, [r7, #36]	@ 0x24
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001920:	2100      	movs	r1, #0
 8001922:	4b47      	ldr	r3, [pc, #284]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001924:	fb03 f201 	mul.w	r2, r3, r1
 8001928:	2300      	movs	r3, #0
 800192a:	fb00 f303 	mul.w	r3, r0, r3
 800192e:	4413      	add	r3, r2
 8001930:	4a43      	ldr	r2, [pc, #268]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001932:	fba0 1202 	umull	r1, r2, r0, r2
 8001936:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001938:	460a      	mov	r2, r1
 800193a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800193c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800193e:	4413      	add	r3, r2
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001944:	2200      	movs	r2, #0
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	61fa      	str	r2, [r7, #28]
 800194a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800194e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001952:	f7fe fc45 	bl	80001e0 <__aeabi_uldivmod>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4613      	mov	r3, r2
 800195c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800195e:	e053      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001960:	4b35      	ldr	r3, [pc, #212]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	2200      	movs	r2, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	617a      	str	r2, [r7, #20]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001972:	f04f 0b00 	mov.w	fp, #0
 8001976:	4652      	mov	r2, sl
 8001978:	465b      	mov	r3, fp
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	0159      	lsls	r1, r3, #5
 8001984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001988:	0150      	lsls	r0, r2, #5
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	ebb2 080a 	subs.w	r8, r2, sl
 8001992:	eb63 090b 	sbc.w	r9, r3, fp
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019aa:	ebb2 0408 	subs.w	r4, r2, r8
 80019ae:	eb63 0509 	sbc.w	r5, r3, r9
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	00eb      	lsls	r3, r5, #3
 80019bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c0:	00e2      	lsls	r2, r4, #3
 80019c2:	4614      	mov	r4, r2
 80019c4:	461d      	mov	r5, r3
 80019c6:	eb14 030a 	adds.w	r3, r4, sl
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	eb45 030b 	adc.w	r3, r5, fp
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019de:	4629      	mov	r1, r5
 80019e0:	028b      	lsls	r3, r1, #10
 80019e2:	4621      	mov	r1, r4
 80019e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e8:	4621      	mov	r1, r4
 80019ea:	028a      	lsls	r2, r1, #10
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f2:	2200      	movs	r2, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	60fa      	str	r2, [r7, #12]
 80019f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019fc:	f7fe fbf0 	bl	80001e0 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3740      	adds	r7, #64	@ 0x40
 8001a30:	46bd      	mov	sp, r7
 8001a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	00f42400 	.word	0x00f42400
 8001a40:	017d7840 	.word	0x017d7840

08001a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a60:	f7ff fff0 	bl	8001a44 <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	0a9b      	lsrs	r3, r3, #10
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4903      	ldr	r1, [pc, #12]	@ (8001a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08005dfc 	.word	0x08005dfc

08001a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a88:	f7ff ffdc 	bl	8001a44 <HAL_RCC_GetHCLKFreq>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	0b5b      	lsrs	r3, r3, #13
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	4903      	ldr	r1, [pc, #12]	@ (8001aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9a:	5ccb      	ldrb	r3, [r1, r3]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	08005dfc 	.word	0x08005dfc

08001aac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	220f      	movs	r2, #15
 8001aba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_RCC_GetClockConfig+0x5c>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0203 	and.w	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <HAL_RCC_GetClockConfig+0x5c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	08db      	lsrs	r3, r3, #3
 8001ae6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_RCC_GetClockConfig+0x60>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0207 	and.w	r2, r3, #7
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40023c00 	.word	0x40023c00

08001b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e041      	b.n	8001ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f839 	bl	8001bae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f000 f9b2 	bl	8001eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e044      	b.n	8001c66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d018      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x6c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c06:	d013      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x6c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00e      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x6c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a19      	ldr	r2, [pc, #100]	@ (8001c7c <HAL_TIM_Base_Start_IT+0xb8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x6c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d111      	bne.n	8001c54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d010      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c52:	e007      	b.n	8001c64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	40000c00 	.word	0x40000c00
 8001c84:	40014000 	.word	0x40014000

08001c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d020      	beq.n	8001cec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01b      	beq.n	8001cec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0202 	mvn.w	r2, #2
 8001cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8d2 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8c4 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8d5 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d020      	beq.n	8001d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0204 	mvn.w	r2, #4
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8ac 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f89e 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8af 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d020      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0208 	mvn.w	r2, #8
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f886 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f878 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f889 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0210 	mvn.w	r2, #16
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2208      	movs	r2, #8
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f860 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f852 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f863 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00c      	beq.n	8001df4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0201 	mvn.w	r2, #1
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fd0a 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00c      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8e6 	bl	8001fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f834 	bl	8001ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0220 	mvn.w	r2, #32
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8b8 	bl	8001fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb4 <TIM_Base_SetConfig+0xfc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00f      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed6:	d00b      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a37      	ldr	r2, [pc, #220]	@ (8001fb8 <TIM_Base_SetConfig+0x100>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a36      	ldr	r2, [pc, #216]	@ (8001fbc <TIM_Base_SetConfig+0x104>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d003      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a35      	ldr	r2, [pc, #212]	@ (8001fc0 <TIM_Base_SetConfig+0x108>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb4 <TIM_Base_SetConfig+0xfc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01b      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f10:	d017      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <TIM_Base_SetConfig+0x100>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a27      	ldr	r2, [pc, #156]	@ (8001fbc <TIM_Base_SetConfig+0x104>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00f      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a26      	ldr	r2, [pc, #152]	@ (8001fc0 <TIM_Base_SetConfig+0x108>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	@ (8001fc4 <TIM_Base_SetConfig+0x10c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <TIM_Base_SetConfig+0x110>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d003      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <TIM_Base_SetConfig+0x114>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d108      	bne.n	8001f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb4 <TIM_Base_SetConfig+0xfc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f023 0201 	bic.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40014400 	.word	0x40014400
 8001fcc:	40014800 	.word	0x40014800

08001fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e042      	b.n	8002090 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fc36 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	@ 0x24
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800203a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f82b 	bl	8002098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800209c:	b0c0      	sub	sp, #256	@ 0x100
 800209e:	af00      	add	r7, sp, #0
 80020a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	ea40 0301 	orr.w	r3, r0, r1
 80020c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80020f0:	f021 010c 	bic.w	r1, r1, #12
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80020fe:	430b      	orrs	r3, r1
 8002100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002112:	6999      	ldr	r1, [r3, #24]
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	ea40 0301 	orr.w	r3, r0, r1
 800211e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b8f      	ldr	r3, [pc, #572]	@ (8002364 <UART_SetConfig+0x2cc>)
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <UART_SetConfig+0xa0>
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b8d      	ldr	r3, [pc, #564]	@ (8002368 <UART_SetConfig+0x2d0>)
 8002134:	429a      	cmp	r2, r3
 8002136:	d104      	bne.n	8002142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002138:	f7ff fca4 	bl	8001a84 <HAL_RCC_GetPCLK2Freq>
 800213c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002140:	e003      	b.n	800214a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002142:	f7ff fc8b 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002146:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800214a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002154:	f040 810c 	bne.w	8002370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800215c:	2200      	movs	r2, #0
 800215e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002162:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
 800216e:	1891      	adds	r1, r2, r2
 8002170:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002172:	415b      	adcs	r3, r3
 8002174:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800217a:	4621      	mov	r1, r4
 800217c:	eb12 0801 	adds.w	r8, r2, r1
 8002180:	4629      	mov	r1, r5
 8002182:	eb43 0901 	adc.w	r9, r3, r1
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	4623      	mov	r3, r4
 80021a0:	eb18 0303 	adds.w	r3, r8, r3
 80021a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021a8:	462b      	mov	r3, r5
 80021aa:	eb49 0303 	adc.w	r3, r9, r3
 80021ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80021be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80021c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80021c6:	460b      	mov	r3, r1
 80021c8:	18db      	adds	r3, r3, r3
 80021ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80021cc:	4613      	mov	r3, r2
 80021ce:	eb42 0303 	adc.w	r3, r2, r3
 80021d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80021d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021dc:	f7fe f800 	bl	80001e0 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4b61      	ldr	r3, [pc, #388]	@ (800236c <UART_SetConfig+0x2d4>)
 80021e6:	fba3 2302 	umull	r2, r3, r3, r2
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	011c      	lsls	r4, r3, #4
 80021ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80021fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002200:	4642      	mov	r2, r8
 8002202:	464b      	mov	r3, r9
 8002204:	1891      	adds	r1, r2, r2
 8002206:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002208:	415b      	adcs	r3, r3
 800220a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800220c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002210:	4641      	mov	r1, r8
 8002212:	eb12 0a01 	adds.w	sl, r2, r1
 8002216:	4649      	mov	r1, r9
 8002218:	eb43 0b01 	adc.w	fp, r3, r1
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800222c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002230:	4692      	mov	sl, r2
 8002232:	469b      	mov	fp, r3
 8002234:	4643      	mov	r3, r8
 8002236:	eb1a 0303 	adds.w	r3, sl, r3
 800223a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800223e:	464b      	mov	r3, r9
 8002240:	eb4b 0303 	adc.w	r3, fp, r3
 8002244:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002254:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800225c:	460b      	mov	r3, r1
 800225e:	18db      	adds	r3, r3, r3
 8002260:	643b      	str	r3, [r7, #64]	@ 0x40
 8002262:	4613      	mov	r3, r2
 8002264:	eb42 0303 	adc.w	r3, r2, r3
 8002268:	647b      	str	r3, [r7, #68]	@ 0x44
 800226a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800226e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002272:	f7fd ffb5 	bl	80001e0 <__aeabi_uldivmod>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4611      	mov	r1, r2
 800227c:	4b3b      	ldr	r3, [pc, #236]	@ (800236c <UART_SetConfig+0x2d4>)
 800227e:	fba3 2301 	umull	r2, r3, r3, r1
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2264      	movs	r2, #100	@ 0x64
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	1acb      	subs	r3, r1, r3
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002292:	4b36      	ldr	r3, [pc, #216]	@ (800236c <UART_SetConfig+0x2d4>)
 8002294:	fba3 2302 	umull	r2, r3, r3, r2
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022a0:	441c      	add	r4, r3
 80022a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80022b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	1891      	adds	r1, r2, r2
 80022ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022bc:	415b      	adcs	r3, r3
 80022be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022c4:	4641      	mov	r1, r8
 80022c6:	1851      	adds	r1, r2, r1
 80022c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80022ca:	4649      	mov	r1, r9
 80022cc:	414b      	adcs	r3, r1
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80022dc:	4659      	mov	r1, fp
 80022de:	00cb      	lsls	r3, r1, #3
 80022e0:	4651      	mov	r1, sl
 80022e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e6:	4651      	mov	r1, sl
 80022e8:	00ca      	lsls	r2, r1, #3
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	4642      	mov	r2, r8
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022f8:	464b      	mov	r3, r9
 80022fa:	460a      	mov	r2, r1
 80022fc:	eb42 0303 	adc.w	r3, r2, r3
 8002300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002310:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002318:	460b      	mov	r3, r1
 800231a:	18db      	adds	r3, r3, r3
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231e:	4613      	mov	r3, r2
 8002320:	eb42 0303 	adc.w	r3, r2, r3
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800232a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800232e:	f7fd ff57 	bl	80001e0 <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <UART_SetConfig+0x2d4>)
 8002338:	fba3 1302 	umull	r1, r3, r3, r2
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	2164      	movs	r1, #100	@ 0x64
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	3332      	adds	r3, #50	@ 0x32
 800234a:	4a08      	ldr	r2, [pc, #32]	@ (800236c <UART_SetConfig+0x2d4>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	f003 0207 	and.w	r2, r3, #7
 8002356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4422      	add	r2, r4
 800235e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002360:	e106      	b.n	8002570 <UART_SetConfig+0x4d8>
 8002362:	bf00      	nop
 8002364:	40011000 	.word	0x40011000
 8002368:	40011400 	.word	0x40011400
 800236c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002374:	2200      	movs	r2, #0
 8002376:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800237a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800237e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002382:	4642      	mov	r2, r8
 8002384:	464b      	mov	r3, r9
 8002386:	1891      	adds	r1, r2, r2
 8002388:	6239      	str	r1, [r7, #32]
 800238a:	415b      	adcs	r3, r3
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
 800238e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002392:	4641      	mov	r1, r8
 8002394:	1854      	adds	r4, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb43 0501 	adc.w	r5, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	00eb      	lsls	r3, r5, #3
 80023a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023aa:	00e2      	lsls	r2, r4, #3
 80023ac:	4614      	mov	r4, r2
 80023ae:	461d      	mov	r5, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	18e3      	adds	r3, r4, r3
 80023b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023b8:	464b      	mov	r3, r9
 80023ba:	eb45 0303 	adc.w	r3, r5, r3
 80023be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023de:	4629      	mov	r1, r5
 80023e0:	008b      	lsls	r3, r1, #2
 80023e2:	4621      	mov	r1, r4
 80023e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e8:	4621      	mov	r1, r4
 80023ea:	008a      	lsls	r2, r1, #2
 80023ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80023f0:	f7fd fef6 	bl	80001e0 <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4b60      	ldr	r3, [pc, #384]	@ (800257c <UART_SetConfig+0x4e4>)
 80023fa:	fba3 2302 	umull	r2, r3, r3, r2
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	011c      	lsls	r4, r3, #4
 8002402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002406:	2200      	movs	r2, #0
 8002408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800240c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002414:	4642      	mov	r2, r8
 8002416:	464b      	mov	r3, r9
 8002418:	1891      	adds	r1, r2, r2
 800241a:	61b9      	str	r1, [r7, #24]
 800241c:	415b      	adcs	r3, r3
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002424:	4641      	mov	r1, r8
 8002426:	1851      	adds	r1, r2, r1
 8002428:	6139      	str	r1, [r7, #16]
 800242a:	4649      	mov	r1, r9
 800242c:	414b      	adcs	r3, r1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800243c:	4659      	mov	r1, fp
 800243e:	00cb      	lsls	r3, r1, #3
 8002440:	4651      	mov	r1, sl
 8002442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002446:	4651      	mov	r1, sl
 8002448:	00ca      	lsls	r2, r1, #3
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4603      	mov	r3, r0
 8002450:	4642      	mov	r2, r8
 8002452:	189b      	adds	r3, r3, r2
 8002454:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002458:	464b      	mov	r3, r9
 800245a:	460a      	mov	r2, r1
 800245c:	eb42 0303 	adc.w	r3, r2, r3
 8002460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800246e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800247c:	4649      	mov	r1, r9
 800247e:	008b      	lsls	r3, r1, #2
 8002480:	4641      	mov	r1, r8
 8002482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002486:	4641      	mov	r1, r8
 8002488:	008a      	lsls	r2, r1, #2
 800248a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800248e:	f7fd fea7 	bl	80001e0 <__aeabi_uldivmod>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4611      	mov	r1, r2
 8002498:	4b38      	ldr	r3, [pc, #224]	@ (800257c <UART_SetConfig+0x4e4>)
 800249a:	fba3 2301 	umull	r2, r3, r3, r1
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2264      	movs	r2, #100	@ 0x64
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	1acb      	subs	r3, r1, r3
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	3332      	adds	r3, #50	@ 0x32
 80024ac:	4a33      	ldr	r2, [pc, #204]	@ (800257c <UART_SetConfig+0x4e4>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b8:	441c      	add	r4, r3
 80024ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024be:	2200      	movs	r2, #0
 80024c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80024c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80024c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80024c8:	4642      	mov	r2, r8
 80024ca:	464b      	mov	r3, r9
 80024cc:	1891      	adds	r1, r2, r2
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	415b      	adcs	r3, r3
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d8:	4641      	mov	r1, r8
 80024da:	1851      	adds	r1, r2, r1
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	4649      	mov	r1, r9
 80024e0:	414b      	adcs	r3, r1
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024f0:	4659      	mov	r1, fp
 80024f2:	00cb      	lsls	r3, r1, #3
 80024f4:	4651      	mov	r1, sl
 80024f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fa:	4651      	mov	r1, sl
 80024fc:	00ca      	lsls	r2, r1, #3
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	4603      	mov	r3, r0
 8002504:	4642      	mov	r2, r8
 8002506:	189b      	adds	r3, r3, r2
 8002508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800250a:	464b      	mov	r3, r9
 800250c:	460a      	mov	r2, r1
 800250e:	eb42 0303 	adc.w	r3, r2, r3
 8002512:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	663b      	str	r3, [r7, #96]	@ 0x60
 800251e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800252c:	4649      	mov	r1, r9
 800252e:	008b      	lsls	r3, r1, #2
 8002530:	4641      	mov	r1, r8
 8002532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002536:	4641      	mov	r1, r8
 8002538:	008a      	lsls	r2, r1, #2
 800253a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800253e:	f7fd fe4f 	bl	80001e0 <__aeabi_uldivmod>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <UART_SetConfig+0x4e4>)
 8002548:	fba3 1302 	umull	r1, r3, r3, r2
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	2164      	movs	r1, #100	@ 0x64
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	3332      	adds	r3, #50	@ 0x32
 800255a:	4a08      	ldr	r2, [pc, #32]	@ (800257c <UART_SetConfig+0x4e4>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	f003 020f 	and.w	r2, r3, #15
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4422      	add	r2, r4
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002576:	46bd      	mov	sp, r7
 8002578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257c:	51eb851f 	.word	0x51eb851f

08002580 <__NVIC_SetPriority>:
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	@ (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	@ (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <SysTick_Handler+0x1c>)
 80025da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025dc:	f001 fdf4 	bl	80041c8 <xTaskGetSchedulerState>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025e6:	f002 fbef 	bl	8004dc8 <xPortSysTickHandler>
  }
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80025f8:	2100      	movs	r1, #0
 80025fa:	f06f 0004 	mvn.w	r0, #4
 80025fe:	f7ff ffbf 	bl	8002580 <__NVIC_SetPriority>
#endif
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260e:	f3ef 8305 	mrs	r3, IPSR
 8002612:	603b      	str	r3, [r7, #0]
  return(result);
 8002614:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800261a:	f06f 0305 	mvn.w	r3, #5
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	e00c      	b.n	800263c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <osKernelInitialize+0x44>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <osKernelInitialize+0x44>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	e002      	b.n	800263c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	2000012c 	.word	0x2000012c

08002650 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002656:	f3ef 8305 	mrs	r3, IPSR
 800265a:	603b      	str	r3, [r7, #0]
  return(result);
 800265c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002662:	f06f 0305 	mvn.w	r3, #5
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	e010      	b.n	800268c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <osKernelStart+0x48>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d109      	bne.n	8002686 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002672:	f7ff ffbf 	bl	80025f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <osKernelStart+0x48>)
 8002678:	2202      	movs	r2, #2
 800267a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800267c:	f001 f940 	bl	8003900 <vTaskStartScheduler>
      stat = osOK;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	e002      	b.n	800268c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800268c:	687b      	ldr	r3, [r7, #4]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000012c 	.word	0x2000012c

0800269c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	@ 0x38
 80026a0:	af04      	add	r7, sp, #16
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ac:	f3ef 8305 	mrs	r3, IPSR
 80026b0:	617b      	str	r3, [r7, #20]
  return(result);
 80026b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d17e      	bne.n	80027b6 <osThreadNew+0x11a>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d07b      	beq.n	80027b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80026c2:	2318      	movs	r3, #24
 80026c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d045      	beq.n	8002762 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <osThreadNew+0x48>
        name = attr->name;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <osThreadNew+0x6e>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b38      	cmp	r3, #56	@ 0x38
 80026fc:	d805      	bhi.n	800270a <osThreadNew+0x6e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <osThreadNew+0x72>
        return (NULL);
 800270a:	2300      	movs	r3, #0
 800270c:	e054      	b.n	80027b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00e      	beq.n	8002744 <osThreadNew+0xa8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2ba7      	cmp	r3, #167	@ 0xa7
 800272c:	d90a      	bls.n	8002744 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <osThreadNew+0xa8>
        mem = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e010      	b.n	8002766 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10c      	bne.n	8002766 <osThreadNew+0xca>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <osThreadNew+0xca>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <osThreadNew+0xca>
          mem = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e001      	b.n	8002766 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d110      	bne.n	800278e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002774:	9202      	str	r2, [sp, #8]
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6a3a      	ldr	r2, [r7, #32]
 8002780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fec8 	bl	8003518 <xTaskCreateStatic>
 8002788:	4603      	mov	r3, r0
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e013      	b.n	80027b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d110      	bne.n	80027b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	b29a      	uxth	r2, r3
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 ff16 	bl	80035d8 <xTaskCreate>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <osThreadNew+0x11a>
            hTask = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027b6:	693b      	ldr	r3, [r7, #16]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3728      	adds	r7, #40	@ 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c8:	f3ef 8305 	mrs	r3, IPSR
 80027cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80027ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <osDelay+0x1c>
    stat = osErrorISR;
 80027d4:	f06f 0305 	mvn.w	r3, #5
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e007      	b.n	80027ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f001 f854 	bl	8003894 <vTaskDelay>
    }
  }

  return (stat);
 80027ec:	68fb      	ldr	r3, [r7, #12]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b08a      	sub	sp, #40	@ 0x28
 80027fa:	af02      	add	r7, sp, #8
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002806:	f3ef 8305 	mrs	r3, IPSR
 800280a:	613b      	str	r3, [r7, #16]
  return(result);
 800280c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800280e:	2b00      	cmp	r3, #0
 8002810:	d15f      	bne.n	80028d2 <osMessageQueueNew+0xdc>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d05c      	beq.n	80028d2 <osMessageQueueNew+0xdc>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d059      	beq.n	80028d2 <osMessageQueueNew+0xdc>
    mem = -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d029      	beq.n	800287e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d012      	beq.n	8002858 <osMessageQueueNew+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b4f      	cmp	r3, #79	@ 0x4f
 8002838:	d90e      	bls.n	8002858 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <osMessageQueueNew+0x62>
        mem = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e014      	b.n	8002882 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d110      	bne.n	8002882 <osMessageQueueNew+0x8c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10c      	bne.n	8002882 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800286c:	2b00      	cmp	r3, #0
 800286e:	d108      	bne.n	8002882 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <osMessageQueueNew+0x8c>
          mem = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	e001      	b.n	8002882 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10b      	bne.n	80028a0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2100      	movs	r1, #0
 8002892:	9100      	str	r1, [sp, #0]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f972 	bl	8002b80 <xQueueGenericCreateStatic>
 800289c:	61f8      	str	r0, [r7, #28]
 800289e:	e008      	b.n	80028b2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80028a6:	2200      	movs	r2, #0
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f9e5 	bl	8002c7a <xQueueGenericCreate>
 80028b0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00c      	beq.n	80028d2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e001      	b.n	80028ca <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80028ca:	6979      	ldr	r1, [r7, #20]
 80028cc:	69f8      	ldr	r0, [r7, #28]
 80028ce:	f000 fdc5 	bl	800345c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80028d2:	69fb      	ldr	r3, [r7, #28]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <vApplicationGetIdleTaskMemory+0x2c>)
 80028ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4a06      	ldr	r2, [pc, #24]	@ (800290c <vApplicationGetIdleTaskMemory+0x30>)
 80028f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2280      	movs	r2, #128	@ 0x80
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000130 	.word	0x20000130
 800290c:	200001d8 	.word	0x200001d8

08002910 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <vApplicationGetTimerTaskMemory+0x2c>)
 8002920:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <vApplicationGetTimerTaskMemory+0x30>)
 8002926:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	601a      	str	r2, [r3, #0]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	200003d8 	.word	0x200003d8
 8002940:	20000480 	.word	0x20000480

08002944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0208 	add.w	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f103 0208 	add.w	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f103 0208 	add.w	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d103      	bne.n	8002a06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e00c      	b.n	8002a20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3308      	adds	r3, #8
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e002      	b.n	8002a14 <vListInsert+0x2e>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d2f6      	bcs.n	8002a0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6892      	ldr	r2, [r2, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6852      	ldr	r2, [r2, #4]
 8002a78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d103      	bne.n	8002a8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ad8:	f002 f8e6 	bl	8004ca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	441a      	add	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	441a      	add	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	22ff      	movs	r2, #255	@ 0xff
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	22ff      	movs	r2, #255	@ 0xff
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d114      	bne.n	8002b58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01a      	beq.n	8002b6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3310      	adds	r3, #16
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f97e 	bl	8003e3c <xTaskRemoveFromEventList>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <xQueueGenericReset+0xd0>)
 8002b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	e009      	b.n	8002b6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3310      	adds	r3, #16
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fef1 	bl	8002944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3324      	adds	r3, #36	@ 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff feec 	bl	8002944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b6c:	f002 f8ce 	bl	8004d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b70:	2301      	movs	r3, #1
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08e      	sub	sp, #56	@ 0x38
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <xQueueGenericCreateStatic+0x56>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <xQueueGenericCreateStatic+0x5a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <xQueueGenericCreateStatic+0x5c>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	623b      	str	r3, [r7, #32]
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <xQueueGenericCreateStatic+0x84>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <xQueueGenericCreateStatic+0x88>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <xQueueGenericCreateStatic+0x8a>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	61fb      	str	r3, [r7, #28]
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	e7fd      	b.n	8002c22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c26:	2350      	movs	r3, #80	@ 0x50
 8002c28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b50      	cmp	r3, #80	@ 0x50
 8002c2e:	d00b      	beq.n	8002c48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	61bb      	str	r3, [r7, #24]
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f840 	bl	8002cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3730      	adds	r7, #48	@ 0x30
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b08a      	sub	sp, #40	@ 0x28
 8002c7e:	af02      	add	r7, sp, #8
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	4613      	mov	r3, r2
 8002c86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	613b      	str	r3, [r7, #16]
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	e7fd      	b.n	8002ca2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	3350      	adds	r3, #80	@ 0x50
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 f919 	bl	8004eec <pvPortMalloc>
 8002cba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3350      	adds	r3, #80	@ 0x50
 8002cca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cd4:	79fa      	ldrb	r2, [r7, #7]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f805 	bl	8002cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e002      	b.n	8002d12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d1e:	2101      	movs	r1, #1
 8002d20:	69b8      	ldr	r0, [r7, #24]
 8002d22:	f7ff fec3 	bl	8002aac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	@ 0x38
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d46:	2300      	movs	r3, #0
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <xQueueGenericSend+0x34>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSend+0x42>
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <xQueueGenericSend+0x46>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <xQueueGenericSend+0x48>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10b      	bne.n	8002d9c <xQueueGenericSend+0x64>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d103      	bne.n	8002daa <xQueueGenericSend+0x72>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0x76>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0x78>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <xQueueGenericSend+0x94>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dcc:	f001 f9fc 	bl	80041c8 <xTaskGetSchedulerState>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <xQueueGenericSend+0xa4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <xQueueGenericSend+0xa8>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <xQueueGenericSend+0xaa>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <xQueueGenericSend+0xc6>
	__asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	61fb      	str	r3, [r7, #28]
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	e7fd      	b.n	8002dfa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dfe:	f001 ff53 	bl	8004ca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <xQueueGenericSend+0xdc>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d129      	bne.n	8002e68 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e1a:	f000 fa0f 	bl	800323c <prvCopyDataToQueue>
 8002e1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d010      	beq.n	8002e4a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	3324      	adds	r3, #36	@ 0x24
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 f805 	bl	8003e3c <xTaskRemoveFromEventList>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e38:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <xQueueGenericSend+0x200>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	e00a      	b.n	8002e60 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e50:	4b39      	ldr	r3, [pc, #228]	@ (8002f38 <xQueueGenericSend+0x200>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e60:	f001 ff54 	bl	8004d0c <vPortExitCritical>
				return pdPASS;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e063      	b.n	8002f30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e6e:	f001 ff4d 	bl	8004d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e05c      	b.n	8002f30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	4618      	mov	r0, r3
 8002e82:	f001 f83f 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e8a:	f001 ff3f 	bl	8004d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e8e:	f000 fda7 	bl	80039e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e92:	f001 ff09 	bl	8004ca8 <vPortEnterCritical>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d103      	bne.n	8002eac <xQueueGenericSend+0x174>
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d103      	bne.n	8002ec2 <xQueueGenericSend+0x18a>
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ec2:	f001 ff23 	bl	8004d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec6:	1d3a      	adds	r2, r7, #4
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 f82e 	bl	8003f30 <xTaskCheckForTimeOut>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d124      	bne.n	8002f24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002edc:	f000 faa6 	bl	800342c <prvIsQueueFull>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	3310      	adds	r3, #16
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 ff52 	bl	8003d98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ef6:	f000 fa31 	bl	800335c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002efa:	f000 fd7f 	bl	80039fc <xTaskResumeAll>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f47f af7c 	bne.w	8002dfe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f06:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <xQueueGenericSend+0x200>)
 8002f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	e772      	b.n	8002dfe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f1a:	f000 fa1f 	bl	800335c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f1e:	f000 fd6d 	bl	80039fc <xTaskResumeAll>
 8002f22:	e76c      	b.n	8002dfe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f26:	f000 fa19 	bl	800335c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f2a:	f000 fd67 	bl	80039fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3738      	adds	r7, #56	@ 0x38
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b090      	sub	sp, #64	@ 0x40
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSendFromISR+0x3e>
 8002f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <xQueueGenericSendFromISR+0x42>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueGenericSendFromISR+0x44>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d103      	bne.n	8002faa <xQueueGenericSendFromISR+0x6e>
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <xQueueGenericSendFromISR+0x72>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <xQueueGenericSendFromISR+0x74>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	623b      	str	r3, [r7, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fcc:	f001 ff4c 	bl	8004e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fd0:	f3ef 8211 	mrs	r2, BASEPRI
 8002fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61fa      	str	r2, [r7, #28]
 8002fe6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <xQueueGenericSendFromISR+0xc2>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d12f      	bne.n	800305e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003004:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003014:	f000 f912 	bl	800323c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003018:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d112      	bne.n	8003048 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800302a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302c:	3324      	adds	r3, #36	@ 0x24
 800302e:	4618      	mov	r0, r3
 8003030:	f000 ff04 	bl	8003e3c <xTaskRemoveFromEventList>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800304c:	3301      	adds	r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	b25a      	sxtb	r2, r3
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003058:	2301      	movs	r3, #1
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800305c:	e001      	b.n	8003062 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800305e:	2300      	movs	r3, #0
 8003060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003064:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800306c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003070:	4618      	mov	r0, r3
 8003072:	3740      	adds	r7, #64	@ 0x40
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	@ 0x30
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <xQueueReceive+0x32>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	623b      	str	r3, [r7, #32]
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	e7fd      	b.n	80030a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d103      	bne.n	80030b8 <xQueueReceive+0x40>
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <xQueueReceive+0x44>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <xQueueReceive+0x46>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <xQueueReceive+0x62>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	61fb      	str	r3, [r7, #28]
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	e7fd      	b.n	80030d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030da:	f001 f875 	bl	80041c8 <xTaskGetSchedulerState>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <xQueueReceive+0x72>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueReceive+0x76>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueReceive+0x78>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <xQueueReceive+0x94>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61bb      	str	r3, [r7, #24]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800310c:	f001 fdcc 	bl	8004ca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01f      	beq.n	800315c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003120:	f000 f8f6 	bl	8003310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00f      	beq.n	8003154 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	3310      	adds	r3, #16
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fe7f 	bl	8003e3c <xTaskRemoveFromEventList>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003144:	4b3c      	ldr	r3, [pc, #240]	@ (8003238 <xQueueReceive+0x1c0>)
 8003146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003154:	f001 fdda 	bl	8004d0c <vPortExitCritical>
				return pdPASS;
 8003158:	2301      	movs	r3, #1
 800315a:	e069      	b.n	8003230 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003162:	f001 fdd3 	bl	8004d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003166:	2300      	movs	r3, #0
 8003168:	e062      	b.n	8003230 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fec5 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800317a:	2301      	movs	r3, #1
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800317e:	f001 fdc5 	bl	8004d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003182:	f000 fc2d 	bl	80039e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003186:	f001 fd8f 	bl	8004ca8 <vPortEnterCritical>
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003190:	b25b      	sxtb	r3, r3
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d103      	bne.n	80031a0 <xQueueReceive+0x128>
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d103      	bne.n	80031b6 <xQueueReceive+0x13e>
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b6:	f001 fda9 	bl	8004d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ba:	1d3a      	adds	r2, r7, #4
 80031bc:	f107 0310 	add.w	r3, r7, #16
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 feb4 	bl	8003f30 <xTaskCheckForTimeOut>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d123      	bne.n	8003216 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d0:	f000 f916 	bl	8003400 <prvIsQueueEmpty>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d017      	beq.n	800320a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	3324      	adds	r3, #36	@ 0x24
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fdd8 	bl	8003d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ea:	f000 f8b7 	bl	800335c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031ee:	f000 fc05 	bl	80039fc <xTaskResumeAll>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d189      	bne.n	800310c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <xQueueReceive+0x1c0>)
 80031fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	e780      	b.n	800310c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800320a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800320c:	f000 f8a6 	bl	800335c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003210:	f000 fbf4 	bl	80039fc <xTaskResumeAll>
 8003214:	e77a      	b.n	800310c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003218:	f000 f8a0 	bl	800335c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800321c:	f000 fbee 	bl	80039fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003222:	f000 f8ed 	bl	8003400 <prvIsQueueEmpty>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	f43f af6f 	beq.w	800310c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800322e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003230:	4618      	mov	r0, r3
 8003232:	3730      	adds	r7, #48	@ 0x30
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d14d      	bne.n	80032fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 ffcc 	bl	8004204 <xTaskPriorityDisinherit>
 800326c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e043      	b.n	80032fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d119      	bne.n	80032b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6858      	ldr	r0, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	461a      	mov	r2, r3
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	f002 faef 	bl	800586a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	441a      	add	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d32b      	bcc.n	80032fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e026      	b.n	80032fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68d8      	ldr	r0, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	461a      	mov	r2, r3
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	f002 fad5 	bl	800586a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	425b      	negs	r3, r3
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d207      	bcs.n	80032ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	425b      	negs	r3, r3
 80032e6:	441a      	add	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d105      	bne.n	80032fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003306:	697b      	ldr	r3, [r7, #20]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d018      	beq.n	8003354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	441a      	add	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d303      	bcc.n	8003344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68d9      	ldr	r1, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	461a      	mov	r2, r3
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	f002 fa8b 	bl	800586a <memcpy>
	}
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003364:	f001 fca0 	bl	8004ca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800336e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003370:	e011      	b.n	8003396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3324      	adds	r3, #36	@ 0x24
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd5c 	bl	8003e3c <xTaskRemoveFromEventList>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800338a:	f000 fe35 	bl	8003ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	3b01      	subs	r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	dce9      	bgt.n	8003372 <prvUnlockQueue+0x16>
 800339e:	e000      	b.n	80033a2 <prvUnlockQueue+0x46>
					break;
 80033a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	22ff      	movs	r2, #255	@ 0xff
 80033a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80033aa:	f001 fcaf 	bl	8004d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033ae:	f001 fc7b 	bl	8004ca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ba:	e011      	b.n	80033e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3310      	adds	r3, #16
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fd37 	bl	8003e3c <xTaskRemoveFromEventList>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033d4:	f000 fe10 	bl	8003ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033d8:	7bbb      	ldrb	r3, [r7, #14]
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dce9      	bgt.n	80033bc <prvUnlockQueue+0x60>
 80033e8:	e000      	b.n	80033ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	22ff      	movs	r2, #255	@ 0xff
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033f4:	f001 fc8a 	bl	8004d0c <vPortExitCritical>
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003408:	f001 fc4e 	bl	8004ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e001      	b.n	800341e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341e:	f001 fc75 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003434:	f001 fc38 	bl	8004ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	429a      	cmp	r2, r3
 8003442:	d102      	bne.n	800344a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003444:	2301      	movs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e001      	b.n	800344e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800344e:	f001 fc5d 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e014      	b.n	8003496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800346c:	4a0f      	ldr	r2, [pc, #60]	@ (80034ac <vQueueAddToRegistry+0x50>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003478:	490c      	ldr	r1, [pc, #48]	@ (80034ac <vQueueAddToRegistry+0x50>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003482:	4a0a      	ldr	r2, [pc, #40]	@ (80034ac <vQueueAddToRegistry+0x50>)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800348e:	e006      	b.n	800349e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b07      	cmp	r3, #7
 800349a:	d9e7      	bls.n	800346c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000880 	.word	0x20000880

080034b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034c0:	f001 fbf2 	bl	8004ca8 <vPortEnterCritical>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d103      	bne.n	80034da <vQueueWaitForMessageRestricted+0x2a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d103      	bne.n	80034f0 <vQueueWaitForMessageRestricted+0x40>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034f0:	f001 fc0c 	bl	8004d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3324      	adds	r3, #36	@ 0x24
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fc6d 	bl	8003de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff26 	bl	800335c <prvUnlockQueue>
	}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08e      	sub	sp, #56	@ 0x38
 800351c:	af04      	add	r7, sp, #16
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <xTaskCreateStatic+0x2c>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	623b      	str	r3, [r7, #32]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <xTaskCreateStatic+0x4a>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	61fb      	str	r3, [r7, #28]
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	e7fd      	b.n	800355e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003562:	23a8      	movs	r3, #168	@ 0xa8
 8003564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2ba8      	cmp	r3, #168	@ 0xa8
 800356a:	d00b      	beq.n	8003584 <xTaskCreateStatic+0x6c>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	61bb      	str	r3, [r7, #24]
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003584:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01e      	beq.n	80035ca <xTaskCreateStatic+0xb2>
 800358c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01b      	beq.n	80035ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035a4:	2300      	movs	r3, #0
 80035a6:	9303      	str	r3, [sp, #12]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f851 	bl	8003664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035c4:	f000 f8f6 	bl	80037b4 <prvAddNewTaskToReadyList>
 80035c8:	e001      	b.n	80035ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ce:	697b      	ldr	r3, [r7, #20]
	}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	@ 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	@ 0x30
 80035dc:	af04      	add	r7, sp, #16
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fc7d 	bl	8004eec <pvPortMalloc>
 80035f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035fa:	20a8      	movs	r0, #168	@ 0xa8
 80035fc:	f001 fc76 	bl	8004eec <pvPortMalloc>
 8003600:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
 800360e:	e005      	b.n	800361c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f001 fd39 	bl	8005088 <vPortFree>
 8003616:	e001      	b.n	800361c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	2300      	movs	r3, #0
 800362e:	9303      	str	r3, [sp, #12]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	9302      	str	r3, [sp, #8]
 8003634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f80f 	bl	8003664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003646:	69f8      	ldr	r0, [r7, #28]
 8003648:	f000 f8b4 	bl	80037b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e002      	b.n	8003658 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003658:	69bb      	ldr	r3, [r7, #24]
	}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	461a      	mov	r2, r3
 800367c:	21a5      	movs	r1, #165	@ 0xa5
 800367e:	f002 f81b 	bl	80056b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800368c:	3b01      	subs	r3, #1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f023 0307 	bic.w	r3, r3, #7
 800369a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	617b      	str	r3, [r7, #20]
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	e7fd      	b.n	80036ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01f      	beq.n	8003704 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e012      	b.n	80036f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	7819      	ldrb	r1, [r3, #0]
 80036d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	3334      	adds	r3, #52	@ 0x34
 80036da:	460a      	mov	r2, r1
 80036dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	d9e9      	bls.n	80036ca <prvInitialiseNewTask+0x66>
 80036f6:	e000      	b.n	80036fa <prvInitialiseNewTask+0x96>
			{
				break;
 80036f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003702:	e003      	b.n	800370c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	2b37      	cmp	r3, #55	@ 0x37
 8003710:	d901      	bls.n	8003716 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003712:	2337      	movs	r3, #55	@ 0x37
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800371a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003720:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	2200      	movs	r2, #0
 8003726:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	3304      	adds	r3, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f929 	bl	8002984 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	3318      	adds	r3, #24
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f924 	bl	8002984 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003740:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003744:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	2200      	movs	r2, #0
 8003756:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375c:	2200      	movs	r2, #0
 800375e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	3354      	adds	r3, #84	@ 0x54
 8003766:	224c      	movs	r2, #76	@ 0x4c
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 ffa4 	bl	80056b8 <memset>
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <prvInitialiseNewTask+0x144>)
 8003774:	659a      	str	r2, [r3, #88]	@ 0x58
 8003776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003778:	4a0c      	ldr	r2, [pc, #48]	@ (80037ac <prvInitialiseNewTask+0x148>)
 800377a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	4a0c      	ldr	r2, [pc, #48]	@ (80037b0 <prvInitialiseNewTask+0x14c>)
 8003780:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	69b8      	ldr	r0, [r7, #24]
 8003788:	f001 f95a 	bl	8004a40 <pxPortInitialiseStack>
 800378c:	4602      	mov	r2, r0
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800379c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800379e:	bf00      	nop
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20004b14 	.word	0x20004b14
 80037ac:	20004b7c 	.word	0x20004b7c
 80037b0:	20004be4 	.word	0x20004be4

080037b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037bc:	f001 fa74 	bl	8004ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ca:	4b2c      	ldr	r3, [pc, #176]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037d2:	4a2a      	ldr	r2, [pc, #168]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037d8:	4b27      	ldr	r3, [pc, #156]	@ (8003878 <prvAddNewTaskToReadyList+0xc4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037e0:	f000 fc2e 	bl	8004040 <prvInitialiseTaskLists>
 80037e4:	e00d      	b.n	8003802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <prvAddNewTaskToReadyList+0xcc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d802      	bhi.n	8003802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037fc:	4a1f      	ldr	r2, [pc, #124]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003802:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <prvAddNewTaskToReadyList+0xd0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <prvAddNewTaskToReadyList+0xd0>)
 800380a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800380c:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <prvAddNewTaskToReadyList+0xd0>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <prvAddNewTaskToReadyList+0xd4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d903      	bls.n	8003828 <prvAddNewTaskToReadyList+0x74>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <prvAddNewTaskToReadyList+0xd4>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4a15      	ldr	r2, [pc, #84]	@ (800388c <prvAddNewTaskToReadyList+0xd8>)
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f7ff f8ad 	bl	800299e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003844:	f001 fa62 	bl	8004d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003848:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <prvAddNewTaskToReadyList+0xcc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003850:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <prvAddNewTaskToReadyList+0xc8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d207      	bcs.n	800386e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800385e:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <prvAddNewTaskToReadyList+0xdc>)
 8003860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000d94 	.word	0x20000d94
 800387c:	200008c0 	.word	0x200008c0
 8003880:	20000da0 	.word	0x20000da0
 8003884:	20000db0 	.word	0x20000db0
 8003888:	20000d9c 	.word	0x20000d9c
 800388c:	200008c4 	.word	0x200008c4
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <vTaskDelay+0x64>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <vTaskDelay+0x32>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	60bb      	str	r3, [r7, #8]
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	e7fd      	b.n	80038c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038c6:	f000 f88b 	bl	80039e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038ca:	2100      	movs	r1, #0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fd09 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038d2:	f000 f893 	bl	80039fc <xTaskResumeAll>
 80038d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d107      	bne.n	80038ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80038de:	4b07      	ldr	r3, [pc, #28]	@ (80038fc <vTaskDelay+0x68>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000dbc 	.word	0x20000dbc
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800390e:	463a      	mov	r2, r7
 8003910:	1d39      	adds	r1, r7, #4
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe ffe0 	bl	80028dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	2300      	movs	r3, #0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	460a      	mov	r2, r1
 800392e:	4924      	ldr	r1, [pc, #144]	@ (80039c0 <vTaskStartScheduler+0xc0>)
 8003930:	4824      	ldr	r0, [pc, #144]	@ (80039c4 <vTaskStartScheduler+0xc4>)
 8003932:	f7ff fdf1 	bl	8003518 <xTaskCreateStatic>
 8003936:	4603      	mov	r3, r0
 8003938:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <vTaskStartScheduler+0xc8>)
 800393a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800393c:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <vTaskStartScheduler+0xc8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003944:	2301      	movs	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e001      	b.n	800394e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d102      	bne.n	800395a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003954:	f000 fd1a 	bl	800438c <xTimerCreateTimerTask>
 8003958:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d11b      	bne.n	8003998 <vTaskStartScheduler+0x98>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	613b      	str	r3, [r7, #16]
}
 8003972:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003974:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <vTaskStartScheduler+0xcc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3354      	adds	r3, #84	@ 0x54
 800397a:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <vTaskStartScheduler+0xd0>)
 800397c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <vTaskStartScheduler+0xd4>)
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003986:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <vTaskStartScheduler+0xd8>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800398c:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <vTaskStartScheduler+0xdc>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003992:	f001 f8e5 	bl	8004b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003996:	e00f      	b.n	80039b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d10b      	bne.n	80039b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <vTaskStartScheduler+0xb4>
}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08005d74 	.word	0x08005d74
 80039c4:	08004011 	.word	0x08004011
 80039c8:	20000db8 	.word	0x20000db8
 80039cc:	200008c0 	.word	0x200008c0
 80039d0:	2000001c 	.word	0x2000001c
 80039d4:	20000db4 	.word	0x20000db4
 80039d8:	20000da0 	.word	0x20000da0
 80039dc:	20000d98 	.word	0x20000d98

080039e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039e4:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <vTaskSuspendAll+0x18>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4a03      	ldr	r2, [pc, #12]	@ (80039f8 <vTaskSuspendAll+0x18>)
 80039ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	20000dbc 	.word	0x20000dbc

080039fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a0a:	4b42      	ldr	r3, [pc, #264]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <xTaskResumeAll+0x2e>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	603b      	str	r3, [r7, #0]
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	e7fd      	b.n	8003a26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a2a:	f001 f93d 	bl	8004ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a2e:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4a37      	ldr	r2, [pc, #220]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a38:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <xTaskResumeAll+0x118>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d162      	bne.n	8003b06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a40:	4b35      	ldr	r3, [pc, #212]	@ (8003b18 <xTaskResumeAll+0x11c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05e      	beq.n	8003b06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a48:	e02f      	b.n	8003aaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4a:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <xTaskResumeAll+0x120>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3318      	adds	r3, #24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fffe 	bl	8002a58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fff9 	bl	8002a58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b20 <xTaskResumeAll+0x124>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d903      	bls.n	8003a7a <xTaskResumeAll+0x7e>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <xTaskResumeAll+0x124>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <xTaskResumeAll+0x128>)
 8003a88:	441a      	add	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f7fe ff84 	bl	800299e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9a:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <xTaskResumeAll+0x12c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	@ (8003b2c <xTaskResumeAll+0x130>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <xTaskResumeAll+0x120>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1cb      	bne.n	8003a4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ab8:	f000 fb66 	bl	8004188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003abc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b30 <xTaskResumeAll+0x134>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ac8:	f000 f846 	bl	8003b58 <xTaskIncrementTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ad2:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <xTaskResumeAll+0x130>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f1      	bne.n	8003ac8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <xTaskResumeAll+0x134>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <xTaskResumeAll+0x130>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <xTaskResumeAll+0x138>)
 8003af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b06:	f001 f901 	bl	8004d0c <vPortExitCritical>

	return xAlreadyYielded;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000dbc 	.word	0x20000dbc
 8003b18:	20000d94 	.word	0x20000d94
 8003b1c:	20000d54 	.word	0x20000d54
 8003b20:	20000d9c 	.word	0x20000d9c
 8003b24:	200008c4 	.word	0x200008c4
 8003b28:	200008c0 	.word	0x200008c0
 8003b2c:	20000da8 	.word	0x20000da8
 8003b30:	20000da4 	.word	0x20000da4
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <xTaskGetTickCount+0x1c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b44:	687b      	ldr	r3, [r7, #4]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000d98 	.word	0x20000d98

08003b58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b62:	4b4f      	ldr	r3, [pc, #316]	@ (8003ca0 <xTaskIncrementTick+0x148>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 8090 	bne.w	8003c8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca4 <xTaskIncrementTick+0x14c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b74:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca4 <xTaskIncrementTick+0x14c>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d121      	bne.n	8003bc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b80:	4b49      	ldr	r3, [pc, #292]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	603b      	str	r3, [r7, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	e7fd      	b.n	8003b9e <xTaskIncrementTick+0x46>
 8003ba2:	4b41      	ldr	r3, [pc, #260]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <xTaskIncrementTick+0x154>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8003cac <xTaskIncrementTick+0x154>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <xTaskIncrementTick+0x158>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb0 <xTaskIncrementTick+0x158>)
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	f000 fae2 	bl	8004188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <xTaskIncrementTick+0x15c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d349      	bcc.n	8003c62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bce:	4b36      	ldr	r3, [pc, #216]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd8:	4b36      	ldr	r3, [pc, #216]	@ (8003cb4 <xTaskIncrementTick+0x15c>)
 8003bda:	f04f 32ff 	mov.w	r2, #4294967295
 8003bde:	601a      	str	r2, [r3, #0]
					break;
 8003be0:	e03f      	b.n	8003c62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be2:	4b31      	ldr	r3, [pc, #196]	@ (8003ca8 <xTaskIncrementTick+0x150>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d203      	bcs.n	8003c02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb4 <xTaskIncrementTick+0x15c>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c00:	e02f      	b.n	8003c62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe ff26 	bl	8002a58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3318      	adds	r3, #24
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe ff1d 	bl	8002a58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c22:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <xTaskIncrementTick+0x160>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d903      	bls.n	8003c32 <xTaskIncrementTick+0xda>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <xTaskIncrementTick+0x160>)
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cbc <xTaskIncrementTick+0x164>)
 8003c40:	441a      	add	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe fea8 	bl	800299e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c52:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <xTaskIncrementTick+0x168>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d3b8      	bcc.n	8003bce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c60:	e7b5      	b.n	8003bce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c62:	4b17      	ldr	r3, [pc, #92]	@ (8003cc0 <xTaskIncrementTick+0x168>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c68:	4914      	ldr	r1, [pc, #80]	@ (8003cbc <xTaskIncrementTick+0x164>)
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d901      	bls.n	8003c7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c7e:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <xTaskIncrementTick+0x16c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e004      	b.n	8003c96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <xTaskIncrementTick+0x170>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc8 <xTaskIncrementTick+0x170>)
 8003c94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c96:	697b      	ldr	r3, [r7, #20]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000dbc 	.word	0x20000dbc
 8003ca4:	20000d98 	.word	0x20000d98
 8003ca8:	20000d4c 	.word	0x20000d4c
 8003cac:	20000d50 	.word	0x20000d50
 8003cb0:	20000dac 	.word	0x20000dac
 8003cb4:	20000db4 	.word	0x20000db4
 8003cb8:	20000d9c 	.word	0x20000d9c
 8003cbc:	200008c4 	.word	0x200008c4
 8003cc0:	200008c0 	.word	0x200008c0
 8003cc4:	20000da8 	.word	0x20000da8
 8003cc8:	20000da4 	.word	0x20000da4

08003ccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <vTaskSwitchContext+0xb4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cda:	4b2a      	ldr	r3, [pc, #168]	@ (8003d84 <vTaskSwitchContext+0xb8>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ce0:	e047      	b.n	8003d72 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ce2:	4b28      	ldr	r3, [pc, #160]	@ (8003d84 <vTaskSwitchContext+0xb8>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce8:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <vTaskSwitchContext+0xbc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e011      	b.n	8003d14 <vTaskSwitchContext+0x48>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <vTaskSwitchContext+0x42>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	e7fd      	b.n	8003d0a <vTaskSwitchContext+0x3e>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	491d      	ldr	r1, [pc, #116]	@ (8003d8c <vTaskSwitchContext+0xc0>)
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0e3      	beq.n	8003cf0 <vTaskSwitchContext+0x24>
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a16      	ldr	r2, [pc, #88]	@ (8003d8c <vTaskSwitchContext+0xc0>)
 8003d34:	4413      	add	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d104      	bne.n	8003d58 <vTaskSwitchContext+0x8c>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d90 <vTaskSwitchContext+0xc4>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <vTaskSwitchContext+0xbc>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <vTaskSwitchContext+0xc4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3354      	adds	r3, #84	@ 0x54
 8003d6e:	4a09      	ldr	r2, [pc, #36]	@ (8003d94 <vTaskSwitchContext+0xc8>)
 8003d70:	6013      	str	r3, [r2, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000dbc 	.word	0x20000dbc
 8003d84:	20000da8 	.word	0x20000da8
 8003d88:	20000d9c 	.word	0x20000d9c
 8003d8c:	200008c4 	.word	0x200008c4
 8003d90:	200008c0 	.word	0x200008c0
 8003d94:	2000001c 	.word	0x2000001c

08003d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	e7fd      	b.n	8003dbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <vTaskPlaceOnEventList+0x48>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fe fe0c 	bl	80029e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dce:	2101      	movs	r1, #1
 8003dd0:	6838      	ldr	r0, [r7, #0]
 8003dd2:	f000 fa87 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200008c0 	.word	0x200008c0

08003de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	617b      	str	r3, [r7, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3318      	adds	r3, #24
 8003e14:	4619      	mov	r1, r3
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7fe fdc1 	bl	800299e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f000 fa5a 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
	}
 8003e30:	bf00      	nop
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200008c0 	.word	0x200008c0

08003e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	e7fd      	b.n	8003e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fdf2 	bl	8002a58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e74:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <xTaskRemoveFromEventList+0xb0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11d      	bne.n	8003eb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fde9 	bl	8002a58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d903      	bls.n	8003e9a <xTaskRemoveFromEventList+0x5e>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4a13      	ldr	r2, [pc, #76]	@ (8003ef4 <xTaskRemoveFromEventList+0xb8>)
 8003ea8:	441a      	add	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f7fe fd74 	bl	800299e <vListInsertEnd>
 8003eb6:	e005      	b.n	8003ec4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	3318      	adds	r3, #24
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	480e      	ldr	r0, [pc, #56]	@ (8003ef8 <xTaskRemoveFromEventList+0xbc>)
 8003ec0:	f7fe fd6d 	bl	800299e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <xTaskRemoveFromEventList+0xc0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d905      	bls.n	8003ede <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <xTaskRemoveFromEventList+0xc4>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e001      	b.n	8003ee2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ee2:	697b      	ldr	r3, [r7, #20]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000dbc 	.word	0x20000dbc
 8003ef0:	20000d9c 	.word	0x20000d9c
 8003ef4:	200008c4 	.word	0x200008c4
 8003ef8:	20000d54 	.word	0x20000d54
 8003efc:	200008c0 	.word	0x200008c0
 8003f00:	20000da8 	.word	0x20000da8

08003f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <vTaskInternalSetTimeOutState+0x24>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <vTaskInternalSetTimeOutState+0x28>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	605a      	str	r2, [r3, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	20000dac 	.word	0x20000dac
 8003f2c:	20000d98 	.word	0x20000d98

08003f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	613b      	str	r3, [r7, #16]
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60fb      	str	r3, [r7, #12]
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f76:	f000 fe97 	bl	8004ca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <xTaskCheckForTimeOut+0xc0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	e023      	b.n	8003fe2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ff4 <xTaskCheckForTimeOut+0xc4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d007      	beq.n	8003fb6 <xTaskCheckForTimeOut+0x86>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e015      	b.n	8003fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d20b      	bcs.n	8003fd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ff99 	bl	8003f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e004      	b.n	8003fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fe2:	f000 fe93 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000d98 	.word	0x20000d98
 8003ff4:	20000dac 	.word	0x20000dac

08003ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <vTaskMissedYield+0x14>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000da8 	.word	0x20000da8

08004010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004018:	f000 f852 	bl	80040c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <prvIdleTask+0x28>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d9f9      	bls.n	8004018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <prvIdleTask+0x2c>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004034:	e7f0      	b.n	8004018 <prvIdleTask+0x8>
 8004036:	bf00      	nop
 8004038:	200008c4 	.word	0x200008c4
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	e00c      	b.n	8004066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4a12      	ldr	r2, [pc, #72]	@ (80040a0 <prvInitialiseTaskLists+0x60>)
 8004058:	4413      	add	r3, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fc72 	bl	8002944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3301      	adds	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b37      	cmp	r3, #55	@ 0x37
 800406a:	d9ef      	bls.n	800404c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800406c:	480d      	ldr	r0, [pc, #52]	@ (80040a4 <prvInitialiseTaskLists+0x64>)
 800406e:	f7fe fc69 	bl	8002944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004072:	480d      	ldr	r0, [pc, #52]	@ (80040a8 <prvInitialiseTaskLists+0x68>)
 8004074:	f7fe fc66 	bl	8002944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004078:	480c      	ldr	r0, [pc, #48]	@ (80040ac <prvInitialiseTaskLists+0x6c>)
 800407a:	f7fe fc63 	bl	8002944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800407e:	480c      	ldr	r0, [pc, #48]	@ (80040b0 <prvInitialiseTaskLists+0x70>)
 8004080:	f7fe fc60 	bl	8002944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004084:	480b      	ldr	r0, [pc, #44]	@ (80040b4 <prvInitialiseTaskLists+0x74>)
 8004086:	f7fe fc5d 	bl	8002944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <prvInitialiseTaskLists+0x78>)
 800408c:	4a05      	ldr	r2, [pc, #20]	@ (80040a4 <prvInitialiseTaskLists+0x64>)
 800408e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <prvInitialiseTaskLists+0x7c>)
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <prvInitialiseTaskLists+0x68>)
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200008c4 	.word	0x200008c4
 80040a4:	20000d24 	.word	0x20000d24
 80040a8:	20000d38 	.word	0x20000d38
 80040ac:	20000d54 	.word	0x20000d54
 80040b0:	20000d68 	.word	0x20000d68
 80040b4:	20000d80 	.word	0x20000d80
 80040b8:	20000d4c 	.word	0x20000d4c
 80040bc:	20000d50 	.word	0x20000d50

080040c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c6:	e019      	b.n	80040fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c8:	f000 fdee 	bl	8004ca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040cc:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <prvCheckTasksWaitingTermination+0x50>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe fcbd 	bl	8002a58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <prvCheckTasksWaitingTermination+0x54>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004114 <prvCheckTasksWaitingTermination+0x54>)
 80040e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040f2:	f000 fe0b 	bl	8004d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f810 	bl	800411c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e1      	bne.n	80040c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000d68 	.word	0x20000d68
 8004114:	20000d94 	.word	0x20000d94
 8004118:	20000d7c 	.word	0x20000d7c

0800411c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3354      	adds	r3, #84	@ 0x54
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fadd 	bl	80056e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ffa3 	bl	8005088 <vPortFree>
				vPortFree( pxTCB );
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 ffa0 	bl	8005088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004148:	e019      	b.n	800417e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004150:	2b01      	cmp	r3, #1
 8004152:	d103      	bne.n	800415c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 ff97 	bl	8005088 <vPortFree>
	}
 800415a:	e010      	b.n	800417e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004162:	2b02      	cmp	r3, #2
 8004164:	d00b      	beq.n	800417e <prvDeleteTCB+0x62>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60fb      	str	r3, [r7, #12]
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <prvDeleteTCB+0x5e>
	}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800418e:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <prvResetNextTaskUnblockTime+0x38>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004198:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <prvResetNextTaskUnblockTime+0x3c>)
 800419a:	f04f 32ff 	mov.w	r2, #4294967295
 800419e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041a0:	e008      	b.n	80041b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a2:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <prvResetNextTaskUnblockTime+0x38>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a04      	ldr	r2, [pc, #16]	@ (80041c4 <prvResetNextTaskUnblockTime+0x3c>)
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000d4c 	.word	0x20000d4c
 80041c4:	20000db4 	.word	0x20000db4

080041c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <xTaskGetSchedulerState+0x34>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041d6:	2301      	movs	r3, #1
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	e008      	b.n	80041ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041dc:	4b08      	ldr	r3, [pc, #32]	@ (8004200 <xTaskGetSchedulerState+0x38>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041e4:	2302      	movs	r3, #2
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	e001      	b.n	80041ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041ee:	687b      	ldr	r3, [r7, #4]
	}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	20000da0 	.word	0x20000da0
 8004200:	20000dbc 	.word	0x20000dbc

08004204 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d058      	beq.n	80042cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800421a:	4b2f      	ldr	r3, [pc, #188]	@ (80042d8 <xTaskPriorityDisinherit+0xd4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d00b      	beq.n	800423c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	60fb      	str	r3, [r7, #12]
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60bb      	str	r3, [r7, #8]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426e:	429a      	cmp	r2, r3
 8004270:	d02c      	beq.n	80042cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d128      	bne.n	80042cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3304      	adds	r3, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fbea 	bl	8002a58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429c:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <xTaskPriorityDisinherit+0xd8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d903      	bls.n	80042ac <xTaskPriorityDisinherit+0xa8>
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a0c      	ldr	r2, [pc, #48]	@ (80042dc <xTaskPriorityDisinherit+0xd8>)
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <xTaskPriorityDisinherit+0xdc>)
 80042ba:	441a      	add	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe fb6b 	bl	800299e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042cc:	697b      	ldr	r3, [r7, #20]
	}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200008c0 	.word	0x200008c0
 80042dc:	20000d9c 	.word	0x20000d9c
 80042e0:	200008c4 	.word	0x200008c4

080042e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042ee:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <prvAddCurrentTaskToDelayedList+0x90>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f4:	4b20      	ldr	r3, [pc, #128]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fbac 	bl	8002a58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d10a      	bne.n	800431e <prvAddCurrentTaskToDelayedList+0x3a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4819      	ldr	r0, [pc, #100]	@ (800437c <prvAddCurrentTaskToDelayedList+0x98>)
 8004318:	f7fe fb41 	bl	800299e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800431c:	e026      	b.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004326:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	429a      	cmp	r2, r3
 8004334:	d209      	bcs.n	800434a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004336:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7fe fb4f 	bl	80029e6 <vListInsert>
}
 8004348:	e010      	b.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434a:	4b0e      	ldr	r3, [pc, #56]	@ (8004384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b0a      	ldr	r3, [pc, #40]	@ (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f7fe fb45 	bl	80029e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d202      	bcs.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004366:	4a08      	ldr	r2, [pc, #32]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6013      	str	r3, [r2, #0]
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000d98 	.word	0x20000d98
 8004378:	200008c0 	.word	0x200008c0
 800437c:	20000d80 	.word	0x20000d80
 8004380:	20000d50 	.word	0x20000d50
 8004384:	20000d4c 	.word	0x20000d4c
 8004388:	20000db4 	.word	0x20000db4

0800438c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004396:	f000 fb13 	bl	80049c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800439a:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <xTimerCreateTimerTask+0x84>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d021      	beq.n	80043e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043aa:	1d3a      	adds	r2, r7, #4
 80043ac:	f107 0108 	add.w	r1, r7, #8
 80043b0:	f107 030c 	add.w	r3, r7, #12
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe faab 	bl	8002910 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	9202      	str	r2, [sp, #8]
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	2302      	movs	r3, #2
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	460a      	mov	r2, r1
 80043cc:	4911      	ldr	r1, [pc, #68]	@ (8004414 <xTimerCreateTimerTask+0x88>)
 80043ce:	4812      	ldr	r0, [pc, #72]	@ (8004418 <xTimerCreateTimerTask+0x8c>)
 80043d0:	f7ff f8a2 	bl	8003518 <xTaskCreateStatic>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a11      	ldr	r2, [pc, #68]	@ (800441c <xTimerCreateTimerTask+0x90>)
 80043d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043da:	4b10      	ldr	r3, [pc, #64]	@ (800441c <xTimerCreateTimerTask+0x90>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043e2:	2301      	movs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	613b      	str	r3, [r7, #16]
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004404:	697b      	ldr	r3, [r7, #20]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000df0 	.word	0x20000df0
 8004414:	08005d7c 	.word	0x08005d7c
 8004418:	08004559 	.word	0x08004559
 800441c:	20000df4 	.word	0x20000df4

08004420 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	@ 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <xTimerGenericCommand+0x30>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	623b      	str	r3, [r7, #32]
}
 800444a:	bf00      	nop
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004450:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <xTimerGenericCommand+0x98>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02a      	beq.n	80044ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b05      	cmp	r3, #5
 8004468:	dc18      	bgt.n	800449c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800446a:	f7ff fead 	bl	80041c8 <xTaskGetSchedulerState>
 800446e:	4603      	mov	r3, r0
 8004470:	2b02      	cmp	r3, #2
 8004472:	d109      	bne.n	8004488 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004474:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <xTimerGenericCommand+0x98>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	f107 0110 	add.w	r1, r7, #16
 800447c:	2300      	movs	r3, #0
 800447e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004480:	f7fe fc5a 	bl	8002d38 <xQueueGenericSend>
 8004484:	6278      	str	r0, [r7, #36]	@ 0x24
 8004486:	e012      	b.n	80044ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <xTimerGenericCommand+0x98>)
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	f107 0110 	add.w	r1, r7, #16
 8004490:	2300      	movs	r3, #0
 8004492:	2200      	movs	r2, #0
 8004494:	f7fe fc50 	bl	8002d38 <xQueueGenericSend>
 8004498:	6278      	str	r0, [r7, #36]	@ 0x24
 800449a:	e008      	b.n	80044ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <xTimerGenericCommand+0x98>)
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	f107 0110 	add.w	r1, r7, #16
 80044a4:	2300      	movs	r3, #0
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	f7fe fd48 	bl	8002f3c <xQueueGenericSendFromISR>
 80044ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3728      	adds	r7, #40	@ 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000df0 	.word	0x20000df0

080044bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c6:	4b23      	ldr	r3, [pc, #140]	@ (8004554 <prvProcessExpiredTimer+0x98>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fabf 	bl	8002a58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d023      	beq.n	8004530 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	18d1      	adds	r1, r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f000 f8d5 	bl	80046a4 <prvInsertTimerInActiveList>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004500:	2300      	movs	r3, #0
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	2100      	movs	r1, #0
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff ff88 	bl	8004420 <xTimerGenericCommand>
 8004510:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d114      	bne.n	8004542 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	6978      	ldr	r0, [r7, #20]
 8004548:	4798      	blx	r3
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000de8 	.word	0x20000de8

08004558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004560:	f107 0308 	add.w	r3, r7, #8
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f859 	bl	800461c <prvGetNextExpireTime>
 800456a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4619      	mov	r1, r3
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f805 	bl	8004580 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004576:	f000 f8d7 	bl	8004728 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800457a:	bf00      	nop
 800457c:	e7f0      	b.n	8004560 <prvTimerTask+0x8>
	...

08004580 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800458a:	f7ff fa29 	bl	80039e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800458e:	f107 0308 	add.w	r3, r7, #8
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f866 	bl	8004664 <prvSampleTimeNow>
 8004598:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d130      	bne.n	8004602 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <prvProcessTimerOrBlockTask+0x3c>
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d806      	bhi.n	80045bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045ae:	f7ff fa25 	bl	80039fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff81 	bl	80044bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045ba:	e024      	b.n	8004606 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <prvProcessTimerOrBlockTask+0x90>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <prvProcessTimerOrBlockTask+0x50>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <prvProcessTimerOrBlockTask+0x52>
 80045d0:	2300      	movs	r3, #0
 80045d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <prvProcessTimerOrBlockTask+0x94>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	f7fe ff65 	bl	80034b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045e6:	f7ff fa09 	bl	80039fc <xTaskResumeAll>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045f0:	4b09      	ldr	r3, [pc, #36]	@ (8004618 <prvProcessTimerOrBlockTask+0x98>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
}
 8004600:	e001      	b.n	8004606 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004602:	f7ff f9fb 	bl	80039fc <xTaskResumeAll>
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000dec 	.word	0x20000dec
 8004614:	20000df0 	.word	0x20000df0
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004624:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <prvGetNextExpireTime+0x44>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <prvGetNextExpireTime+0x16>
 800462e:	2201      	movs	r2, #1
 8004630:	e000      	b.n	8004634 <prvGetNextExpireTime+0x18>
 8004632:	2200      	movs	r2, #0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004640:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <prvGetNextExpireTime+0x44>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e001      	b.n	8004650 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000de8 	.word	0x20000de8

08004664 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800466c:	f7ff fa64 	bl	8003b38 <xTaskGetTickCount>
 8004670:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004672:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <prvSampleTimeNow+0x3c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	429a      	cmp	r2, r3
 800467a:	d205      	bcs.n	8004688 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800467c:	f000 f93a 	bl	80048f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e002      	b.n	800468e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800468e:	4a04      	ldr	r2, [pc, #16]	@ (80046a0 <prvSampleTimeNow+0x3c>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004694:	68fb      	ldr	r3, [r7, #12]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000df8 	.word	0x20000df8

080046a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d812      	bhi.n	80046f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e01b      	b.n	8004716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046de:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <prvInsertTimerInActiveList+0x7c>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f7fe f97c 	bl	80029e6 <vListInsert>
 80046ee:	e012      	b.n	8004716 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d206      	bcs.n	8004706 <prvInsertTimerInActiveList+0x62>
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e007      	b.n	8004716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004706:	4b07      	ldr	r3, [pc, #28]	@ (8004724 <prvInsertTimerInActiveList+0x80>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7fe f968 	bl	80029e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004716:	697b      	ldr	r3, [r7, #20]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000dec 	.word	0x20000dec
 8004724:	20000de8 	.word	0x20000de8

08004728 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	@ 0x38
 800472c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800472e:	e0ce      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	da19      	bge.n	800476a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	3304      	adds	r3, #4
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	61fb      	str	r3, [r7, #28]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800475a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004760:	6850      	ldr	r0, [r2, #4]
 8004762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	4611      	mov	r1, r2
 8004768:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f2c0 80ae 	blt.w	80048ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	3304      	adds	r3, #4
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe f968 	bl	8002a58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004788:	463b      	mov	r3, r7
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff6a 	bl	8004664 <prvSampleTimeNow>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b09      	cmp	r3, #9
 8004796:	f200 8097 	bhi.w	80048c8 <prvProcessReceivedCommands+0x1a0>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <prvProcessReceivedCommands+0x78>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047c9 	.word	0x080047c9
 80047ac:	0800483f 	.word	0x0800483f
 80047b0:	08004853 	.word	0x08004853
 80047b4:	0800489f 	.word	0x0800489f
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047c9 	.word	0x080047c9
 80047c0:	0800483f 	.word	0x0800483f
 80047c4:	08004853 	.word	0x08004853
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	18d1      	adds	r1, r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047e8:	f7ff ff5c 	bl	80046a4 <prvInsertTimerInActiveList>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d06c      	beq.n	80048cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d061      	beq.n	80048cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	441a      	add	r2, r3
 8004810:	2300      	movs	r3, #0
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	2100      	movs	r1, #0
 8004818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800481a:	f7ff fe01 	bl	8004420 <xTimerGenericCommand>
 800481e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d152      	bne.n	80048cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	61bb      	str	r3, [r7, #24]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	b2da      	uxtb	r2, r3
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004850:	e03d      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	b2da      	uxtb	r2, r3
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	617b      	str	r3, [r7, #20]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	18d1      	adds	r1, r2, r3
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004898:	f7ff ff04 	bl	80046a4 <prvInsertTimerInActiveList>
					break;
 800489c:	e017      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80048ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ae:	f000 fbeb 	bl	8005088 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048b2:	e00c      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048c6:	e002      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <prvProcessReceivedCommands+0x1a6>
					break;
 80048cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <prvProcessReceivedCommands+0x1c8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	1d39      	adds	r1, r7, #4
 80048d4:	2200      	movs	r2, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fbce 	bl	8003078 <xQueueReceive>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f47f af26 	bne.w	8004730 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3730      	adds	r7, #48	@ 0x30
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000df0 	.word	0x20000df0

080048f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048fa:	e049      	b.n	8004990 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048fc:	4b2e      	ldr	r3, [pc, #184]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004906:	4b2c      	ldr	r3, [pc, #176]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe f89f 	bl	8002a58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02f      	beq.n	8004990 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	d90e      	bls.n	8004960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fe f844 	bl	80029e6 <vListInsert>
 800495e:	e017      	b.n	8004990 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004960:	2300      	movs	r3, #0
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	2100      	movs	r1, #0
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff fd58 	bl	8004420 <xTimerGenericCommand>
 8004970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	603b      	str	r3, [r7, #0]
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1b0      	bne.n	80048fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <prvSwitchTimerLists+0xc8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a04      	ldr	r2, [pc, #16]	@ (80049b8 <prvSwitchTimerLists+0xc4>)
 80049a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049a8:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <prvSwitchTimerLists+0xc8>)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6013      	str	r3, [r2, #0]
}
 80049ae:	bf00      	nop
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000de8 	.word	0x20000de8
 80049bc:	20000dec 	.word	0x20000dec

080049c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049c6:	f000 f96f 	bl	8004ca8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049ca:	4b15      	ldr	r3, [pc, #84]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d120      	bne.n	8004a14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049d2:	4814      	ldr	r0, [pc, #80]	@ (8004a24 <prvCheckForValidListAndQueue+0x64>)
 80049d4:	f7fd ffb6 	bl	8002944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049d8:	4813      	ldr	r0, [pc, #76]	@ (8004a28 <prvCheckForValidListAndQueue+0x68>)
 80049da:	f7fd ffb3 	bl	8002944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049de:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <prvCheckForValidListAndQueue+0x6c>)
 80049e0:	4a10      	ldr	r2, [pc, #64]	@ (8004a24 <prvCheckForValidListAndQueue+0x64>)
 80049e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <prvCheckForValidListAndQueue+0x70>)
 80049e6:	4a10      	ldr	r2, [pc, #64]	@ (8004a28 <prvCheckForValidListAndQueue+0x68>)
 80049e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <prvCheckForValidListAndQueue+0x74>)
 80049f0:	4a11      	ldr	r2, [pc, #68]	@ (8004a38 <prvCheckForValidListAndQueue+0x78>)
 80049f2:	2110      	movs	r1, #16
 80049f4:	200a      	movs	r0, #10
 80049f6:	f7fe f8c3 	bl	8002b80 <xQueueGenericCreateStatic>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 80049fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <prvCheckForValidListAndQueue+0x60>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	490b      	ldr	r1, [pc, #44]	@ (8004a3c <prvCheckForValidListAndQueue+0x7c>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fd24 	bl	800345c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a14:	f000 f97a 	bl	8004d0c <vPortExitCritical>
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000df0 	.word	0x20000df0
 8004a24:	20000dc0 	.word	0x20000dc0
 8004a28:	20000dd4 	.word	0x20000dd4
 8004a2c:	20000de8 	.word	0x20000de8
 8004a30:	20000dec 	.word	0x20000dec
 8004a34:	20000e9c 	.word	0x20000e9c
 8004a38:	20000dfc 	.word	0x20000dfc
 8004a3c:	08005d84 	.word	0x08005d84

08004a40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f023 0201 	bic.w	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a70:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa4 <pxPortInitialiseStack+0x64>)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b14      	subs	r3, #20
 8004a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3b04      	subs	r3, #4
 8004a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f06f 0202 	mvn.w	r2, #2
 8004a8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3b20      	subs	r3, #32
 8004a94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a96:	68fb      	ldr	r3, [r7, #12]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	08004aa9 	.word	0x08004aa9

08004aa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ab2:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <prvTaskExitError+0x58>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d00b      	beq.n	8004ad4 <prvTaskExitError+0x2c>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	60fb      	str	r3, [r7, #12]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <prvTaskExitError+0x28>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60bb      	str	r3, [r7, #8]
}
 8004ae6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ae8:	bf00      	nop
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0fc      	beq.n	8004aea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2000000c 	.word	0x2000000c
	...

08004b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b10:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <pxCurrentTCBConst2>)
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	f380 8809 	msr	PSP, r0
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	4770      	bx	lr
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst2>:
 8004b30:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b38:	4808      	ldr	r0, [pc, #32]	@ (8004b5c <prvPortStartFirstTask+0x24>)
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f380 8808 	msr	MSP, r0
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8814 	msr	CONTROL, r0
 8004b4a:	b662      	cpsie	i
 8004b4c:	b661      	cpsie	f
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	df00      	svc	0
 8004b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b5a:	bf00      	nop
 8004b5c:	e000ed08 	.word	0xe000ed08

08004b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <xPortStartScheduler+0x124>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a47      	ldr	r2, [pc, #284]	@ (8004c88 <xPortStartScheduler+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10b      	bne.n	8004b88 <xPortStartScheduler+0x28>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b88:	4b3e      	ldr	r3, [pc, #248]	@ (8004c84 <xPortStartScheduler+0x124>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c8c <xPortStartScheduler+0x12c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10b      	bne.n	8004baa <xPortStartScheduler+0x4a>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	613b      	str	r3, [r7, #16]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004baa:	4b39      	ldr	r3, [pc, #228]	@ (8004c90 <xPortStartScheduler+0x130>)
 8004bac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	22ff      	movs	r2, #255	@ 0xff
 8004bba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4b31      	ldr	r3, [pc, #196]	@ (8004c94 <xPortStartScheduler+0x134>)
 8004bd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bd2:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bd8:	e009      	b.n	8004bee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004bda:	4b2f      	ldr	r3, [pc, #188]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004be2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf6:	2b80      	cmp	r3, #128	@ 0x80
 8004bf8:	d0ef      	beq.n	8004bda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bfa:	4b27      	ldr	r3, [pc, #156]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1c3 0307 	rsb	r3, r3, #7
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d00b      	beq.n	8004c1e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	60bb      	str	r3, [r7, #8]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c28:	4b1b      	ldr	r3, [pc, #108]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c30:	4a19      	ldr	r2, [pc, #100]	@ (8004c98 <xPortStartScheduler+0x138>)
 8004c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c3c:	4b17      	ldr	r3, [pc, #92]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c48:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a13      	ldr	r2, [pc, #76]	@ (8004c9c <xPortStartScheduler+0x13c>)
 8004c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c54:	f000 f8da 	bl	8004e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c58:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <xPortStartScheduler+0x140>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c5e:	f000 f8f9 	bl	8004e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c62:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <xPortStartScheduler+0x144>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a0f      	ldr	r2, [pc, #60]	@ (8004ca4 <xPortStartScheduler+0x144>)
 8004c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c6e:	f7ff ff63 	bl	8004b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c72:	f7ff f82b 	bl	8003ccc <vTaskSwitchContext>
	prvTaskExitError();
 8004c76:	f7ff ff17 	bl	8004aa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	e000ed00 	.word	0xe000ed00
 8004c88:	410fc271 	.word	0x410fc271
 8004c8c:	410fc270 	.word	0x410fc270
 8004c90:	e000e400 	.word	0xe000e400
 8004c94:	20000eec 	.word	0x20000eec
 8004c98:	20000ef0 	.word	0x20000ef0
 8004c9c:	e000ed20 	.word	0xe000ed20
 8004ca0:	2000000c 	.word	0x2000000c
 8004ca4:	e000ef34 	.word	0xe000ef34

08004ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
}
 8004cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <vPortEnterCritical+0x5c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d04 <vPortEnterCritical+0x5c>)
 8004cca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <vPortEnterCritical+0x5c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d110      	bne.n	8004cf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <vPortEnterCritical+0x60>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	603b      	str	r3, [r7, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <vPortEnterCritical+0x4a>
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <vPortExitCritical+0x26>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	607b      	str	r3, [r7, #4]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	4a08      	ldr	r2, [pc, #32]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d3c:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <vPortExitCritical+0x50>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <vPortExitCritical+0x44>
 8004d44:	2300      	movs	r3, #0
 8004d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f383 8811 	msr	BASEPRI, r3
}
 8004d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d60:	f3ef 8009 	mrs	r0, PSP
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <pxCurrentTCBConst>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f01e 0f10 	tst.w	lr, #16
 8004d70:	bf08      	it	eq
 8004d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	6010      	str	r0, [r2, #0]
 8004d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d84:	f380 8811 	msr	BASEPRI, r0
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f7fe ff9c 	bl	8003ccc <vTaskSwitchContext>
 8004d94:	f04f 0000 	mov.w	r0, #0
 8004d98:	f380 8811 	msr	BASEPRI, r0
 8004d9c:	bc09      	pop	{r0, r3}
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6808      	ldr	r0, [r1, #0]
 8004da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da6:	f01e 0f10 	tst.w	lr, #16
 8004daa:	bf08      	it	eq
 8004dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004db0:	f380 8809 	msr	PSP, r0
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst>:
 8004dc0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	607b      	str	r3, [r7, #4]
}
 8004de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004de2:	f7fe feb9 	bl	8003b58 <xTaskIncrementTick>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dec:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <xPortSysTickHandler+0x40>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f383 8811 	msr	BASEPRI, r3
}
 8004dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <vPortSetupTimerInterrupt+0x34>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <vPortSetupTimerInterrupt+0x38>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <vPortSetupTimerInterrupt+0x3c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0a      	ldr	r2, [pc, #40]	@ (8004e4c <vPortSetupTimerInterrupt+0x40>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	099b      	lsrs	r3, r3, #6
 8004e28:	4a09      	ldr	r2, [pc, #36]	@ (8004e50 <vPortSetupTimerInterrupt+0x44>)
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e2e:	4b04      	ldr	r3, [pc, #16]	@ (8004e40 <vPortSetupTimerInterrupt+0x34>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e010 	.word	0xe000e010
 8004e44:	e000e018 	.word	0xe000e018
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	10624dd3 	.word	0x10624dd3
 8004e50:	e000e014 	.word	0xe000e014

08004e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004e64 <vPortEnableVFP+0x10>
 8004e58:	6801      	ldr	r1, [r0, #0]
 8004e5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004e5e:	6001      	str	r1, [r0, #0]
 8004e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e62:	bf00      	nop
 8004e64:	e000ed88 	.word	0xe000ed88

08004e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e6e:	f3ef 8305 	mrs	r3, IPSR
 8004e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	d915      	bls.n	8004ea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e7a:	4a18      	ldr	r2, [pc, #96]	@ (8004edc <vPortValidateInterruptPriority+0x74>)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e84:	4b16      	ldr	r3, [pc, #88]	@ (8004ee0 <vPortValidateInterruptPriority+0x78>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	7afa      	ldrb	r2, [r7, #11]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d20b      	bcs.n	8004ea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <vPortValidateInterruptPriority+0x7c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004eae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee8 <vPortValidateInterruptPriority+0x80>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d90b      	bls.n	8004ece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	603b      	str	r3, [r7, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vPortValidateInterruptPriority+0x62>
	}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e3f0 	.word	0xe000e3f0
 8004ee0:	20000eec 	.word	0x20000eec
 8004ee4:	e000ed0c 	.word	0xe000ed0c
 8004ee8:	20000ef0 	.word	0x20000ef0

08004eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	@ 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ef8:	f7fe fd72 	bl	80039e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004efc:	4b5c      	ldr	r3, [pc, #368]	@ (8005070 <pvPortMalloc+0x184>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f04:	f000 f924 	bl	8005150 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f08:	4b5a      	ldr	r3, [pc, #360]	@ (8005074 <pvPortMalloc+0x188>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 8095 	bne.w	8005040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01e      	beq.n	8004f5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d015      	beq.n	8004f5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	3308      	adds	r3, #8
 8004f36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <pvPortMalloc+0x6e>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	617b      	str	r3, [r7, #20]
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d06f      	beq.n	8005040 <pvPortMalloc+0x154>
 8004f60:	4b45      	ldr	r3, [pc, #276]	@ (8005078 <pvPortMalloc+0x18c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d86a      	bhi.n	8005040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f6a:	4b44      	ldr	r3, [pc, #272]	@ (800507c <pvPortMalloc+0x190>)
 8004f6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f6e:	4b43      	ldr	r3, [pc, #268]	@ (800507c <pvPortMalloc+0x190>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f74:	e004      	b.n	8004f80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d903      	bls.n	8004f92 <pvPortMalloc+0xa6>
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f1      	bne.n	8004f76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f92:	4b37      	ldr	r3, [pc, #220]	@ (8005070 <pvPortMalloc+0x184>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d051      	beq.n	8005040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4413      	add	r3, r2
 8004fa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	1ad2      	subs	r2, r2, r3
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d920      	bls.n	8005000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <pvPortMalloc+0xfc>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	613b      	str	r3, [r7, #16]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ffa:	69b8      	ldr	r0, [r7, #24]
 8004ffc:	f000 f90a 	bl	8005214 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005000:	4b1d      	ldr	r3, [pc, #116]	@ (8005078 <pvPortMalloc+0x18c>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	4a1b      	ldr	r2, [pc, #108]	@ (8005078 <pvPortMalloc+0x18c>)
 800500c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800500e:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <pvPortMalloc+0x18c>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <pvPortMalloc+0x194>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d203      	bcs.n	8005022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800501a:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <pvPortMalloc+0x18c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a18      	ldr	r2, [pc, #96]	@ (8005080 <pvPortMalloc+0x194>)
 8005020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4b13      	ldr	r3, [pc, #76]	@ (8005074 <pvPortMalloc+0x188>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	431a      	orrs	r2, r3
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005036:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <pvPortMalloc+0x198>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a11      	ldr	r2, [pc, #68]	@ (8005084 <pvPortMalloc+0x198>)
 800503e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005040:	f7fe fcdc 	bl	80039fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <pvPortMalloc+0x17a>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60fb      	str	r3, [r7, #12]
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	e7fd      	b.n	8005062 <pvPortMalloc+0x176>
	return pvReturn;
 8005066:	69fb      	ldr	r3, [r7, #28]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3728      	adds	r7, #40	@ 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20004afc 	.word	0x20004afc
 8005074:	20004b10 	.word	0x20004b10
 8005078:	20004b00 	.word	0x20004b00
 800507c:	20004af4 	.word	0x20004af4
 8005080:	20004b04 	.word	0x20004b04
 8005084:	20004b08 	.word	0x20004b08

08005088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d04f      	beq.n	800513a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800509a:	2308      	movs	r3, #8
 800509c:	425b      	negs	r3, r3
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4413      	add	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <vPortFree+0xbc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <vPortFree+0x46>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60fb      	str	r3, [r7, #12]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <vPortFree+0x66>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60bb      	str	r3, [r7, #8]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <vPortFree+0xbc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01e      	beq.n	800513a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11a      	bne.n	800513a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4b0e      	ldr	r3, [pc, #56]	@ (8005144 <vPortFree+0xbc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	43db      	mvns	r3, r3
 800510e:	401a      	ands	r2, r3
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005114:	f7fe fc64 	bl	80039e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <vPortFree+0xc0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4413      	add	r3, r2
 8005122:	4a09      	ldr	r2, [pc, #36]	@ (8005148 <vPortFree+0xc0>)
 8005124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005126:	6938      	ldr	r0, [r7, #16]
 8005128:	f000 f874 	bl	8005214 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800512c:	4b07      	ldr	r3, [pc, #28]	@ (800514c <vPortFree+0xc4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a06      	ldr	r2, [pc, #24]	@ (800514c <vPortFree+0xc4>)
 8005134:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005136:	f7fe fc61 	bl	80039fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800513a:	bf00      	nop
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20004b10 	.word	0x20004b10
 8005148:	20004b00 	.word	0x20004b00
 800514c:	20004b0c 	.word	0x20004b0c

08005150 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005156:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800515a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800515c:	4b27      	ldr	r3, [pc, #156]	@ (80051fc <prvHeapInit+0xac>)
 800515e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3307      	adds	r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0307 	bic.w	r3, r3, #7
 8005176:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <prvHeapInit+0xac>)
 8005180:	4413      	add	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005188:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <prvHeapInit+0xb0>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800518e:	4b1c      	ldr	r3, [pc, #112]	@ (8005200 <prvHeapInit+0xb0>)
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800519c:	2208      	movs	r2, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0307 	bic.w	r3, r3, #7
 80051aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a15      	ldr	r2, [pc, #84]	@ (8005204 <prvHeapInit+0xb4>)
 80051b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051b2:	4b14      	ldr	r3, [pc, #80]	@ (8005204 <prvHeapInit+0xb4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ba:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <prvHeapInit+0xb4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <prvHeapInit+0xb4>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <prvHeapInit+0xb8>)
 80051de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a09      	ldr	r2, [pc, #36]	@ (800520c <prvHeapInit+0xbc>)
 80051e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051e8:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <prvHeapInit+0xc0>)
 80051ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000ef4 	.word	0x20000ef4
 8005200:	20004af4 	.word	0x20004af4
 8005204:	20004afc 	.word	0x20004afc
 8005208:	20004b04 	.word	0x20004b04
 800520c:	20004b00 	.word	0x20004b00
 8005210:	20004b10 	.word	0x20004b10

08005214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800521c:	4b28      	ldr	r3, [pc, #160]	@ (80052c0 <prvInsertBlockIntoFreeList+0xac>)
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e002      	b.n	8005228 <prvInsertBlockIntoFreeList+0x14>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d8f7      	bhi.n	8005222 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d108      	bne.n	8005256 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d118      	bne.n	800529c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d00d      	beq.n	8005292 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e008      	b.n	80052a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005292:	4b0c      	ldr	r3, [pc, #48]	@ (80052c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e003      	b.n	80052a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d002      	beq.n	80052b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20004af4 	.word	0x20004af4
 80052c4:	20004afc 	.word	0x20004afc

080052c8 <std>:
 80052c8:	2300      	movs	r3, #0
 80052ca:	b510      	push	{r4, lr}
 80052cc:	4604      	mov	r4, r0
 80052ce:	e9c0 3300 	strd	r3, r3, [r0]
 80052d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052d6:	6083      	str	r3, [r0, #8]
 80052d8:	8181      	strh	r1, [r0, #12]
 80052da:	6643      	str	r3, [r0, #100]	@ 0x64
 80052dc:	81c2      	strh	r2, [r0, #14]
 80052de:	6183      	str	r3, [r0, #24]
 80052e0:	4619      	mov	r1, r3
 80052e2:	2208      	movs	r2, #8
 80052e4:	305c      	adds	r0, #92	@ 0x5c
 80052e6:	f000 f9e7 	bl	80056b8 <memset>
 80052ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <std+0x58>)
 80052ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <std+0x5c>)
 80052f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <std+0x60>)
 80052f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <std+0x64>)
 80052f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80052fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <std+0x68>)
 80052fc:	6224      	str	r4, [r4, #32]
 80052fe:	429c      	cmp	r4, r3
 8005300:	d006      	beq.n	8005310 <std+0x48>
 8005302:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005306:	4294      	cmp	r4, r2
 8005308:	d002      	beq.n	8005310 <std+0x48>
 800530a:	33d0      	adds	r3, #208	@ 0xd0
 800530c:	429c      	cmp	r4, r3
 800530e:	d105      	bne.n	800531c <std+0x54>
 8005310:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005318:	f000 baa4 	b.w	8005864 <__retarget_lock_init_recursive>
 800531c:	bd10      	pop	{r4, pc}
 800531e:	bf00      	nop
 8005320:	08005509 	.word	0x08005509
 8005324:	0800552b 	.word	0x0800552b
 8005328:	08005563 	.word	0x08005563
 800532c:	08005587 	.word	0x08005587
 8005330:	20004b14 	.word	0x20004b14

08005334 <stdio_exit_handler>:
 8005334:	4a02      	ldr	r2, [pc, #8]	@ (8005340 <stdio_exit_handler+0xc>)
 8005336:	4903      	ldr	r1, [pc, #12]	@ (8005344 <stdio_exit_handler+0x10>)
 8005338:	4803      	ldr	r0, [pc, #12]	@ (8005348 <stdio_exit_handler+0x14>)
 800533a:	f000 b869 	b.w	8005410 <_fwalk_sglue>
 800533e:	bf00      	nop
 8005340:	20000010 	.word	0x20000010
 8005344:	08005b81 	.word	0x08005b81
 8005348:	20000020 	.word	0x20000020

0800534c <cleanup_stdio>:
 800534c:	6841      	ldr	r1, [r0, #4]
 800534e:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <cleanup_stdio+0x34>)
 8005350:	4299      	cmp	r1, r3
 8005352:	b510      	push	{r4, lr}
 8005354:	4604      	mov	r4, r0
 8005356:	d001      	beq.n	800535c <cleanup_stdio+0x10>
 8005358:	f000 fc12 	bl	8005b80 <_fflush_r>
 800535c:	68a1      	ldr	r1, [r4, #8]
 800535e:	4b09      	ldr	r3, [pc, #36]	@ (8005384 <cleanup_stdio+0x38>)
 8005360:	4299      	cmp	r1, r3
 8005362:	d002      	beq.n	800536a <cleanup_stdio+0x1e>
 8005364:	4620      	mov	r0, r4
 8005366:	f000 fc0b 	bl	8005b80 <_fflush_r>
 800536a:	68e1      	ldr	r1, [r4, #12]
 800536c:	4b06      	ldr	r3, [pc, #24]	@ (8005388 <cleanup_stdio+0x3c>)
 800536e:	4299      	cmp	r1, r3
 8005370:	d004      	beq.n	800537c <cleanup_stdio+0x30>
 8005372:	4620      	mov	r0, r4
 8005374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005378:	f000 bc02 	b.w	8005b80 <_fflush_r>
 800537c:	bd10      	pop	{r4, pc}
 800537e:	bf00      	nop
 8005380:	20004b14 	.word	0x20004b14
 8005384:	20004b7c 	.word	0x20004b7c
 8005388:	20004be4 	.word	0x20004be4

0800538c <global_stdio_init.part.0>:
 800538c:	b510      	push	{r4, lr}
 800538e:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <global_stdio_init.part.0+0x30>)
 8005390:	4c0b      	ldr	r4, [pc, #44]	@ (80053c0 <global_stdio_init.part.0+0x34>)
 8005392:	4a0c      	ldr	r2, [pc, #48]	@ (80053c4 <global_stdio_init.part.0+0x38>)
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	4620      	mov	r0, r4
 8005398:	2200      	movs	r2, #0
 800539a:	2104      	movs	r1, #4
 800539c:	f7ff ff94 	bl	80052c8 <std>
 80053a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053a4:	2201      	movs	r2, #1
 80053a6:	2109      	movs	r1, #9
 80053a8:	f7ff ff8e 	bl	80052c8 <std>
 80053ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053b0:	2202      	movs	r2, #2
 80053b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b6:	2112      	movs	r1, #18
 80053b8:	f7ff bf86 	b.w	80052c8 <std>
 80053bc:	20004c4c 	.word	0x20004c4c
 80053c0:	20004b14 	.word	0x20004b14
 80053c4:	08005335 	.word	0x08005335

080053c8 <__sfp_lock_acquire>:
 80053c8:	4801      	ldr	r0, [pc, #4]	@ (80053d0 <__sfp_lock_acquire+0x8>)
 80053ca:	f000 ba4c 	b.w	8005866 <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	20004c55 	.word	0x20004c55

080053d4 <__sfp_lock_release>:
 80053d4:	4801      	ldr	r0, [pc, #4]	@ (80053dc <__sfp_lock_release+0x8>)
 80053d6:	f000 ba47 	b.w	8005868 <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	20004c55 	.word	0x20004c55

080053e0 <__sinit>:
 80053e0:	b510      	push	{r4, lr}
 80053e2:	4604      	mov	r4, r0
 80053e4:	f7ff fff0 	bl	80053c8 <__sfp_lock_acquire>
 80053e8:	6a23      	ldr	r3, [r4, #32]
 80053ea:	b11b      	cbz	r3, 80053f4 <__sinit+0x14>
 80053ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f0:	f7ff bff0 	b.w	80053d4 <__sfp_lock_release>
 80053f4:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <__sinit+0x28>)
 80053f6:	6223      	str	r3, [r4, #32]
 80053f8:	4b04      	ldr	r3, [pc, #16]	@ (800540c <__sinit+0x2c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f5      	bne.n	80053ec <__sinit+0xc>
 8005400:	f7ff ffc4 	bl	800538c <global_stdio_init.part.0>
 8005404:	e7f2      	b.n	80053ec <__sinit+0xc>
 8005406:	bf00      	nop
 8005408:	0800534d 	.word	0x0800534d
 800540c:	20004c4c 	.word	0x20004c4c

08005410 <_fwalk_sglue>:
 8005410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005414:	4607      	mov	r7, r0
 8005416:	4688      	mov	r8, r1
 8005418:	4614      	mov	r4, r2
 800541a:	2600      	movs	r6, #0
 800541c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005420:	f1b9 0901 	subs.w	r9, r9, #1
 8005424:	d505      	bpl.n	8005432 <_fwalk_sglue+0x22>
 8005426:	6824      	ldr	r4, [r4, #0]
 8005428:	2c00      	cmp	r4, #0
 800542a:	d1f7      	bne.n	800541c <_fwalk_sglue+0xc>
 800542c:	4630      	mov	r0, r6
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005432:	89ab      	ldrh	r3, [r5, #12]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d907      	bls.n	8005448 <_fwalk_sglue+0x38>
 8005438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800543c:	3301      	adds	r3, #1
 800543e:	d003      	beq.n	8005448 <_fwalk_sglue+0x38>
 8005440:	4629      	mov	r1, r5
 8005442:	4638      	mov	r0, r7
 8005444:	47c0      	blx	r8
 8005446:	4306      	orrs	r6, r0
 8005448:	3568      	adds	r5, #104	@ 0x68
 800544a:	e7e9      	b.n	8005420 <_fwalk_sglue+0x10>

0800544c <_puts_r>:
 800544c:	6a03      	ldr	r3, [r0, #32]
 800544e:	b570      	push	{r4, r5, r6, lr}
 8005450:	6884      	ldr	r4, [r0, #8]
 8005452:	4605      	mov	r5, r0
 8005454:	460e      	mov	r6, r1
 8005456:	b90b      	cbnz	r3, 800545c <_puts_r+0x10>
 8005458:	f7ff ffc2 	bl	80053e0 <__sinit>
 800545c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800545e:	07db      	lsls	r3, r3, #31
 8005460:	d405      	bmi.n	800546e <_puts_r+0x22>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	0598      	lsls	r0, r3, #22
 8005466:	d402      	bmi.n	800546e <_puts_r+0x22>
 8005468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800546a:	f000 f9fc 	bl	8005866 <__retarget_lock_acquire_recursive>
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	0719      	lsls	r1, r3, #28
 8005472:	d502      	bpl.n	800547a <_puts_r+0x2e>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d135      	bne.n	80054e6 <_puts_r+0x9a>
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f8c5 	bl	800560c <__swsetup_r>
 8005482:	b380      	cbz	r0, 80054e6 <_puts_r+0x9a>
 8005484:	f04f 35ff 	mov.w	r5, #4294967295
 8005488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800548a:	07da      	lsls	r2, r3, #31
 800548c:	d405      	bmi.n	800549a <_puts_r+0x4e>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	d402      	bmi.n	800549a <_puts_r+0x4e>
 8005494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005496:	f000 f9e7 	bl	8005868 <__retarget_lock_release_recursive>
 800549a:	4628      	mov	r0, r5
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da04      	bge.n	80054ac <_puts_r+0x60>
 80054a2:	69a2      	ldr	r2, [r4, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	dc17      	bgt.n	80054d8 <_puts_r+0x8c>
 80054a8:	290a      	cmp	r1, #10
 80054aa:	d015      	beq.n	80054d8 <_puts_r+0x8c>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	6022      	str	r2, [r4, #0]
 80054b2:	7019      	strb	r1, [r3, #0]
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054ba:	3b01      	subs	r3, #1
 80054bc:	60a3      	str	r3, [r4, #8]
 80054be:	2900      	cmp	r1, #0
 80054c0:	d1ed      	bne.n	800549e <_puts_r+0x52>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da11      	bge.n	80054ea <_puts_r+0x9e>
 80054c6:	4622      	mov	r2, r4
 80054c8:	210a      	movs	r1, #10
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f85f 	bl	800558e <__swbuf_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d0d7      	beq.n	8005484 <_puts_r+0x38>
 80054d4:	250a      	movs	r5, #10
 80054d6:	e7d7      	b.n	8005488 <_puts_r+0x3c>
 80054d8:	4622      	mov	r2, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f857 	bl	800558e <__swbuf_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1e7      	bne.n	80054b4 <_puts_r+0x68>
 80054e4:	e7ce      	b.n	8005484 <_puts_r+0x38>
 80054e6:	3e01      	subs	r6, #1
 80054e8:	e7e4      	b.n	80054b4 <_puts_r+0x68>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	6022      	str	r2, [r4, #0]
 80054f0:	220a      	movs	r2, #10
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e7ee      	b.n	80054d4 <_puts_r+0x88>
	...

080054f8 <puts>:
 80054f8:	4b02      	ldr	r3, [pc, #8]	@ (8005504 <puts+0xc>)
 80054fa:	4601      	mov	r1, r0
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f7ff bfa5 	b.w	800544c <_puts_r>
 8005502:	bf00      	nop
 8005504:	2000001c 	.word	0x2000001c

08005508 <__sread>:
 8005508:	b510      	push	{r4, lr}
 800550a:	460c      	mov	r4, r1
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	f000 f95a 	bl	80057c8 <_read_r>
 8005514:	2800      	cmp	r0, #0
 8005516:	bfab      	itete	ge
 8005518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800551a:	89a3      	ldrhlt	r3, [r4, #12]
 800551c:	181b      	addge	r3, r3, r0
 800551e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005522:	bfac      	ite	ge
 8005524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005526:	81a3      	strhlt	r3, [r4, #12]
 8005528:	bd10      	pop	{r4, pc}

0800552a <__swrite>:
 800552a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552e:	461f      	mov	r7, r3
 8005530:	898b      	ldrh	r3, [r1, #12]
 8005532:	05db      	lsls	r3, r3, #23
 8005534:	4605      	mov	r5, r0
 8005536:	460c      	mov	r4, r1
 8005538:	4616      	mov	r6, r2
 800553a:	d505      	bpl.n	8005548 <__swrite+0x1e>
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	2302      	movs	r3, #2
 8005542:	2200      	movs	r2, #0
 8005544:	f000 f92e 	bl	80057a4 <_lseek_r>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800554e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	4632      	mov	r2, r6
 8005556:	463b      	mov	r3, r7
 8005558:	4628      	mov	r0, r5
 800555a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	f000 b945 	b.w	80057ec <_write_r>

08005562 <__sseek>:
 8005562:	b510      	push	{r4, lr}
 8005564:	460c      	mov	r4, r1
 8005566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556a:	f000 f91b 	bl	80057a4 <_lseek_r>
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	bf15      	itete	ne
 8005574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800557a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800557e:	81a3      	strheq	r3, [r4, #12]
 8005580:	bf18      	it	ne
 8005582:	81a3      	strhne	r3, [r4, #12]
 8005584:	bd10      	pop	{r4, pc}

08005586 <__sclose>:
 8005586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558a:	f000 b89d 	b.w	80056c8 <_close_r>

0800558e <__swbuf_r>:
 800558e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005590:	460e      	mov	r6, r1
 8005592:	4614      	mov	r4, r2
 8005594:	4605      	mov	r5, r0
 8005596:	b118      	cbz	r0, 80055a0 <__swbuf_r+0x12>
 8005598:	6a03      	ldr	r3, [r0, #32]
 800559a:	b90b      	cbnz	r3, 80055a0 <__swbuf_r+0x12>
 800559c:	f7ff ff20 	bl	80053e0 <__sinit>
 80055a0:	69a3      	ldr	r3, [r4, #24]
 80055a2:	60a3      	str	r3, [r4, #8]
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	071a      	lsls	r2, r3, #28
 80055a8:	d501      	bpl.n	80055ae <__swbuf_r+0x20>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	b943      	cbnz	r3, 80055c0 <__swbuf_r+0x32>
 80055ae:	4621      	mov	r1, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 f82b 	bl	800560c <__swsetup_r>
 80055b6:	b118      	cbz	r0, 80055c0 <__swbuf_r+0x32>
 80055b8:	f04f 37ff 	mov.w	r7, #4294967295
 80055bc:	4638      	mov	r0, r7
 80055be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	6922      	ldr	r2, [r4, #16]
 80055c4:	1a98      	subs	r0, r3, r2
 80055c6:	6963      	ldr	r3, [r4, #20]
 80055c8:	b2f6      	uxtb	r6, r6
 80055ca:	4283      	cmp	r3, r0
 80055cc:	4637      	mov	r7, r6
 80055ce:	dc05      	bgt.n	80055dc <__swbuf_r+0x4e>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 fad4 	bl	8005b80 <_fflush_r>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1ed      	bne.n	80055b8 <__swbuf_r+0x2a>
 80055dc:	68a3      	ldr	r3, [r4, #8]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60a3      	str	r3, [r4, #8]
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	6022      	str	r2, [r4, #0]
 80055e8:	701e      	strb	r6, [r3, #0]
 80055ea:	6962      	ldr	r2, [r4, #20]
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d004      	beq.n	80055fc <__swbuf_r+0x6e>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	07db      	lsls	r3, r3, #31
 80055f6:	d5e1      	bpl.n	80055bc <__swbuf_r+0x2e>
 80055f8:	2e0a      	cmp	r6, #10
 80055fa:	d1df      	bne.n	80055bc <__swbuf_r+0x2e>
 80055fc:	4621      	mov	r1, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fabe 	bl	8005b80 <_fflush_r>
 8005604:	2800      	cmp	r0, #0
 8005606:	d0d9      	beq.n	80055bc <__swbuf_r+0x2e>
 8005608:	e7d6      	b.n	80055b8 <__swbuf_r+0x2a>
	...

0800560c <__swsetup_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <__swsetup_r+0xa8>)
 8005610:	4605      	mov	r5, r0
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	460c      	mov	r4, r1
 8005616:	b118      	cbz	r0, 8005620 <__swsetup_r+0x14>
 8005618:	6a03      	ldr	r3, [r0, #32]
 800561a:	b90b      	cbnz	r3, 8005620 <__swsetup_r+0x14>
 800561c:	f7ff fee0 	bl	80053e0 <__sinit>
 8005620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005624:	0719      	lsls	r1, r3, #28
 8005626:	d422      	bmi.n	800566e <__swsetup_r+0x62>
 8005628:	06da      	lsls	r2, r3, #27
 800562a:	d407      	bmi.n	800563c <__swsetup_r+0x30>
 800562c:	2209      	movs	r2, #9
 800562e:	602a      	str	r2, [r5, #0]
 8005630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	e033      	b.n	80056a4 <__swsetup_r+0x98>
 800563c:	0758      	lsls	r0, r3, #29
 800563e:	d512      	bpl.n	8005666 <__swsetup_r+0x5a>
 8005640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005642:	b141      	cbz	r1, 8005656 <__swsetup_r+0x4a>
 8005644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005648:	4299      	cmp	r1, r3
 800564a:	d002      	beq.n	8005652 <__swsetup_r+0x46>
 800564c:	4628      	mov	r0, r5
 800564e:	f000 f91b 	bl	8005888 <_free_r>
 8005652:	2300      	movs	r3, #0
 8005654:	6363      	str	r3, [r4, #52]	@ 0x34
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800565c:	81a3      	strh	r3, [r4, #12]
 800565e:	2300      	movs	r3, #0
 8005660:	6063      	str	r3, [r4, #4]
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f043 0308 	orr.w	r3, r3, #8
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	b94b      	cbnz	r3, 8005686 <__swsetup_r+0x7a>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567c:	d003      	beq.n	8005686 <__swsetup_r+0x7a>
 800567e:	4621      	mov	r1, r4
 8005680:	4628      	mov	r0, r5
 8005682:	f000 facb 	bl	8005c1c <__smakebuf_r>
 8005686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800568a:	f013 0201 	ands.w	r2, r3, #1
 800568e:	d00a      	beq.n	80056a6 <__swsetup_r+0x9a>
 8005690:	2200      	movs	r2, #0
 8005692:	60a2      	str	r2, [r4, #8]
 8005694:	6962      	ldr	r2, [r4, #20]
 8005696:	4252      	negs	r2, r2
 8005698:	61a2      	str	r2, [r4, #24]
 800569a:	6922      	ldr	r2, [r4, #16]
 800569c:	b942      	cbnz	r2, 80056b0 <__swsetup_r+0xa4>
 800569e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056a2:	d1c5      	bne.n	8005630 <__swsetup_r+0x24>
 80056a4:	bd38      	pop	{r3, r4, r5, pc}
 80056a6:	0799      	lsls	r1, r3, #30
 80056a8:	bf58      	it	pl
 80056aa:	6962      	ldrpl	r2, [r4, #20]
 80056ac:	60a2      	str	r2, [r4, #8]
 80056ae:	e7f4      	b.n	800569a <__swsetup_r+0x8e>
 80056b0:	2000      	movs	r0, #0
 80056b2:	e7f7      	b.n	80056a4 <__swsetup_r+0x98>
 80056b4:	2000001c 	.word	0x2000001c

080056b8 <memset>:
 80056b8:	4402      	add	r2, r0
 80056ba:	4603      	mov	r3, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <_close_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d06      	ldr	r5, [pc, #24]	@ (80056e4 <_close_r+0x1c>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fb fa05 	bl	8000ae2 <_close>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_close_r+0x1a>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_close_r+0x1a>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20004c50 	.word	0x20004c50

080056e8 <_reclaim_reent>:
 80056e8:	4b2d      	ldr	r3, [pc, #180]	@ (80057a0 <_reclaim_reent+0xb8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4283      	cmp	r3, r0
 80056ee:	b570      	push	{r4, r5, r6, lr}
 80056f0:	4604      	mov	r4, r0
 80056f2:	d053      	beq.n	800579c <_reclaim_reent+0xb4>
 80056f4:	69c3      	ldr	r3, [r0, #28]
 80056f6:	b31b      	cbz	r3, 8005740 <_reclaim_reent+0x58>
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	b163      	cbz	r3, 8005716 <_reclaim_reent+0x2e>
 80056fc:	2500      	movs	r5, #0
 80056fe:	69e3      	ldr	r3, [r4, #28]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	5959      	ldr	r1, [r3, r5]
 8005704:	b9b1      	cbnz	r1, 8005734 <_reclaim_reent+0x4c>
 8005706:	3504      	adds	r5, #4
 8005708:	2d80      	cmp	r5, #128	@ 0x80
 800570a:	d1f8      	bne.n	80056fe <_reclaim_reent+0x16>
 800570c:	69e3      	ldr	r3, [r4, #28]
 800570e:	4620      	mov	r0, r4
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	f000 f8b9 	bl	8005888 <_free_r>
 8005716:	69e3      	ldr	r3, [r4, #28]
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	b111      	cbz	r1, 8005722 <_reclaim_reent+0x3a>
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f8b3 	bl	8005888 <_free_r>
 8005722:	69e3      	ldr	r3, [r4, #28]
 8005724:	689d      	ldr	r5, [r3, #8]
 8005726:	b15d      	cbz	r5, 8005740 <_reclaim_reent+0x58>
 8005728:	4629      	mov	r1, r5
 800572a:	4620      	mov	r0, r4
 800572c:	682d      	ldr	r5, [r5, #0]
 800572e:	f000 f8ab 	bl	8005888 <_free_r>
 8005732:	e7f8      	b.n	8005726 <_reclaim_reent+0x3e>
 8005734:	680e      	ldr	r6, [r1, #0]
 8005736:	4620      	mov	r0, r4
 8005738:	f000 f8a6 	bl	8005888 <_free_r>
 800573c:	4631      	mov	r1, r6
 800573e:	e7e1      	b.n	8005704 <_reclaim_reent+0x1c>
 8005740:	6961      	ldr	r1, [r4, #20]
 8005742:	b111      	cbz	r1, 800574a <_reclaim_reent+0x62>
 8005744:	4620      	mov	r0, r4
 8005746:	f000 f89f 	bl	8005888 <_free_r>
 800574a:	69e1      	ldr	r1, [r4, #28]
 800574c:	b111      	cbz	r1, 8005754 <_reclaim_reent+0x6c>
 800574e:	4620      	mov	r0, r4
 8005750:	f000 f89a 	bl	8005888 <_free_r>
 8005754:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005756:	b111      	cbz	r1, 800575e <_reclaim_reent+0x76>
 8005758:	4620      	mov	r0, r4
 800575a:	f000 f895 	bl	8005888 <_free_r>
 800575e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005760:	b111      	cbz	r1, 8005768 <_reclaim_reent+0x80>
 8005762:	4620      	mov	r0, r4
 8005764:	f000 f890 	bl	8005888 <_free_r>
 8005768:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800576a:	b111      	cbz	r1, 8005772 <_reclaim_reent+0x8a>
 800576c:	4620      	mov	r0, r4
 800576e:	f000 f88b 	bl	8005888 <_free_r>
 8005772:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005774:	b111      	cbz	r1, 800577c <_reclaim_reent+0x94>
 8005776:	4620      	mov	r0, r4
 8005778:	f000 f886 	bl	8005888 <_free_r>
 800577c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800577e:	b111      	cbz	r1, 8005786 <_reclaim_reent+0x9e>
 8005780:	4620      	mov	r0, r4
 8005782:	f000 f881 	bl	8005888 <_free_r>
 8005786:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005788:	b111      	cbz	r1, 8005790 <_reclaim_reent+0xa8>
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f87c 	bl	8005888 <_free_r>
 8005790:	6a23      	ldr	r3, [r4, #32]
 8005792:	b11b      	cbz	r3, 800579c <_reclaim_reent+0xb4>
 8005794:	4620      	mov	r0, r4
 8005796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800579a:	4718      	bx	r3
 800579c:	bd70      	pop	{r4, r5, r6, pc}
 800579e:	bf00      	nop
 80057a0:	2000001c 	.word	0x2000001c

080057a4 <_lseek_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d07      	ldr	r5, [pc, #28]	@ (80057c4 <_lseek_r+0x20>)
 80057a8:	4604      	mov	r4, r0
 80057aa:	4608      	mov	r0, r1
 80057ac:	4611      	mov	r1, r2
 80057ae:	2200      	movs	r2, #0
 80057b0:	602a      	str	r2, [r5, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f7fb f9bc 	bl	8000b30 <_lseek>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_lseek_r+0x1e>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_lseek_r+0x1e>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	20004c50 	.word	0x20004c50

080057c8 <_read_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	4d07      	ldr	r5, [pc, #28]	@ (80057e8 <_read_r+0x20>)
 80057cc:	4604      	mov	r4, r0
 80057ce:	4608      	mov	r0, r1
 80057d0:	4611      	mov	r1, r2
 80057d2:	2200      	movs	r2, #0
 80057d4:	602a      	str	r2, [r5, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f7fb f94a 	bl	8000a70 <_read>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_read_r+0x1e>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_read_r+0x1e>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20004c50 	.word	0x20004c50

080057ec <_write_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d07      	ldr	r5, [pc, #28]	@ (800580c <_write_r+0x20>)
 80057f0:	4604      	mov	r4, r0
 80057f2:	4608      	mov	r0, r1
 80057f4:	4611      	mov	r1, r2
 80057f6:	2200      	movs	r2, #0
 80057f8:	602a      	str	r2, [r5, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f7fb f955 	bl	8000aaa <_write>
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	d102      	bne.n	800580a <_write_r+0x1e>
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	b103      	cbz	r3, 800580a <_write_r+0x1e>
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	20004c50 	.word	0x20004c50

08005810 <__errno>:
 8005810:	4b01      	ldr	r3, [pc, #4]	@ (8005818 <__errno+0x8>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	2000001c 	.word	0x2000001c

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4d0d      	ldr	r5, [pc, #52]	@ (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	@ (8005858 <__libc_init_array+0x3c>)
 8005822:	1b64      	subs	r4, r4, r5
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2600      	movs	r6, #0
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4d0b      	ldr	r5, [pc, #44]	@ (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	@ (8005860 <__libc_init_array+0x44>)
 8005830:	f000 fa62 	bl	8005cf8 <_init>
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2600      	movs	r6, #0
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	08005e0c 	.word	0x08005e0c
 8005858:	08005e0c 	.word	0x08005e0c
 800585c:	08005e0c 	.word	0x08005e0c
 8005860:	08005e10 	.word	0x08005e10

08005864 <__retarget_lock_init_recursive>:
 8005864:	4770      	bx	lr

08005866 <__retarget_lock_acquire_recursive>:
 8005866:	4770      	bx	lr

08005868 <__retarget_lock_release_recursive>:
 8005868:	4770      	bx	lr

0800586a <memcpy>:
 800586a:	440a      	add	r2, r1
 800586c:	4291      	cmp	r1, r2
 800586e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005872:	d100      	bne.n	8005876 <memcpy+0xc>
 8005874:	4770      	bx	lr
 8005876:	b510      	push	{r4, lr}
 8005878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005880:	4291      	cmp	r1, r2
 8005882:	d1f9      	bne.n	8005878 <memcpy+0xe>
 8005884:	bd10      	pop	{r4, pc}
	...

08005888 <_free_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	d041      	beq.n	8005914 <_free_r+0x8c>
 8005890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005894:	1f0c      	subs	r4, r1, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfb8      	it	lt
 800589a:	18e4      	addlt	r4, r4, r3
 800589c:	f000 f8e0 	bl	8005a60 <__malloc_lock>
 80058a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <_free_r+0x90>)
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	b933      	cbnz	r3, 80058b4 <_free_r+0x2c>
 80058a6:	6063      	str	r3, [r4, #4]
 80058a8:	6014      	str	r4, [r2, #0]
 80058aa:	4628      	mov	r0, r5
 80058ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b0:	f000 b8dc 	b.w	8005a6c <__malloc_unlock>
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d908      	bls.n	80058ca <_free_r+0x42>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	1821      	adds	r1, r4, r0
 80058bc:	428b      	cmp	r3, r1
 80058be:	bf01      	itttt	eq
 80058c0:	6819      	ldreq	r1, [r3, #0]
 80058c2:	685b      	ldreq	r3, [r3, #4]
 80058c4:	1809      	addeq	r1, r1, r0
 80058c6:	6021      	streq	r1, [r4, #0]
 80058c8:	e7ed      	b.n	80058a6 <_free_r+0x1e>
 80058ca:	461a      	mov	r2, r3
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	b10b      	cbz	r3, 80058d4 <_free_r+0x4c>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d9fa      	bls.n	80058ca <_free_r+0x42>
 80058d4:	6811      	ldr	r1, [r2, #0]
 80058d6:	1850      	adds	r0, r2, r1
 80058d8:	42a0      	cmp	r0, r4
 80058da:	d10b      	bne.n	80058f4 <_free_r+0x6c>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	4401      	add	r1, r0
 80058e0:	1850      	adds	r0, r2, r1
 80058e2:	4283      	cmp	r3, r0
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	d1e0      	bne.n	80058aa <_free_r+0x22>
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	6053      	str	r3, [r2, #4]
 80058ee:	4408      	add	r0, r1
 80058f0:	6010      	str	r0, [r2, #0]
 80058f2:	e7da      	b.n	80058aa <_free_r+0x22>
 80058f4:	d902      	bls.n	80058fc <_free_r+0x74>
 80058f6:	230c      	movs	r3, #12
 80058f8:	602b      	str	r3, [r5, #0]
 80058fa:	e7d6      	b.n	80058aa <_free_r+0x22>
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	1821      	adds	r1, r4, r0
 8005900:	428b      	cmp	r3, r1
 8005902:	bf04      	itt	eq
 8005904:	6819      	ldreq	r1, [r3, #0]
 8005906:	685b      	ldreq	r3, [r3, #4]
 8005908:	6063      	str	r3, [r4, #4]
 800590a:	bf04      	itt	eq
 800590c:	1809      	addeq	r1, r1, r0
 800590e:	6021      	streq	r1, [r4, #0]
 8005910:	6054      	str	r4, [r2, #4]
 8005912:	e7ca      	b.n	80058aa <_free_r+0x22>
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	bf00      	nop
 8005918:	20004c5c 	.word	0x20004c5c

0800591c <sbrk_aligned>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4e0f      	ldr	r6, [pc, #60]	@ (800595c <sbrk_aligned+0x40>)
 8005920:	460c      	mov	r4, r1
 8005922:	6831      	ldr	r1, [r6, #0]
 8005924:	4605      	mov	r5, r0
 8005926:	b911      	cbnz	r1, 800592e <sbrk_aligned+0x12>
 8005928:	f000 f9d6 	bl	8005cd8 <_sbrk_r>
 800592c:	6030      	str	r0, [r6, #0]
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 f9d1 	bl	8005cd8 <_sbrk_r>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	d103      	bne.n	8005942 <sbrk_aligned+0x26>
 800593a:	f04f 34ff 	mov.w	r4, #4294967295
 800593e:	4620      	mov	r0, r4
 8005940:	bd70      	pop	{r4, r5, r6, pc}
 8005942:	1cc4      	adds	r4, r0, #3
 8005944:	f024 0403 	bic.w	r4, r4, #3
 8005948:	42a0      	cmp	r0, r4
 800594a:	d0f8      	beq.n	800593e <sbrk_aligned+0x22>
 800594c:	1a21      	subs	r1, r4, r0
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f9c2 	bl	8005cd8 <_sbrk_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d1f2      	bne.n	800593e <sbrk_aligned+0x22>
 8005958:	e7ef      	b.n	800593a <sbrk_aligned+0x1e>
 800595a:	bf00      	nop
 800595c:	20004c58 	.word	0x20004c58

08005960 <_malloc_r>:
 8005960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005964:	1ccd      	adds	r5, r1, #3
 8005966:	f025 0503 	bic.w	r5, r5, #3
 800596a:	3508      	adds	r5, #8
 800596c:	2d0c      	cmp	r5, #12
 800596e:	bf38      	it	cc
 8005970:	250c      	movcc	r5, #12
 8005972:	2d00      	cmp	r5, #0
 8005974:	4606      	mov	r6, r0
 8005976:	db01      	blt.n	800597c <_malloc_r+0x1c>
 8005978:	42a9      	cmp	r1, r5
 800597a:	d904      	bls.n	8005986 <_malloc_r+0x26>
 800597c:	230c      	movs	r3, #12
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	2000      	movs	r0, #0
 8005982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a5c <_malloc_r+0xfc>
 800598a:	f000 f869 	bl	8005a60 <__malloc_lock>
 800598e:	f8d8 3000 	ldr.w	r3, [r8]
 8005992:	461c      	mov	r4, r3
 8005994:	bb44      	cbnz	r4, 80059e8 <_malloc_r+0x88>
 8005996:	4629      	mov	r1, r5
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff ffbf 	bl	800591c <sbrk_aligned>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	4604      	mov	r4, r0
 80059a2:	d158      	bne.n	8005a56 <_malloc_r+0xf6>
 80059a4:	f8d8 4000 	ldr.w	r4, [r8]
 80059a8:	4627      	mov	r7, r4
 80059aa:	2f00      	cmp	r7, #0
 80059ac:	d143      	bne.n	8005a36 <_malloc_r+0xd6>
 80059ae:	2c00      	cmp	r4, #0
 80059b0:	d04b      	beq.n	8005a4a <_malloc_r+0xea>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	4639      	mov	r1, r7
 80059b6:	4630      	mov	r0, r6
 80059b8:	eb04 0903 	add.w	r9, r4, r3
 80059bc:	f000 f98c 	bl	8005cd8 <_sbrk_r>
 80059c0:	4581      	cmp	r9, r0
 80059c2:	d142      	bne.n	8005a4a <_malloc_r+0xea>
 80059c4:	6821      	ldr	r1, [r4, #0]
 80059c6:	1a6d      	subs	r5, r5, r1
 80059c8:	4629      	mov	r1, r5
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ffa6 	bl	800591c <sbrk_aligned>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d03a      	beq.n	8005a4a <_malloc_r+0xea>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	442b      	add	r3, r5
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	f8d8 3000 	ldr.w	r3, [r8]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	bb62      	cbnz	r2, 8005a3c <_malloc_r+0xdc>
 80059e2:	f8c8 7000 	str.w	r7, [r8]
 80059e6:	e00f      	b.n	8005a08 <_malloc_r+0xa8>
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	1b52      	subs	r2, r2, r5
 80059ec:	d420      	bmi.n	8005a30 <_malloc_r+0xd0>
 80059ee:	2a0b      	cmp	r2, #11
 80059f0:	d917      	bls.n	8005a22 <_malloc_r+0xc2>
 80059f2:	1961      	adds	r1, r4, r5
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	6025      	str	r5, [r4, #0]
 80059f8:	bf18      	it	ne
 80059fa:	6059      	strne	r1, [r3, #4]
 80059fc:	6863      	ldr	r3, [r4, #4]
 80059fe:	bf08      	it	eq
 8005a00:	f8c8 1000 	streq.w	r1, [r8]
 8005a04:	5162      	str	r2, [r4, r5]
 8005a06:	604b      	str	r3, [r1, #4]
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 f82f 	bl	8005a6c <__malloc_unlock>
 8005a0e:	f104 000b 	add.w	r0, r4, #11
 8005a12:	1d23      	adds	r3, r4, #4
 8005a14:	f020 0007 	bic.w	r0, r0, #7
 8005a18:	1ac2      	subs	r2, r0, r3
 8005a1a:	bf1c      	itt	ne
 8005a1c:	1a1b      	subne	r3, r3, r0
 8005a1e:	50a3      	strne	r3, [r4, r2]
 8005a20:	e7af      	b.n	8005982 <_malloc_r+0x22>
 8005a22:	6862      	ldr	r2, [r4, #4]
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	bf0c      	ite	eq
 8005a28:	f8c8 2000 	streq.w	r2, [r8]
 8005a2c:	605a      	strne	r2, [r3, #4]
 8005a2e:	e7eb      	b.n	8005a08 <_malloc_r+0xa8>
 8005a30:	4623      	mov	r3, r4
 8005a32:	6864      	ldr	r4, [r4, #4]
 8005a34:	e7ae      	b.n	8005994 <_malloc_r+0x34>
 8005a36:	463c      	mov	r4, r7
 8005a38:	687f      	ldr	r7, [r7, #4]
 8005a3a:	e7b6      	b.n	80059aa <_malloc_r+0x4a>
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d1fb      	bne.n	8005a3c <_malloc_r+0xdc>
 8005a44:	2300      	movs	r3, #0
 8005a46:	6053      	str	r3, [r2, #4]
 8005a48:	e7de      	b.n	8005a08 <_malloc_r+0xa8>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	6033      	str	r3, [r6, #0]
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 f80c 	bl	8005a6c <__malloc_unlock>
 8005a54:	e794      	b.n	8005980 <_malloc_r+0x20>
 8005a56:	6005      	str	r5, [r0, #0]
 8005a58:	e7d6      	b.n	8005a08 <_malloc_r+0xa8>
 8005a5a:	bf00      	nop
 8005a5c:	20004c5c 	.word	0x20004c5c

08005a60 <__malloc_lock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <__malloc_lock+0x8>)
 8005a62:	f7ff bf00 	b.w	8005866 <__retarget_lock_acquire_recursive>
 8005a66:	bf00      	nop
 8005a68:	20004c54 	.word	0x20004c54

08005a6c <__malloc_unlock>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	@ (8005a74 <__malloc_unlock+0x8>)
 8005a6e:	f7ff befb 	b.w	8005868 <__retarget_lock_release_recursive>
 8005a72:	bf00      	nop
 8005a74:	20004c54 	.word	0x20004c54

08005a78 <__sflush_r>:
 8005a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a80:	0716      	lsls	r6, r2, #28
 8005a82:	4605      	mov	r5, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	d454      	bmi.n	8005b32 <__sflush_r+0xba>
 8005a88:	684b      	ldr	r3, [r1, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dc02      	bgt.n	8005a94 <__sflush_r+0x1c>
 8005a8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dd48      	ble.n	8005b26 <__sflush_r+0xae>
 8005a94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	d045      	beq.n	8005b26 <__sflush_r+0xae>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aa0:	682f      	ldr	r7, [r5, #0]
 8005aa2:	6a21      	ldr	r1, [r4, #32]
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	d030      	beq.n	8005b0a <__sflush_r+0x92>
 8005aa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	0759      	lsls	r1, r3, #29
 8005aae:	d505      	bpl.n	8005abc <__sflush_r+0x44>
 8005ab0:	6863      	ldr	r3, [r4, #4]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ab6:	b10b      	cbz	r3, 8005abc <__sflush_r+0x44>
 8005ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ac0:	6a21      	ldr	r1, [r4, #32]
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b0      	blx	r6
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	d106      	bne.n	8005ada <__sflush_r+0x62>
 8005acc:	6829      	ldr	r1, [r5, #0]
 8005ace:	291d      	cmp	r1, #29
 8005ad0:	d82b      	bhi.n	8005b2a <__sflush_r+0xb2>
 8005ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b7c <__sflush_r+0x104>)
 8005ad4:	40ca      	lsrs	r2, r1
 8005ad6:	07d6      	lsls	r6, r2, #31
 8005ad8:	d527      	bpl.n	8005b2a <__sflush_r+0xb2>
 8005ada:	2200      	movs	r2, #0
 8005adc:	6062      	str	r2, [r4, #4]
 8005ade:	04d9      	lsls	r1, r3, #19
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	d504      	bpl.n	8005af0 <__sflush_r+0x78>
 8005ae6:	1c42      	adds	r2, r0, #1
 8005ae8:	d101      	bne.n	8005aee <__sflush_r+0x76>
 8005aea:	682b      	ldr	r3, [r5, #0]
 8005aec:	b903      	cbnz	r3, 8005af0 <__sflush_r+0x78>
 8005aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8005af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005af2:	602f      	str	r7, [r5, #0]
 8005af4:	b1b9      	cbz	r1, 8005b26 <__sflush_r+0xae>
 8005af6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005afa:	4299      	cmp	r1, r3
 8005afc:	d002      	beq.n	8005b04 <__sflush_r+0x8c>
 8005afe:	4628      	mov	r0, r5
 8005b00:	f7ff fec2 	bl	8005888 <_free_r>
 8005b04:	2300      	movs	r3, #0
 8005b06:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b08:	e00d      	b.n	8005b26 <__sflush_r+0xae>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b0      	blx	r6
 8005b10:	4602      	mov	r2, r0
 8005b12:	1c50      	adds	r0, r2, #1
 8005b14:	d1c9      	bne.n	8005aaa <__sflush_r+0x32>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0c6      	beq.n	8005aaa <__sflush_r+0x32>
 8005b1c:	2b1d      	cmp	r3, #29
 8005b1e:	d001      	beq.n	8005b24 <__sflush_r+0xac>
 8005b20:	2b16      	cmp	r3, #22
 8005b22:	d11e      	bne.n	8005b62 <__sflush_r+0xea>
 8005b24:	602f      	str	r7, [r5, #0]
 8005b26:	2000      	movs	r0, #0
 8005b28:	e022      	b.n	8005b70 <__sflush_r+0xf8>
 8005b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b2e:	b21b      	sxth	r3, r3
 8005b30:	e01b      	b.n	8005b6a <__sflush_r+0xf2>
 8005b32:	690f      	ldr	r7, [r1, #16]
 8005b34:	2f00      	cmp	r7, #0
 8005b36:	d0f6      	beq.n	8005b26 <__sflush_r+0xae>
 8005b38:	0793      	lsls	r3, r2, #30
 8005b3a:	680e      	ldr	r6, [r1, #0]
 8005b3c:	bf08      	it	eq
 8005b3e:	694b      	ldreq	r3, [r1, #20]
 8005b40:	600f      	str	r7, [r1, #0]
 8005b42:	bf18      	it	ne
 8005b44:	2300      	movne	r3, #0
 8005b46:	eba6 0807 	sub.w	r8, r6, r7
 8005b4a:	608b      	str	r3, [r1, #8]
 8005b4c:	f1b8 0f00 	cmp.w	r8, #0
 8005b50:	dde9      	ble.n	8005b26 <__sflush_r+0xae>
 8005b52:	6a21      	ldr	r1, [r4, #32]
 8005b54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b56:	4643      	mov	r3, r8
 8005b58:	463a      	mov	r2, r7
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b0      	blx	r6
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	dc08      	bgt.n	8005b74 <__sflush_r+0xfc>
 8005b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b74:	4407      	add	r7, r0
 8005b76:	eba8 0800 	sub.w	r8, r8, r0
 8005b7a:	e7e7      	b.n	8005b4c <__sflush_r+0xd4>
 8005b7c:	20400001 	.word	0x20400001

08005b80 <_fflush_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	690b      	ldr	r3, [r1, #16]
 8005b84:	4605      	mov	r5, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	b913      	cbnz	r3, 8005b90 <_fflush_r+0x10>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	b118      	cbz	r0, 8005b9a <_fflush_r+0x1a>
 8005b92:	6a03      	ldr	r3, [r0, #32]
 8005b94:	b90b      	cbnz	r3, 8005b9a <_fflush_r+0x1a>
 8005b96:	f7ff fc23 	bl	80053e0 <__sinit>
 8005b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f3      	beq.n	8005b8a <_fflush_r+0xa>
 8005ba2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ba4:	07d0      	lsls	r0, r2, #31
 8005ba6:	d404      	bmi.n	8005bb2 <_fflush_r+0x32>
 8005ba8:	0599      	lsls	r1, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_fflush_r+0x32>
 8005bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bae:	f7ff fe5a 	bl	8005866 <__retarget_lock_acquire_recursive>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	f7ff ff5f 	bl	8005a78 <__sflush_r>
 8005bba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bbc:	07da      	lsls	r2, r3, #31
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	d4e4      	bmi.n	8005b8c <_fflush_r+0xc>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	059b      	lsls	r3, r3, #22
 8005bc6:	d4e1      	bmi.n	8005b8c <_fflush_r+0xc>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bca:	f7ff fe4d 	bl	8005868 <__retarget_lock_release_recursive>
 8005bce:	e7dd      	b.n	8005b8c <_fflush_r+0xc>

08005bd0 <__swhatbuf_r>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	b096      	sub	sp, #88	@ 0x58
 8005bdc:	4615      	mov	r5, r2
 8005bde:	461e      	mov	r6, r3
 8005be0:	da0d      	bge.n	8005bfe <__swhatbuf_r+0x2e>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	bf14      	ite	ne
 8005bee:	2340      	movne	r3, #64	@ 0x40
 8005bf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	6031      	str	r1, [r6, #0]
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	b016      	add	sp, #88	@ 0x58
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f000 f848 	bl	8005c94 <_fstat_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dbec      	blt.n	8005be2 <__swhatbuf_r+0x12>
 8005c08:	9901      	ldr	r1, [sp, #4]
 8005c0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c12:	4259      	negs	r1, r3
 8005c14:	4159      	adcs	r1, r3
 8005c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c1a:	e7eb      	b.n	8005bf4 <__swhatbuf_r+0x24>

08005c1c <__smakebuf_r>:
 8005c1c:	898b      	ldrh	r3, [r1, #12]
 8005c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c20:	079d      	lsls	r5, r3, #30
 8005c22:	4606      	mov	r6, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	d507      	bpl.n	8005c38 <__smakebuf_r+0x1c>
 8005c28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	2301      	movs	r3, #1
 8005c32:	6163      	str	r3, [r4, #20]
 8005c34:	b003      	add	sp, #12
 8005c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c38:	ab01      	add	r3, sp, #4
 8005c3a:	466a      	mov	r2, sp
 8005c3c:	f7ff ffc8 	bl	8005bd0 <__swhatbuf_r>
 8005c40:	9f00      	ldr	r7, [sp, #0]
 8005c42:	4605      	mov	r5, r0
 8005c44:	4639      	mov	r1, r7
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff fe8a 	bl	8005960 <_malloc_r>
 8005c4c:	b948      	cbnz	r0, 8005c62 <__smakebuf_r+0x46>
 8005c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c52:	059a      	lsls	r2, r3, #22
 8005c54:	d4ee      	bmi.n	8005c34 <__smakebuf_r+0x18>
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	f043 0302 	orr.w	r3, r3, #2
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	e7e2      	b.n	8005c28 <__smakebuf_r+0xc>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	6020      	str	r0, [r4, #0]
 8005c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c72:	b15b      	cbz	r3, 8005c8c <__smakebuf_r+0x70>
 8005c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 f81d 	bl	8005cb8 <_isatty_r>
 8005c7e:	b128      	cbz	r0, 8005c8c <__smakebuf_r+0x70>
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	431d      	orrs	r5, r3
 8005c90:	81a5      	strh	r5, [r4, #12]
 8005c92:	e7cf      	b.n	8005c34 <__smakebuf_r+0x18>

08005c94 <_fstat_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d07      	ldr	r5, [pc, #28]	@ (8005cb4 <_fstat_r+0x20>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	f7fa ff2a 	bl	8000afa <_fstat>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	d102      	bne.n	8005cb0 <_fstat_r+0x1c>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	b103      	cbz	r3, 8005cb0 <_fstat_r+0x1c>
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20004c50 	.word	0x20004c50

08005cb8 <_isatty_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d06      	ldr	r5, [pc, #24]	@ (8005cd4 <_isatty_r+0x1c>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fa ff29 	bl	8000b1a <_isatty>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_isatty_r+0x1a>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_isatty_r+0x1a>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	20004c50 	.word	0x20004c50

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d06      	ldr	r5, [pc, #24]	@ (8005cf4 <_sbrk_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fa ff32 	bl	8000b4c <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20004c50 	.word	0x20004c50

08005cf8 <_init>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr

08005d04 <_fini>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr
